
build/debug/stm_UI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000436c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000083c  0800447c  0800447c  0000547c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004cb8  08004cb8  00005cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004cc0  08004cc0  00005cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004cc4  08004cc4  00005cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ac  20000000  08004cc8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000035fc  200001ac  08004e74  000061ac  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200037a8  08004e74  000067a8  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000061ac  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b549  00000000  00000000  000061d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000390f  00000000  00000000  0002171e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000eeac  00000000  00000000  0002502d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000014d8  00000000  00000000  00033ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000010f6  00000000  00000000  000353b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017f3b  00000000  00000000  000364ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00006662  00000000  00000000  0004e3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000044  00000000  00000000  00054a4b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004038  00000000  00000000  00054a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000001fc  00000000  00000000  00058ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <strlen>:
 8000110:	4603      	mov	r3, r0
 8000112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000116:	2a00      	cmp	r2, #0
 8000118:	d1fb      	bne.n	8000112 <strlen+0x2>
 800011a:	1a18      	subs	r0, r3, r0
 800011c:	3801      	subs	r0, #1
 800011e:	4770      	bx	lr

08000120 <__aeabi_frsub>:
 8000120:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000124:	e002      	b.n	800012c <__addsf3>
 8000126:	bf00      	nop

08000128 <__aeabi_fsub>:
 8000128:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800012c <__addsf3>:
 800012c:	0042      	lsls	r2, r0, #1
 800012e:	bf1f      	itttt	ne
 8000130:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000134:	ea92 0f03 	teqne	r2, r3
 8000138:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800013c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000140:	d06a      	beq.n	8000218 <__addsf3+0xec>
 8000142:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000146:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800014a:	bfc1      	itttt	gt
 800014c:	18d2      	addgt	r2, r2, r3
 800014e:	4041      	eorgt	r1, r0
 8000150:	4048      	eorgt	r0, r1
 8000152:	4041      	eorgt	r1, r0
 8000154:	bfb8      	it	lt
 8000156:	425b      	neglt	r3, r3
 8000158:	2b19      	cmp	r3, #25
 800015a:	bf88      	it	hi
 800015c:	4770      	bxhi	lr
 800015e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000162:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000166:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800016a:	bf18      	it	ne
 800016c:	4240      	negne	r0, r0
 800016e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000172:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000176:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800017a:	bf18      	it	ne
 800017c:	4249      	negne	r1, r1
 800017e:	ea92 0f03 	teq	r2, r3
 8000182:	d03f      	beq.n	8000204 <__addsf3+0xd8>
 8000184:	f1a2 0201 	sub.w	r2, r2, #1
 8000188:	fa41 fc03 	asr.w	ip, r1, r3
 800018c:	eb10 000c 	adds.w	r0, r0, ip
 8000190:	f1c3 0320 	rsb	r3, r3, #32
 8000194:	fa01 f103 	lsl.w	r1, r1, r3
 8000198:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800019c:	d502      	bpl.n	80001a4 <__addsf3+0x78>
 800019e:	4249      	negs	r1, r1
 80001a0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001a4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001a8:	d313      	bcc.n	80001d2 <__addsf3+0xa6>
 80001aa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ae:	d306      	bcc.n	80001be <__addsf3+0x92>
 80001b0:	0840      	lsrs	r0, r0, #1
 80001b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001b6:	f102 0201 	add.w	r2, r2, #1
 80001ba:	2afe      	cmp	r2, #254	@ 0xfe
 80001bc:	d251      	bcs.n	8000262 <__addsf3+0x136>
 80001be:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001c6:	bf08      	it	eq
 80001c8:	f020 0001 	biceq.w	r0, r0, #1
 80001cc:	ea40 0003 	orr.w	r0, r0, r3
 80001d0:	4770      	bx	lr
 80001d2:	0049      	lsls	r1, r1, #1
 80001d4:	eb40 0000 	adc.w	r0, r0, r0
 80001d8:	3a01      	subs	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80001e0:	d2ed      	bcs.n	80001be <__addsf3+0x92>
 80001e2:	fab0 fc80 	clz	ip, r0
 80001e6:	f1ac 0c08 	sub.w	ip, ip, #8
 80001ea:	ebb2 020c 	subs.w	r2, r2, ip
 80001ee:	fa00 f00c 	lsl.w	r0, r0, ip
 80001f2:	bfaa      	itet	ge
 80001f4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80001f8:	4252      	neglt	r2, r2
 80001fa:	4318      	orrge	r0, r3
 80001fc:	bfbc      	itt	lt
 80001fe:	40d0      	lsrlt	r0, r2
 8000200:	4318      	orrlt	r0, r3
 8000202:	4770      	bx	lr
 8000204:	f092 0f00 	teq	r2, #0
 8000208:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800020c:	bf06      	itte	eq
 800020e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000212:	3201      	addeq	r2, #1
 8000214:	3b01      	subne	r3, #1
 8000216:	e7b5      	b.n	8000184 <__addsf3+0x58>
 8000218:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800021c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000220:	bf18      	it	ne
 8000222:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000226:	d021      	beq.n	800026c <__addsf3+0x140>
 8000228:	ea92 0f03 	teq	r2, r3
 800022c:	d004      	beq.n	8000238 <__addsf3+0x10c>
 800022e:	f092 0f00 	teq	r2, #0
 8000232:	bf08      	it	eq
 8000234:	4608      	moveq	r0, r1
 8000236:	4770      	bx	lr
 8000238:	ea90 0f01 	teq	r0, r1
 800023c:	bf1c      	itt	ne
 800023e:	2000      	movne	r0, #0
 8000240:	4770      	bxne	lr
 8000242:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000246:	d104      	bne.n	8000252 <__addsf3+0x126>
 8000248:	0040      	lsls	r0, r0, #1
 800024a:	bf28      	it	cs
 800024c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000250:	4770      	bx	lr
 8000252:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000256:	bf3c      	itt	cc
 8000258:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800025c:	4770      	bxcc	lr
 800025e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000262:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800026a:	4770      	bx	lr
 800026c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000270:	bf16      	itet	ne
 8000272:	4608      	movne	r0, r1
 8000274:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000278:	4601      	movne	r1, r0
 800027a:	0242      	lsls	r2, r0, #9
 800027c:	bf06      	itte	eq
 800027e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000282:	ea90 0f01 	teqeq	r0, r1
 8000286:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800028a:	4770      	bx	lr

0800028c <__aeabi_ui2f>:
 800028c:	f04f 0300 	mov.w	r3, #0
 8000290:	e004      	b.n	800029c <__aeabi_i2f+0x8>
 8000292:	bf00      	nop

08000294 <__aeabi_i2f>:
 8000294:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000298:	bf48      	it	mi
 800029a:	4240      	negmi	r0, r0
 800029c:	ea5f 0c00 	movs.w	ip, r0
 80002a0:	bf08      	it	eq
 80002a2:	4770      	bxeq	lr
 80002a4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002a8:	4601      	mov	r1, r0
 80002aa:	f04f 0000 	mov.w	r0, #0
 80002ae:	e01c      	b.n	80002ea <__aeabi_l2f+0x2a>

080002b0 <__aeabi_ul2f>:
 80002b0:	ea50 0201 	orrs.w	r2, r0, r1
 80002b4:	bf08      	it	eq
 80002b6:	4770      	bxeq	lr
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e00a      	b.n	80002d4 <__aeabi_l2f+0x14>
 80002be:	bf00      	nop

080002c0 <__aeabi_l2f>:
 80002c0:	ea50 0201 	orrs.w	r2, r0, r1
 80002c4:	bf08      	it	eq
 80002c6:	4770      	bxeq	lr
 80002c8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002cc:	d502      	bpl.n	80002d4 <__aeabi_l2f+0x14>
 80002ce:	4240      	negs	r0, r0
 80002d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d4:	ea5f 0c01 	movs.w	ip, r1
 80002d8:	bf02      	ittt	eq
 80002da:	4684      	moveq	ip, r0
 80002dc:	4601      	moveq	r1, r0
 80002de:	2000      	moveq	r0, #0
 80002e0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80002e4:	bf08      	it	eq
 80002e6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80002ea:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80002ee:	fabc f28c 	clz	r2, ip
 80002f2:	3a08      	subs	r2, #8
 80002f4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80002f8:	db10      	blt.n	800031c <__aeabi_l2f+0x5c>
 80002fa:	fa01 fc02 	lsl.w	ip, r1, r2
 80002fe:	4463      	add	r3, ip
 8000300:	fa00 fc02 	lsl.w	ip, r0, r2
 8000304:	f1c2 0220 	rsb	r2, r2, #32
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	fa20 f202 	lsr.w	r2, r0, r2
 8000310:	eb43 0002 	adc.w	r0, r3, r2
 8000314:	bf08      	it	eq
 8000316:	f020 0001 	biceq.w	r0, r0, #1
 800031a:	4770      	bx	lr
 800031c:	f102 0220 	add.w	r2, r2, #32
 8000320:	fa01 fc02 	lsl.w	ip, r1, r2
 8000324:	f1c2 0220 	rsb	r2, r2, #32
 8000328:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800032c:	fa21 f202 	lsr.w	r2, r1, r2
 8000330:	eb43 0002 	adc.w	r0, r3, r2
 8000334:	bf08      	it	eq
 8000336:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800033a:	4770      	bx	lr

0800033c <__aeabi_fmul>:
 800033c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000340:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000344:	bf1e      	ittt	ne
 8000346:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800034a:	ea92 0f0c 	teqne	r2, ip
 800034e:	ea93 0f0c 	teqne	r3, ip
 8000352:	d06f      	beq.n	8000434 <__aeabi_fmul+0xf8>
 8000354:	441a      	add	r2, r3
 8000356:	ea80 0c01 	eor.w	ip, r0, r1
 800035a:	0240      	lsls	r0, r0, #9
 800035c:	bf18      	it	ne
 800035e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000362:	d01e      	beq.n	80003a2 <__aeabi_fmul+0x66>
 8000364:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000368:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800036c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000370:	fba0 3101 	umull	r3, r1, r0, r1
 8000374:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000378:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800037c:	bf3e      	ittt	cc
 800037e:	0049      	lslcc	r1, r1, #1
 8000380:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000384:	005b      	lslcc	r3, r3, #1
 8000386:	ea40 0001 	orr.w	r0, r0, r1
 800038a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800038e:	2afd      	cmp	r2, #253	@ 0xfd
 8000390:	d81d      	bhi.n	80003ce <__aeabi_fmul+0x92>
 8000392:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000396:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800039a:	bf08      	it	eq
 800039c:	f020 0001 	biceq.w	r0, r0, #1
 80003a0:	4770      	bx	lr
 80003a2:	f090 0f00 	teq	r0, #0
 80003a6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003aa:	bf08      	it	eq
 80003ac:	0249      	lsleq	r1, r1, #9
 80003ae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003b2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003b6:	3a7f      	subs	r2, #127	@ 0x7f
 80003b8:	bfc2      	ittt	gt
 80003ba:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003be:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003c2:	4770      	bxgt	lr
 80003c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003c8:	f04f 0300 	mov.w	r3, #0
 80003cc:	3a01      	subs	r2, #1
 80003ce:	dc5d      	bgt.n	800048c <__aeabi_fmul+0x150>
 80003d0:	f112 0f19 	cmn.w	r2, #25
 80003d4:	bfdc      	itt	le
 80003d6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80003da:	4770      	bxle	lr
 80003dc:	f1c2 0200 	rsb	r2, r2, #0
 80003e0:	0041      	lsls	r1, r0, #1
 80003e2:	fa21 f102 	lsr.w	r1, r1, r2
 80003e6:	f1c2 0220 	rsb	r2, r2, #32
 80003ea:	fa00 fc02 	lsl.w	ip, r0, r2
 80003ee:	ea5f 0031 	movs.w	r0, r1, rrx
 80003f2:	f140 0000 	adc.w	r0, r0, #0
 80003f6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80003fa:	bf08      	it	eq
 80003fc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000400:	4770      	bx	lr
 8000402:	f092 0f00 	teq	r2, #0
 8000406:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800040a:	bf02      	ittt	eq
 800040c:	0040      	lsleq	r0, r0, #1
 800040e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000412:	3a01      	subeq	r2, #1
 8000414:	d0f9      	beq.n	800040a <__aeabi_fmul+0xce>
 8000416:	ea40 000c 	orr.w	r0, r0, ip
 800041a:	f093 0f00 	teq	r3, #0
 800041e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000422:	bf02      	ittt	eq
 8000424:	0049      	lsleq	r1, r1, #1
 8000426:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800042a:	3b01      	subeq	r3, #1
 800042c:	d0f9      	beq.n	8000422 <__aeabi_fmul+0xe6>
 800042e:	ea41 010c 	orr.w	r1, r1, ip
 8000432:	e78f      	b.n	8000354 <__aeabi_fmul+0x18>
 8000434:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000438:	ea92 0f0c 	teq	r2, ip
 800043c:	bf18      	it	ne
 800043e:	ea93 0f0c 	teqne	r3, ip
 8000442:	d00a      	beq.n	800045a <__aeabi_fmul+0x11e>
 8000444:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000448:	bf18      	it	ne
 800044a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	d1d8      	bne.n	8000402 <__aeabi_fmul+0xc6>
 8000450:	ea80 0001 	eor.w	r0, r0, r1
 8000454:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000458:	4770      	bx	lr
 800045a:	f090 0f00 	teq	r0, #0
 800045e:	bf17      	itett	ne
 8000460:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000464:	4608      	moveq	r0, r1
 8000466:	f091 0f00 	teqne	r1, #0
 800046a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800046e:	d014      	beq.n	800049a <__aeabi_fmul+0x15e>
 8000470:	ea92 0f0c 	teq	r2, ip
 8000474:	d101      	bne.n	800047a <__aeabi_fmul+0x13e>
 8000476:	0242      	lsls	r2, r0, #9
 8000478:	d10f      	bne.n	800049a <__aeabi_fmul+0x15e>
 800047a:	ea93 0f0c 	teq	r3, ip
 800047e:	d103      	bne.n	8000488 <__aeabi_fmul+0x14c>
 8000480:	024b      	lsls	r3, r1, #9
 8000482:	bf18      	it	ne
 8000484:	4608      	movne	r0, r1
 8000486:	d108      	bne.n	800049a <__aeabi_fmul+0x15e>
 8000488:	ea80 0001 	eor.w	r0, r0, r1
 800048c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000490:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000494:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000498:	4770      	bx	lr
 800049a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800049e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004a2:	4770      	bx	lr

080004a4 <__aeabi_fdiv>:
 80004a4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ac:	bf1e      	ittt	ne
 80004ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004b2:	ea92 0f0c 	teqne	r2, ip
 80004b6:	ea93 0f0c 	teqne	r3, ip
 80004ba:	d069      	beq.n	8000590 <__aeabi_fdiv+0xec>
 80004bc:	eba2 0203 	sub.w	r2, r2, r3
 80004c0:	ea80 0c01 	eor.w	ip, r0, r1
 80004c4:	0249      	lsls	r1, r1, #9
 80004c6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004ca:	d037      	beq.n	800053c <__aeabi_fdiv+0x98>
 80004cc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004d0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80004d4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80004d8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80004dc:	428b      	cmp	r3, r1
 80004de:	bf38      	it	cc
 80004e0:	005b      	lslcc	r3, r3, #1
 80004e2:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80004e6:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80004ea:	428b      	cmp	r3, r1
 80004ec:	bf24      	itt	cs
 80004ee:	1a5b      	subcs	r3, r3, r1
 80004f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80004f4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80004f8:	bf24      	itt	cs
 80004fa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80004fe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000502:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000506:	bf24      	itt	cs
 8000508:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800050c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000510:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000514:	bf24      	itt	cs
 8000516:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800051a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800051e:	011b      	lsls	r3, r3, #4
 8000520:	bf18      	it	ne
 8000522:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000526:	d1e0      	bne.n	80004ea <__aeabi_fdiv+0x46>
 8000528:	2afd      	cmp	r2, #253	@ 0xfd
 800052a:	f63f af50 	bhi.w	80003ce <__aeabi_fmul+0x92>
 800052e:	428b      	cmp	r3, r1
 8000530:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000534:	bf08      	it	eq
 8000536:	f020 0001 	biceq.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000540:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000544:	327f      	adds	r2, #127	@ 0x7f
 8000546:	bfc2      	ittt	gt
 8000548:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800054c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000550:	4770      	bxgt	lr
 8000552:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000556:	f04f 0300 	mov.w	r3, #0
 800055a:	3a01      	subs	r2, #1
 800055c:	e737      	b.n	80003ce <__aeabi_fmul+0x92>
 800055e:	f092 0f00 	teq	r2, #0
 8000562:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000566:	bf02      	ittt	eq
 8000568:	0040      	lsleq	r0, r0, #1
 800056a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800056e:	3a01      	subeq	r2, #1
 8000570:	d0f9      	beq.n	8000566 <__aeabi_fdiv+0xc2>
 8000572:	ea40 000c 	orr.w	r0, r0, ip
 8000576:	f093 0f00 	teq	r3, #0
 800057a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800057e:	bf02      	ittt	eq
 8000580:	0049      	lsleq	r1, r1, #1
 8000582:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000586:	3b01      	subeq	r3, #1
 8000588:	d0f9      	beq.n	800057e <__aeabi_fdiv+0xda>
 800058a:	ea41 010c 	orr.w	r1, r1, ip
 800058e:	e795      	b.n	80004bc <__aeabi_fdiv+0x18>
 8000590:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000594:	ea92 0f0c 	teq	r2, ip
 8000598:	d108      	bne.n	80005ac <__aeabi_fdiv+0x108>
 800059a:	0242      	lsls	r2, r0, #9
 800059c:	f47f af7d 	bne.w	800049a <__aeabi_fmul+0x15e>
 80005a0:	ea93 0f0c 	teq	r3, ip
 80005a4:	f47f af70 	bne.w	8000488 <__aeabi_fmul+0x14c>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e776      	b.n	800049a <__aeabi_fmul+0x15e>
 80005ac:	ea93 0f0c 	teq	r3, ip
 80005b0:	d104      	bne.n	80005bc <__aeabi_fdiv+0x118>
 80005b2:	024b      	lsls	r3, r1, #9
 80005b4:	f43f af4c 	beq.w	8000450 <__aeabi_fmul+0x114>
 80005b8:	4608      	mov	r0, r1
 80005ba:	e76e      	b.n	800049a <__aeabi_fmul+0x15e>
 80005bc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005c0:	bf18      	it	ne
 80005c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005c6:	d1ca      	bne.n	800055e <__aeabi_fdiv+0xba>
 80005c8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005cc:	f47f af5c 	bne.w	8000488 <__aeabi_fmul+0x14c>
 80005d0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80005d4:	f47f af3c 	bne.w	8000450 <__aeabi_fmul+0x114>
 80005d8:	e75f      	b.n	800049a <__aeabi_fmul+0x15e>
 80005da:	bf00      	nop

080005dc <__gesf2>:
 80005dc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80005e0:	e006      	b.n	80005f0 <__cmpsf2+0x4>
 80005e2:	bf00      	nop

080005e4 <__lesf2>:
 80005e4:	f04f 0c01 	mov.w	ip, #1
 80005e8:	e002      	b.n	80005f0 <__cmpsf2+0x4>
 80005ea:	bf00      	nop

080005ec <__cmpsf2>:
 80005ec:	f04f 0c01 	mov.w	ip, #1
 80005f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000600:	bf18      	it	ne
 8000602:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000606:	d011      	beq.n	800062c <__cmpsf2+0x40>
 8000608:	b001      	add	sp, #4
 800060a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800060e:	bf18      	it	ne
 8000610:	ea90 0f01 	teqne	r0, r1
 8000614:	bf58      	it	pl
 8000616:	ebb2 0003 	subspl.w	r0, r2, r3
 800061a:	bf88      	it	hi
 800061c:	17c8      	asrhi	r0, r1, #31
 800061e:	bf38      	it	cc
 8000620:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000624:	bf18      	it	ne
 8000626:	f040 0001 	orrne.w	r0, r0, #1
 800062a:	4770      	bx	lr
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	d102      	bne.n	8000638 <__cmpsf2+0x4c>
 8000632:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000636:	d105      	bne.n	8000644 <__cmpsf2+0x58>
 8000638:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800063c:	d1e4      	bne.n	8000608 <__cmpsf2+0x1c>
 800063e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000642:	d0e1      	beq.n	8000608 <__cmpsf2+0x1c>
 8000644:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <__aeabi_cfrcmple>:
 800064c:	4684      	mov	ip, r0
 800064e:	4608      	mov	r0, r1
 8000650:	4661      	mov	r1, ip
 8000652:	e7ff      	b.n	8000654 <__aeabi_cfcmpeq>

08000654 <__aeabi_cfcmpeq>:
 8000654:	b50f      	push	{r0, r1, r2, r3, lr}
 8000656:	f7ff ffc9 	bl	80005ec <__cmpsf2>
 800065a:	2800      	cmp	r0, #0
 800065c:	bf48      	it	mi
 800065e:	f110 0f00 	cmnmi.w	r0, #0
 8000662:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000664 <__aeabi_fcmpeq>:
 8000664:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000668:	f7ff fff4 	bl	8000654 <__aeabi_cfcmpeq>
 800066c:	bf0c      	ite	eq
 800066e:	2001      	moveq	r0, #1
 8000670:	2000      	movne	r0, #0
 8000672:	f85d fb08 	ldr.w	pc, [sp], #8
 8000676:	bf00      	nop

08000678 <__aeabi_fcmplt>:
 8000678:	f84d ed08 	str.w	lr, [sp, #-8]!
 800067c:	f7ff ffea 	bl	8000654 <__aeabi_cfcmpeq>
 8000680:	bf34      	ite	cc
 8000682:	2001      	movcc	r0, #1
 8000684:	2000      	movcs	r0, #0
 8000686:	f85d fb08 	ldr.w	pc, [sp], #8
 800068a:	bf00      	nop

0800068c <__aeabi_fcmple>:
 800068c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000690:	f7ff ffe0 	bl	8000654 <__aeabi_cfcmpeq>
 8000694:	bf94      	ite	ls
 8000696:	2001      	movls	r0, #1
 8000698:	2000      	movhi	r0, #0
 800069a:	f85d fb08 	ldr.w	pc, [sp], #8
 800069e:	bf00      	nop

080006a0 <__aeabi_fcmpge>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff ffd2 	bl	800064c <__aeabi_cfrcmple>
 80006a8:	bf94      	ite	ls
 80006aa:	2001      	movls	r0, #1
 80006ac:	2000      	movhi	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmpgt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffc8 	bl	800064c <__aeabi_cfrcmple>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmpun>:
 80006c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d4:	d102      	bne.n	80006dc <__aeabi_fcmpun+0x14>
 80006d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80006da:	d108      	bne.n	80006ee <__aeabi_fcmpun+0x26>
 80006dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80006e0:	d102      	bne.n	80006e8 <__aeabi_fcmpun+0x20>
 80006e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80006e6:	d102      	bne.n	80006ee <__aeabi_fcmpun+0x26>
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	4770      	bx	lr
 80006ee:	f04f 0001 	mov.w	r0, #1
 80006f2:	4770      	bx	lr

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <deregister_tm_clones>:
 8000734:	4803      	ldr	r0, [pc, #12]	@ (8000744 <deregister_tm_clones+0x10>)
 8000736:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <deregister_tm_clones+0x14>)
 8000738:	4283      	cmp	r3, r0
 800073a:	d002      	beq.n	8000742 <deregister_tm_clones+0xe>
 800073c:	4b03      	ldr	r3, [pc, #12]	@ (800074c <deregister_tm_clones+0x18>)
 800073e:	b103      	cbz	r3, 8000742 <deregister_tm_clones+0xe>
 8000740:	4718      	bx	r3
 8000742:	4770      	bx	lr
 8000744:	200001ac 	.word	0x200001ac
 8000748:	200001ac 	.word	0x200001ac
 800074c:	00000000 	.word	0x00000000

08000750 <register_tm_clones>:
 8000750:	4805      	ldr	r0, [pc, #20]	@ (8000768 <register_tm_clones+0x18>)
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <register_tm_clones+0x1c>)
 8000754:	1a1b      	subs	r3, r3, r0
 8000756:	0fd9      	lsrs	r1, r3, #31
 8000758:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 800075c:	1049      	asrs	r1, r1, #1
 800075e:	d002      	beq.n	8000766 <register_tm_clones+0x16>
 8000760:	4b03      	ldr	r3, [pc, #12]	@ (8000770 <register_tm_clones+0x20>)
 8000762:	b103      	cbz	r3, 8000766 <register_tm_clones+0x16>
 8000764:	4718      	bx	r3
 8000766:	4770      	bx	lr
 8000768:	200001ac 	.word	0x200001ac
 800076c:	200001ac 	.word	0x200001ac
 8000770:	00000000 	.word	0x00000000

08000774 <__do_global_dtors_aux>:
 8000774:	b510      	push	{r4, lr}
 8000776:	4c06      	ldr	r4, [pc, #24]	@ (8000790 <__do_global_dtors_aux+0x1c>)
 8000778:	7823      	ldrb	r3, [r4, #0]
 800077a:	b943      	cbnz	r3, 800078e <__do_global_dtors_aux+0x1a>
 800077c:	f7ff ffda 	bl	8000734 <deregister_tm_clones>
 8000780:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <__do_global_dtors_aux+0x20>)
 8000782:	b113      	cbz	r3, 800078a <__do_global_dtors_aux+0x16>
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <__do_global_dtors_aux+0x24>)
 8000786:	f3af 8000 	nop.w
 800078a:	2301      	movs	r3, #1
 800078c:	7023      	strb	r3, [r4, #0]
 800078e:	bd10      	pop	{r4, pc}
 8000790:	200001ac 	.word	0x200001ac
 8000794:	00000000 	.word	0x00000000
 8000798:	08004464 	.word	0x08004464

0800079c <frame_dummy>:
 800079c:	b508      	push	{r3, lr}
 800079e:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <frame_dummy+0x18>)
 80007a0:	b11b      	cbz	r3, 80007aa <frame_dummy+0xe>
 80007a2:	4905      	ldr	r1, [pc, #20]	@ (80007b8 <frame_dummy+0x1c>)
 80007a4:	4805      	ldr	r0, [pc, #20]	@ (80007bc <frame_dummy+0x20>)
 80007a6:	f3af 8000 	nop.w
 80007aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007ae:	f7ff bfcf 	b.w	8000750 <register_tm_clones>
 80007b2:	bf00      	nop
 80007b4:	00000000 	.word	0x00000000
 80007b8:	200001b0 	.word	0x200001b0
 80007bc:	08004464 	.word	0x08004464

080007c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80007c0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80007c2:	f002 fca5 	bl	8003110 <vTaskStartScheduler>
  
  return osOK;
}
 80007c6:	2000      	movs	r0, #0
 80007c8:	bd08      	pop	{r3, pc}

080007ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80007ca:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80007cc:	b900      	cbnz	r0, 80007d0 <osDelay+0x6>
 80007ce:	2001      	movs	r0, #1
 80007d0:	f002 fde8 	bl	80033a4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80007d4:	2000      	movs	r0, #0
 80007d6:	bd08      	pop	{r3, pc}

080007d8 <cubicEaseOut>:
#include <stdint.h>
#include "math.h"

// 三次缓出函数
static float cubicEaseOut(float t)
{
 80007d8:	b508      	push	{r3, lr}
 80007da:	4601      	mov	r1, r0
    return (1.0f - powf(1.0f - t, 3.0f));
 80007dc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80007e0:	f7ff fca2 	bl	8000128 <__aeabi_fsub>
 80007e4:	4904      	ldr	r1, [pc, #16]	@ (80007f8 <cubicEaseOut+0x20>)
 80007e6:	f003 f91f 	bl	8003a28 <powf>
 80007ea:	4601      	mov	r1, r0
 80007ec:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80007f0:	f7ff fc9a 	bl	8000128 <__aeabi_fsub>
}
 80007f4:	bd08      	pop	{r3, pc}
 80007f6:	bf00      	nop
 80007f8:	40400000 	.word	0x40400000

080007fc <update_location_linear>:

void update_location_linear(uint8_t *setLocation, uint8_t startLocation, uint8_t endLocation, uint8_t passedTimes, uint8_t wantedTimes)
{
 80007fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000800:	4606      	mov	r6, r0
 8000802:	460c      	mov	r4, r1
 8000804:	461d      	mov	r5, r3
 8000806:	f89d 7018 	ldrb.w	r7, [sp, #24]

    float delta = 0;

    // 超时
    if (passedTimes > wantedTimes)
 800080a:	42bb      	cmp	r3, r7
 800080c:	d900      	bls.n	8000810 <update_location_linear+0x14>
    {
        *setLocation = endLocation;
 800080e:	7002      	strb	r2, [r0, #0]
    }

    // 当前位置大于结束位置
    if (startLocation > endLocation)
 8000810:	42a2      	cmp	r2, r4
 8000812:	d21f      	bcs.n	8000854 <update_location_linear+0x58>
    {
        delta = (float)(startLocation - endLocation) / wantedTimes;
 8000814:	1aa0      	subs	r0, r4, r2
 8000816:	f7ff fd3d 	bl	8000294 <__aeabi_i2f>
 800081a:	4680      	mov	r8, r0
 800081c:	4638      	mov	r0, r7
 800081e:	f7ff fd39 	bl	8000294 <__aeabi_i2f>
 8000822:	4601      	mov	r1, r0
 8000824:	4640      	mov	r0, r8
 8000826:	f7ff fe3d 	bl	80004a4 <__aeabi_fdiv>
 800082a:	4607      	mov	r7, r0
        *setLocation = (uint8_t)roundf(startLocation - delta * passedTimes);
 800082c:	4628      	mov	r0, r5
 800082e:	f7ff fd31 	bl	8000294 <__aeabi_i2f>
 8000832:	4639      	mov	r1, r7
 8000834:	f7ff fd82 	bl	800033c <__aeabi_fmul>
 8000838:	4605      	mov	r5, r0
 800083a:	4620      	mov	r0, r4
 800083c:	f7ff fd2a 	bl	8000294 <__aeabi_i2f>
 8000840:	4629      	mov	r1, r5
 8000842:	f7ff fc71 	bl	8000128 <__aeabi_fsub>
 8000846:	f003 f8cb 	bl	80039e0 <roundf>
 800084a:	f7ff ff53 	bl	80006f4 <__aeabi_f2uiz>
 800084e:	7030      	strb	r0, [r6, #0]
    else
    {
        delta = (float)(endLocation - startLocation) / wantedTimes;
        *setLocation = (uint8_t)roundf(startLocation + delta * passedTimes);
    }
}
 8000850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        delta = (float)(endLocation - startLocation) / wantedTimes;
 8000854:	1b10      	subs	r0, r2, r4
 8000856:	f7ff fd1d 	bl	8000294 <__aeabi_i2f>
 800085a:	4680      	mov	r8, r0
 800085c:	4638      	mov	r0, r7
 800085e:	f7ff fd19 	bl	8000294 <__aeabi_i2f>
 8000862:	4601      	mov	r1, r0
 8000864:	4640      	mov	r0, r8
 8000866:	f7ff fe1d 	bl	80004a4 <__aeabi_fdiv>
 800086a:	4607      	mov	r7, r0
        *setLocation = (uint8_t)roundf(startLocation + delta * passedTimes);
 800086c:	4628      	mov	r0, r5
 800086e:	f7ff fd11 	bl	8000294 <__aeabi_i2f>
 8000872:	4639      	mov	r1, r7
 8000874:	f7ff fd62 	bl	800033c <__aeabi_fmul>
 8000878:	4605      	mov	r5, r0
 800087a:	4620      	mov	r0, r4
 800087c:	f7ff fd0a 	bl	8000294 <__aeabi_i2f>
 8000880:	4629      	mov	r1, r5
 8000882:	f7ff fc53 	bl	800012c <__addsf3>
 8000886:	f003 f8ab 	bl	80039e0 <roundf>
 800088a:	f7ff ff33 	bl	80006f4 <__aeabi_f2uiz>
 800088e:	7030      	strb	r0, [r6, #0]
}
 8000890:	e7de      	b.n	8000850 <update_location_linear+0x54>

08000892 <update_location_non_linear>:

void update_location_non_linear(uint8_t *setLocation, uint8_t startLocation, uint8_t endLocation, uint8_t passedTimes, uint8_t wantedTimes)
{
 8000892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000896:	4606      	mov	r6, r0
 8000898:	460c      	mov	r4, r1
 800089a:	4615      	mov	r5, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f89d 8018 	ldrb.w	r8, [sp, #24]
    // 超时
    if (passedTimes > wantedTimes)
 80008a2:	4543      	cmp	r3, r8
 80008a4:	d900      	bls.n	80008a8 <update_location_non_linear+0x16>
    {
        *setLocation = endLocation;
 80008a6:	7032      	strb	r2, [r6, #0]
    }

    float t = (float)passedTimes / wantedTimes; // 归一化时间
 80008a8:	f7ff fcf0 	bl	800028c <__aeabi_ui2f>
 80008ac:	4607      	mov	r7, r0
 80008ae:	4640      	mov	r0, r8
 80008b0:	f7ff fcf0 	bl	8000294 <__aeabi_i2f>
 80008b4:	4601      	mov	r1, r0
 80008b6:	4638      	mov	r0, r7
 80008b8:	f7ff fdf4 	bl	80004a4 <__aeabi_fdiv>
    float easeOutValue = cubicEaseOut(t);       // 计算缓动值
 80008bc:	f7ff ff8c 	bl	80007d8 <cubicEaseOut>
 80008c0:	4607      	mov	r7, r0

    if (startLocation > endLocation)
 80008c2:	42a5      	cmp	r5, r4
 80008c4:	d214      	bcs.n	80008f0 <update_location_non_linear+0x5e>
    {
        float delta = (float)(startLocation - endLocation);
 80008c6:	1b60      	subs	r0, r4, r5
 80008c8:	f7ff fce4 	bl	8000294 <__aeabi_i2f>
 80008cc:	4601      	mov	r1, r0
        *setLocation = (uint8_t)roundf(startLocation - delta * easeOutValue);
 80008ce:	4638      	mov	r0, r7
 80008d0:	f7ff fd34 	bl	800033c <__aeabi_fmul>
 80008d4:	4605      	mov	r5, r0
 80008d6:	4620      	mov	r0, r4
 80008d8:	f7ff fcdc 	bl	8000294 <__aeabi_i2f>
 80008dc:	4629      	mov	r1, r5
 80008de:	f7ff fc23 	bl	8000128 <__aeabi_fsub>
 80008e2:	f003 f87d 	bl	80039e0 <roundf>
 80008e6:	f7ff ff05 	bl	80006f4 <__aeabi_f2uiz>
 80008ea:	7030      	strb	r0, [r6, #0]
    else
    {
        float delta = (float)(endLocation - startLocation);
        *setLocation = (uint8_t)roundf(startLocation + delta * easeOutValue);
    }
}
 80008ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        float delta = (float)(endLocation - startLocation);
 80008f0:	1b28      	subs	r0, r5, r4
 80008f2:	f7ff fccf 	bl	8000294 <__aeabi_i2f>
 80008f6:	4601      	mov	r1, r0
        *setLocation = (uint8_t)roundf(startLocation + delta * easeOutValue);
 80008f8:	4638      	mov	r0, r7
 80008fa:	f7ff fd1f 	bl	800033c <__aeabi_fmul>
 80008fe:	4605      	mov	r5, r0
 8000900:	4620      	mov	r0, r4
 8000902:	f7ff fcc7 	bl	8000294 <__aeabi_i2f>
 8000906:	4629      	mov	r1, r5
 8000908:	f7ff fc10 	bl	800012c <__addsf3>
 800090c:	f003 f868 	bl	80039e0 <roundf>
 8000910:	f7ff fef0 	bl	80006f4 <__aeabi_f2uiz>
 8000914:	7030      	strb	r0, [r6, #0]
}
 8000916:	e7e9      	b.n	80008ec <update_location_non_linear+0x5a>

08000918 <linear_animation>:

// 线形运动
void linear_animation(curve_state_typedef *curveState)
{
 8000918:	b510      	push	{r4, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	4604      	mov	r4, r0
    update_location_linear(&curveState->setLocation_X, curveState->startLocation_X, curveState->endLocation_X, curveState->passedTimes, curveState->wantedTimes);
 800091e:	f810 3b06 	ldrb.w	r3, [r0], #6
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	7863      	ldrb	r3, [r4, #1]
 8000926:	7922      	ldrb	r2, [r4, #4]
 8000928:	78a1      	ldrb	r1, [r4, #2]
 800092a:	f7ff ff67 	bl	80007fc <update_location_linear>
    update_location_linear(&curveState->setLocation_y, curveState->startLocation_y, curveState->endLocation_y, curveState->passedTimes, curveState->wantedTimes);
 800092e:	4620      	mov	r0, r4
 8000930:	f810 3b07 	ldrb.w	r3, [r0], #7
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	7863      	ldrb	r3, [r4, #1]
 8000938:	7962      	ldrb	r2, [r4, #5]
 800093a:	78e1      	ldrb	r1, [r4, #3]
 800093c:	f7ff ff5e 	bl	80007fc <update_location_linear>
}
 8000940:	b002      	add	sp, #8
 8000942:	bd10      	pop	{r4, pc}

08000944 <nonLinear_animation>:

// 非线形动画
void nonLinear_animation(curve_state_typedef *curveState)
{
 8000944:	b510      	push	{r4, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	4604      	mov	r4, r0
    update_location_non_linear(&curveState->setLocation_X, curveState->startLocation_X, curveState->endLocation_X, curveState->passedTimes, curveState->wantedTimes);
 800094a:	f810 3b06 	ldrb.w	r3, [r0], #6
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	7863      	ldrb	r3, [r4, #1]
 8000952:	7922      	ldrb	r2, [r4, #4]
 8000954:	78a1      	ldrb	r1, [r4, #2]
 8000956:	f7ff ff9c 	bl	8000892 <update_location_non_linear>
    update_location_non_linear(&curveState->setLocation_y, curveState->startLocation_y, curveState->endLocation_y, curveState->passedTimes, curveState->wantedTimes);
 800095a:	4620      	mov	r0, r4
 800095c:	f810 3b07 	ldrb.w	r3, [r0], #7
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	7863      	ldrb	r3, [r4, #1]
 8000964:	7962      	ldrb	r2, [r4, #5]
 8000966:	78e1      	ldrb	r1, [r4, #3]
 8000968:	f7ff ff93 	bl	8000892 <update_location_non_linear>
}
 800096c:	b002      	add	sp, #8
 800096e:	bd10      	pop	{r4, pc}

08000970 <animation_entry>:

// 动画入口
void animation_entry(curve_state_typedef *curveState, curve_typedef curveType)
{
 8000970:	b510      	push	{r4, lr}
 8000972:	4604      	mov	r4, r0

    // 传入的时间非法
    if (curveState->wantedTimes == 0)
 8000974:	7803      	ldrb	r3, [r0, #0]
 8000976:	b153      	cbz	r3, 800098e <animation_entry+0x1e>
        curveState->setLocation_X = curveState->endLocation_X;
        curveState->setLocation_y = curveState->endLocation_y;
        return;
    }

    switch (curveType)
 8000978:	2901      	cmp	r1, #1
 800097a:	d00d      	beq.n	8000998 <animation_entry+0x28>
    case NON_LINEAR_ANIMATION:
        nonLinear_animation(curveState);
        break;
    case LINEAR_ANIMATION:
    default:
        linear_animation(curveState);
 800097c:	f7ff ffcc 	bl	8000918 <linear_animation>
        break;
    }

    // 更新时间
    if (curveState->passedTimes <= curveState->wantedTimes)
 8000980:	7863      	ldrb	r3, [r4, #1]
 8000982:	7822      	ldrb	r2, [r4, #0]
 8000984:	4293      	cmp	r3, r2
 8000986:	d806      	bhi.n	8000996 <animation_entry+0x26>
    {
        curveState->passedTimes++;
 8000988:	3301      	adds	r3, #1
 800098a:	7063      	strb	r3, [r4, #1]
 800098c:	e003      	b.n	8000996 <animation_entry+0x26>
        curveState->setLocation_X = curveState->endLocation_X;
 800098e:	7903      	ldrb	r3, [r0, #4]
 8000990:	7183      	strb	r3, [r0, #6]
        curveState->setLocation_y = curveState->endLocation_y;
 8000992:	7943      	ldrb	r3, [r0, #5]
 8000994:	71c3      	strb	r3, [r0, #7]
    }
 8000996:	bd10      	pop	{r4, pc}
        nonLinear_animation(curveState);
 8000998:	f7ff ffd4 	bl	8000944 <nonLinear_animation>
        break;
 800099c:	e7f0      	b.n	8000980 <animation_entry+0x10>
	...

080009a0 <OLED_WriteNBytes>:
 *            length - 数据个数
 *  输出参数：无
 *  返回值：0-成功, 其他值失败
 */
static int OLED_WriteNBytes(uint8_t *buf, uint16_t length)
{
 80009a0:	b500      	push	{lr}
 80009a2:	b085      	sub	sp, #20
    return HAL_I2C_Mem_Write(g_pHI2COLED, OELD_I2C_ADDR, 0x40, 1, buf, length, OLED_TIMEOUT);
 80009a4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80009a8:	9302      	str	r3, [sp, #8]
 80009aa:	9101      	str	r1, [sp, #4]
 80009ac:	9000      	str	r0, [sp, #0]
 80009ae:	2301      	movs	r3, #1
 80009b0:	2240      	movs	r2, #64	@ 0x40
 80009b2:	2178      	movs	r1, #120	@ 0x78
 80009b4:	4802      	ldr	r0, [pc, #8]	@ (80009c0 <OLED_WriteNBytes+0x20>)
 80009b6:	f001 faf5 	bl	8001fa4 <HAL_I2C_Mem_Write>
}
 80009ba:	b005      	add	sp, #20
 80009bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80009c0:	20003084 	.word	0x20003084

080009c4 <OLED_WriteCmd>:
{
 80009c4:	b500      	push	{lr}
 80009c6:	b085      	sub	sp, #20
    tmpbuf[0] = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f88d 300c 	strb.w	r3, [sp, #12]
    tmpbuf[1] = cmd;
 80009ce:	f88d 000d 	strb.w	r0, [sp, #13]
    return HAL_I2C_Master_Transmit(g_pHI2COLED, OELD_I2C_ADDR, tmpbuf, 2, OLED_TIMEOUT);
 80009d2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2302      	movs	r3, #2
 80009da:	aa03      	add	r2, sp, #12
 80009dc:	2178      	movs	r1, #120	@ 0x78
 80009de:	4803      	ldr	r0, [pc, #12]	@ (80009ec <OLED_WriteCmd+0x28>)
 80009e0:	f001 fa24 	bl	8001e2c <HAL_I2C_Master_Transmit>
}
 80009e4:	b005      	add	sp, #20
 80009e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80009ea:	bf00      	nop
 80009ec:	20003084 	.word	0x20003084

080009f0 <OLED_SetMemAddrMode>:
 *  输出参数：无
 *  返回值：无
 */
static void OLED_SetMemAddrMode(MEM_MODE mode)
{
    if ((mode != H_ADDR_MODE) && (mode != V_ADDR_MODE) && (mode != PAGE_ADDR_MODE))
 80009f0:	2802      	cmp	r0, #2
 80009f2:	d900      	bls.n	80009f6 <OLED_SetMemAddrMode+0x6>
 80009f4:	4770      	bx	lr
{
 80009f6:	b510      	push	{r4, lr}
 80009f8:	4604      	mov	r4, r0
        return;
    OLED_WriteCmd(0x20);
 80009fa:	2020      	movs	r0, #32
 80009fc:	f7ff ffe2 	bl	80009c4 <OLED_WriteCmd>
    OLED_WriteCmd(mode);
 8000a00:	4620      	mov	r0, r4
 8000a02:	f7ff ffdf 	bl	80009c4 <OLED_WriteCmd>
    mem_mode = mode;
 8000a06:	4b01      	ldr	r3, [pc, #4]	@ (8000a0c <OLED_SetMemAddrMode+0x1c>)
 8000a08:	701c      	strb	r4, [r3, #0]
}
 8000a0a:	bd10      	pop	{r4, pc}
 8000a0c:	20000000 	.word	0x20000000

08000a10 <OLED_SetMuxRatio>:
 *  输出参数：无
 *  返回值：无
 */
static void OLED_SetMuxRatio(uint8_t ratio)
{
    if ((ratio < 15) || (ratio > 63))
 8000a10:	f1a0 030f 	sub.w	r3, r0, #15
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b30      	cmp	r3, #48	@ 0x30
 8000a18:	d900      	bls.n	8000a1c <OLED_SetMuxRatio+0xc>
 8000a1a:	4770      	bx	lr
{
 8000a1c:	b510      	push	{r4, lr}
 8000a1e:	4604      	mov	r4, r0
        return;
    OLED_WriteCmd(0xA8);
 8000a20:	20a8      	movs	r0, #168	@ 0xa8
 8000a22:	f7ff ffcf 	bl	80009c4 <OLED_WriteCmd>
    OLED_WriteCmd(ratio);
 8000a26:	4620      	mov	r0, r4
 8000a28:	f7ff ffcc 	bl	80009c4 <OLED_WriteCmd>
}
 8000a2c:	bd10      	pop	{r4, pc}

08000a2e <OLED_SetDispOffset>:
 *  输出参数：无
 *  返回值：无
 */
static void OLED_SetDispOffset(uint8_t offset)
{
    if (offset > 63)
 8000a2e:	283f      	cmp	r0, #63	@ 0x3f
 8000a30:	d900      	bls.n	8000a34 <OLED_SetDispOffset+0x6>
 8000a32:	4770      	bx	lr
{
 8000a34:	b510      	push	{r4, lr}
 8000a36:	4604      	mov	r4, r0
        return;
    OLED_WriteCmd(0xD3);
 8000a38:	20d3      	movs	r0, #211	@ 0xd3
 8000a3a:	f7ff ffc3 	bl	80009c4 <OLED_WriteCmd>
    OLED_WriteCmd(offset);
 8000a3e:	4620      	mov	r0, r4
 8000a40:	f7ff ffc0 	bl	80009c4 <OLED_WriteCmd>
}
 8000a44:	bd10      	pop	{r4, pc}

08000a46 <OLED_SetDispStartLine>:
    if (line > 63)
 8000a46:	283f      	cmp	r0, #63	@ 0x3f
 8000a48:	d900      	bls.n	8000a4c <OLED_SetDispStartLine+0x6>
 8000a4a:	4770      	bx	lr
{
 8000a4c:	b508      	push	{r3, lr}
    OLED_WriteCmd(0x40 + line);
 8000a4e:	3040      	adds	r0, #64	@ 0x40
 8000a50:	b2c0      	uxtb	r0, r0
 8000a52:	f7ff ffb7 	bl	80009c4 <OLED_WriteCmd>
}
 8000a56:	bd08      	pop	{r3, pc}

08000a58 <OLED_SetContrastValue>:
{
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	4604      	mov	r4, r0
    OLED_WriteCmd(0x81);
 8000a5c:	2081      	movs	r0, #129	@ 0x81
 8000a5e:	f7ff ffb1 	bl	80009c4 <OLED_WriteCmd>
    OLED_WriteCmd(value);
 8000a62:	4620      	mov	r0, r4
 8000a64:	f7ff ffae 	bl	80009c4 <OLED_WriteCmd>
}
 8000a68:	bd10      	pop	{r4, pc}

08000a6a <OLED_SetDCLK_Freq>:
 *  输出参数：无
 *  返回值：无
 */
static void OLED_SetDCLK_Freq(uint8_t div, uint8_t freq)
{
    if ((div > 0x0F) || (freq > 0x0F))
 8000a6a:	280f      	cmp	r0, #15
 8000a6c:	d80f      	bhi.n	8000a8e <OLED_SetDCLK_Freq+0x24>
{
 8000a6e:	b538      	push	{r3, r4, r5, lr}
 8000a70:	4605      	mov	r5, r0
 8000a72:	460c      	mov	r4, r1
    if ((div > 0x0F) || (freq > 0x0F))
 8000a74:	290f      	cmp	r1, #15
 8000a76:	d900      	bls.n	8000a7a <OLED_SetDCLK_Freq+0x10>
        return;
    OLED_WriteCmd(0xD5);
    OLED_WriteCmd(div + (freq << 4));
}
 8000a78:	bd38      	pop	{r3, r4, r5, pc}
    OLED_WriteCmd(0xD5);
 8000a7a:	20d5      	movs	r0, #213	@ 0xd5
 8000a7c:	f7ff ffa2 	bl	80009c4 <OLED_WriteCmd>
    OLED_WriteCmd(div + (freq << 4));
 8000a80:	0121      	lsls	r1, r4, #4
 8000a82:	b2c9      	uxtb	r1, r1
 8000a84:	1948      	adds	r0, r1, r5
 8000a86:	b2c0      	uxtb	r0, r0
 8000a88:	f7ff ff9c 	bl	80009c4 <OLED_WriteCmd>
 8000a8c:	e7f4      	b.n	8000a78 <OLED_SetDCLK_Freq+0xe>
 8000a8e:	4770      	bx	lr

08000a90 <OLED_SetChargePump>:
 *  输出参数：无
 *  返回值：无
 */
static void OLED_SetChargePump(CHARGE_PUMP_STATE state)
{
    if ((state != PUMP_DISABLE) && (state != PUMP_ENABLE))
 8000a90:	2801      	cmp	r0, #1
 8000a92:	d900      	bls.n	8000a96 <OLED_SetChargePump+0x6>
 8000a94:	4770      	bx	lr
{
 8000a96:	b510      	push	{r4, lr}
 8000a98:	4604      	mov	r4, r0
        return;
    OLED_WriteCmd(0x8D);
 8000a9a:	208d      	movs	r0, #141	@ 0x8d
 8000a9c:	f7ff ff92 	bl	80009c4 <OLED_WriteCmd>
    OLED_WriteCmd((state << 2) + 0x10);
 8000aa0:	00a0      	lsls	r0, r4, #2
 8000aa2:	b2c0      	uxtb	r0, r0
 8000aa4:	3010      	adds	r0, #16
 8000aa6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8000aaa:	f7ff ff8b 	bl	80009c4 <OLED_WriteCmd>
}
 8000aae:	bd10      	pop	{r4, pc}

08000ab0 <OLED_SetComConfig>:
    if ((mode != COM_PIN_SEQ) && (mode != COM_PIN_ALT))
 8000ab0:	2801      	cmp	r0, #1
 8000ab2:	d814      	bhi.n	8000ade <OLED_SetComConfig+0x2e>
{
 8000ab4:	b538      	push	{r3, r4, r5, lr}
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	460d      	mov	r5, r1
    if ((state != COM_NOREMAP) && (state != COM_REMAP))
 8000aba:	2901      	cmp	r1, #1
 8000abc:	d900      	bls.n	8000ac0 <OLED_SetComConfig+0x10>
}
 8000abe:	bd38      	pop	{r3, r4, r5, pc}
    OLED_WriteCmd(0xDA);
 8000ac0:	20da      	movs	r0, #218	@ 0xda
 8000ac2:	f7ff ff7f 	bl	80009c4 <OLED_WriteCmd>
    OLED_WriteCmd(0x02 + (mode << 4) + (state << 5));
 8000ac6:	0120      	lsls	r0, r4, #4
 8000ac8:	b2c0      	uxtb	r0, r0
 8000aca:	0169      	lsls	r1, r5, #5
 8000acc:	b2c9      	uxtb	r1, r1
 8000ace:	4408      	add	r0, r1
 8000ad0:	b2c0      	uxtb	r0, r0
 8000ad2:	3002      	adds	r0, #2
 8000ad4:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 8000ad8:	f7ff ff74 	bl	80009c4 <OLED_WriteCmd>
 8000adc:	e7ef      	b.n	8000abe <OLED_SetComConfig+0xe>
 8000ade:	4770      	bx	lr

08000ae0 <OLED_SetPageAddr_PAGE>:
{
 8000ae0:	b508      	push	{r3, lr}
    if (mem_mode != PAGE_ADDR_MODE)
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <OLED_SetPageAddr_PAGE+0x1c>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d101      	bne.n	8000aee <OLED_SetPageAddr_PAGE+0xe>
    if (addr > 7)
 8000aea:	2807      	cmp	r0, #7
 8000aec:	d900      	bls.n	8000af0 <OLED_SetPageAddr_PAGE+0x10>
}
 8000aee:	bd08      	pop	{r3, pc}
    OLED_WriteCmd(0xB0 + addr);
 8000af0:	3850      	subs	r0, #80	@ 0x50
 8000af2:	b2c0      	uxtb	r0, r0
 8000af4:	f7ff ff66 	bl	80009c4 <OLED_WriteCmd>
 8000af8:	e7f9      	b.n	8000aee <OLED_SetPageAddr_PAGE+0xe>
 8000afa:	bf00      	nop
 8000afc:	20000000 	.word	0x20000000

08000b00 <OLED_SetColAddr_PAGE>:
    if (mem_mode != PAGE_ADDR_MODE)
 8000b00:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <OLED_SetColAddr_PAGE+0x28>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d10d      	bne.n	8000b24 <OLED_SetColAddr_PAGE+0x24>
{
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	4604      	mov	r4, r0
    if (addr > 0x7F)
 8000b0c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8000b10:	d107      	bne.n	8000b22 <OLED_SetColAddr_PAGE+0x22>
    OLED_WriteCmd(0x00 + (addr & 0x0F));
 8000b12:	f000 000f 	and.w	r0, r0, #15
 8000b16:	f7ff ff55 	bl	80009c4 <OLED_WriteCmd>
    OLED_WriteCmd(0x10 + (addr >> 4));
 8000b1a:	0920      	lsrs	r0, r4, #4
 8000b1c:	3010      	adds	r0, #16
 8000b1e:	f7ff ff51 	bl	80009c4 <OLED_WriteCmd>
}
 8000b22:	bd10      	pop	{r4, pc}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000000 	.word	0x20000000

08000b2c <MY_OLED_WriteNBytes>:
{
 8000b2c:	b500      	push	{lr}
 8000b2e:	b085      	sub	sp, #20
    return HAL_I2C_Mem_Write(g_pHI2COLED, OELD_I2C_ADDR, 0x40, 1, buf, length, OLED_TIMEOUT);
 8000b30:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b34:	9302      	str	r3, [sp, #8]
 8000b36:	9101      	str	r1, [sp, #4]
 8000b38:	9000      	str	r0, [sp, #0]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	2240      	movs	r2, #64	@ 0x40
 8000b3e:	2178      	movs	r1, #120	@ 0x78
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <MY_OLED_WriteNBytes+0x20>)
 8000b42:	f001 fa2f 	bl	8001fa4 <HAL_I2C_Mem_Write>
}
 8000b46:	b005      	add	sp, #20
 8000b48:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b4c:	20003084 	.word	0x20003084

08000b50 <OLED_Init>:
 *  输入参数：无
 *  输出参数：无
 *  返回值：无
 */
void OLED_Init(void)
{
 8000b50:	b508      	push	{r3, lr}
     * 本工程里已经:
     *    使用MX_I2C1_Init初始化I2C通道
     *    使用HAL_I2C_MspInit初始化I2C引脚
     */

    OLED_SetMemAddrMode(PAGE_ADDR_MODE);         // 0. 设置地址模式
 8000b52:	2002      	movs	r0, #2
 8000b54:	f7ff ff4c 	bl	80009f0 <OLED_SetMemAddrMode>
    OLED_SetMuxRatio(0x3F);                      // 1. 设置多路复用率
 8000b58:	203f      	movs	r0, #63	@ 0x3f
 8000b5a:	f7ff ff59 	bl	8000a10 <OLED_SetMuxRatio>
    OLED_SetDispOffset(0x00);                    // 2. 设置显示的偏移值
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff ff65 	bl	8000a2e <OLED_SetDispOffset>
    OLED_SetDispStartLine(0x00);                 // 3. 设置起始行
 8000b64:	2000      	movs	r0, #0
 8000b66:	f7ff ff6e 	bl	8000a46 <OLED_SetDispStartLine>
    OLED_SEG_REMAP();                            // 4. 行翻转
 8000b6a:	20a1      	movs	r0, #161	@ 0xa1
 8000b6c:	f7ff ff2a 	bl	80009c4 <OLED_WriteCmd>
    OLED_SCAN_REMAP();                           // 5. 正常扫描
 8000b70:	20c8      	movs	r0, #200	@ 0xc8
 8000b72:	f7ff ff27 	bl	80009c4 <OLED_WriteCmd>
    OLED_SetComConfig(COM_PIN_SEQ, COM_NOREMAP); // 6. COM 引脚设置
 8000b76:	2100      	movs	r1, #0
 8000b78:	4608      	mov	r0, r1
 8000b7a:	f7ff ff99 	bl	8000ab0 <OLED_SetComConfig>
    OLED_SetContrastValue(0x7F);                 // 7. 设置对比度
 8000b7e:	207f      	movs	r0, #127	@ 0x7f
 8000b80:	f7ff ff6a 	bl	8000a58 <OLED_SetContrastValue>
    ENTIRE_DISP_OFF();                           // 8. 全屏点亮/熄灭
 8000b84:	20a4      	movs	r0, #164	@ 0xa4
 8000b86:	f7ff ff1d 	bl	80009c4 <OLED_WriteCmd>
    DISP_NORMAL();                               // 9. 显示模式
 8000b8a:	20a6      	movs	r0, #166	@ 0xa6
 8000b8c:	f7ff ff1a 	bl	80009c4 <OLED_WriteCmd>
    OLED_SetDCLK_Freq(0x00, 0x08);               // 10. 设置分频系数和频率增值
 8000b90:	2108      	movs	r1, #8
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff ff69 	bl	8000a6a <OLED_SetDCLK_Freq>
    OLED_SetChargePump(PUMP_ENABLE);             // 11. 使能电荷碰撞
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f7ff ff79 	bl	8000a90 <OLED_SetChargePump>

    OLED_SetComConfig(COM_PIN_ALT, COM_NOREMAP);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f7ff ff85 	bl	8000ab0 <OLED_SetComConfig>

    DISP_ON();
 8000ba6:	20af      	movs	r0, #175	@ 0xaf
 8000ba8:	f7ff ff0c 	bl	80009c4 <OLED_WriteCmd>
}
 8000bac:	bd08      	pop	{r3, pc}

08000bae <OLED_SetPosition>:
 *            col-->页地址模式下的起始行地址
 *  输出参数：无
 *  返回值：无
 */
void OLED_SetPosition(uint8_t page, uint8_t col)
{
 8000bae:	b510      	push	{r4, lr}
 8000bb0:	460c      	mov	r4, r1
    OLED_SetPageAddr_PAGE(page);
 8000bb2:	f7ff ff95 	bl	8000ae0 <OLED_SetPageAddr_PAGE>
    OLED_SetColAddr_PAGE(col);
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	f7ff ffa2 	bl	8000b00 <OLED_SetColAddr_PAGE>
}
 8000bbc:	bd10      	pop	{r4, pc}

08000bbe <OLED_Clear>:
 *  输入参数：无
 *  输出参数：无
 *  返回值：无
 */
void OLED_Clear(void)
{
 8000bbe:	b510      	push	{r4, lr}
 8000bc0:	b0a0      	sub	sp, #128	@ 0x80
    uint8_t i = 0;
    uint8_t buf[128] = {0};
 8000bc2:	2280      	movs	r2, #128	@ 0x80
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4668      	mov	r0, sp
 8000bc8:	f002 fecf 	bl	800396a <memset>

    for (i = 0; i < 8; i++)
 8000bcc:	2400      	movs	r4, #0
 8000bce:	e009      	b.n	8000be4 <OLED_Clear+0x26>
    {
        OLED_SetPosition(i, 0);
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	f7ff ffeb 	bl	8000bae <OLED_SetPosition>
        OLED_WriteNBytes(&buf[0], 128);
 8000bd8:	2180      	movs	r1, #128	@ 0x80
 8000bda:	4668      	mov	r0, sp
 8000bdc:	f7ff fee0 	bl	80009a0 <OLED_WriteNBytes>
    for (i = 0; i < 8; i++)
 8000be0:	3401      	adds	r4, #1
 8000be2:	b2e4      	uxtb	r4, r4
 8000be4:	2c07      	cmp	r4, #7
 8000be6:	d9f3      	bls.n	8000bd0 <OLED_Clear+0x12>
    }
}
 8000be8:	b020      	add	sp, #128	@ 0x80
 8000bea:	bd10      	pop	{r4, pc}

08000bec <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bec:	4b03      	ldr	r3, [pc, #12]	@ (8000bfc <vApplicationGetIdleTaskMemory+0x10>)
 8000bee:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bf0:	4b03      	ldr	r3, [pc, #12]	@ (8000c00 <vApplicationGetIdleTaskMemory+0x14>)
 8000bf2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	200003c8 	.word	0x200003c8
 8000c00:	200001c8 	.word	0x200001c8

08000c04 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000c04:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000c06:	f012 0f07 	tst.w	r2, #7
 8000c0a:	d01e      	beq.n	8000c4a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000c0c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000c0e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000c12:	f5c1 5330 	rsb	r3, r1, #11264	@ 0x2c00
 8000c16:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000c18:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000c1a:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <prvHeapInit+0x50>)
 8000c1c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000c1e:	2100      	movs	r1, #0
 8000c20:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000c22:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8000c24:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000c26:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8000c2a:	480b      	ldr	r0, [pc, #44]	@ (8000c58 <prvHeapInit+0x54>)
 8000c2c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8000c2e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000c30:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000c32:	1a99      	subs	r1, r3, r2
 8000c34:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000c36:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <prvHeapInit+0x58>)
 8000c3a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <prvHeapInit+0x5c>)
 8000c3e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <prvHeapInit+0x60>)
 8000c42:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000c46:	601a      	str	r2, [r3, #0]
}
 8000c48:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000c4a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8000c4e:	e7e4      	b.n	8000c1a <prvHeapInit+0x16>
 8000c50:	2000043c 	.word	0x2000043c
 8000c54:	20000434 	.word	0x20000434
 8000c58:	20000430 	.word	0x20000430
 8000c5c:	20000428 	.word	0x20000428
 8000c60:	2000042c 	.word	0x2000042c
 8000c64:	2000041c 	.word	0x2000041c

08000c68 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000c68:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <prvInsertBlockIntoFreeList+0x58>)
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4283      	cmp	r3, r0
 8000c70:	d3fb      	bcc.n	8000c6a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000c72:	6851      	ldr	r1, [r2, #4]
 8000c74:	eb02 0c01 	add.w	ip, r2, r1
 8000c78:	4584      	cmp	ip, r0
 8000c7a:	d009      	beq.n	8000c90 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000c7c:	6841      	ldr	r1, [r0, #4]
 8000c7e:	eb00 0c01 	add.w	ip, r0, r1
 8000c82:	4563      	cmp	r3, ip
 8000c84:	d009      	beq.n	8000c9a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000c86:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000c88:	4290      	cmp	r0, r2
 8000c8a:	d018      	beq.n	8000cbe <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000c8c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8000c8e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000c90:	6840      	ldr	r0, [r0, #4]
 8000c92:	4401      	add	r1, r0
 8000c94:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8000c96:	4610      	mov	r0, r2
 8000c98:	e7f0      	b.n	8000c7c <prvInsertBlockIntoFreeList+0x14>
{
 8000c9a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000c9c:	4c09      	ldr	r4, [pc, #36]	@ (8000cc4 <prvInsertBlockIntoFreeList+0x5c>)
 8000c9e:	6824      	ldr	r4, [r4, #0]
 8000ca0:	42a3      	cmp	r3, r4
 8000ca2:	d00a      	beq.n	8000cba <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	4419      	add	r1, r3
 8000ca8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000caa:	6813      	ldr	r3, [r2, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	d000      	beq.n	8000cb6 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000cb4:	6010      	str	r0, [r2, #0]
	}
}
 8000cb6:	bc10      	pop	{r4}
 8000cb8:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000cba:	6004      	str	r4, [r0, #0]
 8000cbc:	e7f8      	b.n	8000cb0 <prvInsertBlockIntoFreeList+0x48>
 8000cbe:	4770      	bx	lr
 8000cc0:	20000434 	.word	0x20000434
 8000cc4:	20000430 	.word	0x20000430

08000cc8 <pvPortMalloc>:
{
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8000ccc:	f002 fa5a 	bl	8003184 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8000cd0:	4b38      	ldr	r3, [pc, #224]	@ (8000db4 <pvPortMalloc+0xec>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	b1b3      	cbz	r3, 8000d04 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000cd6:	4b38      	ldr	r3, [pc, #224]	@ (8000db8 <pvPortMalloc+0xf0>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	421c      	tst	r4, r3
 8000cdc:	d150      	bne.n	8000d80 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8000cde:	2c00      	cmp	r4, #0
 8000ce0:	d050      	beq.n	8000d84 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8000ce2:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ce6:	f014 0f07 	tst.w	r4, #7
 8000cea:	d002      	beq.n	8000cf2 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000cec:	f022 0207 	bic.w	r2, r2, #7
 8000cf0:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	d055      	beq.n	8000da2 <pvPortMalloc+0xda>
 8000cf6:	4b31      	ldr	r3, [pc, #196]	@ (8000dbc <pvPortMalloc+0xf4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d353      	bcc.n	8000da6 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8000cfe:	4930      	ldr	r1, [pc, #192]	@ (8000dc0 <pvPortMalloc+0xf8>)
 8000d00:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d02:	e004      	b.n	8000d0e <pvPortMalloc+0x46>
			prvHeapInit();
 8000d04:	f7ff ff7e 	bl	8000c04 <prvHeapInit>
 8000d08:	e7e5      	b.n	8000cd6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8000d0a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8000d0c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d0e:	6863      	ldr	r3, [r4, #4]
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d202      	bcs.n	8000d1a <pvPortMalloc+0x52>
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f7      	bne.n	8000d0a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8000d1a:	4b26      	ldr	r3, [pc, #152]	@ (8000db4 <pvPortMalloc+0xec>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	42a3      	cmp	r3, r4
 8000d20:	d043      	beq.n	8000daa <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000d22:	680d      	ldr	r5, [r1, #0]
 8000d24:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000d2a:	6863      	ldr	r3, [r4, #4]
 8000d2c:	1a9b      	subs	r3, r3, r2
 8000d2e:	2b10      	cmp	r3, #16
 8000d30:	d910      	bls.n	8000d54 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000d32:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d34:	f010 0f07 	tst.w	r0, #7
 8000d38:	d008      	beq.n	8000d4c <pvPortMalloc+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d3e:	f383 8811 	msr	BASEPRI, r3
 8000d42:	f3bf 8f6f 	isb	sy
 8000d46:	f3bf 8f4f 	dsb	sy
 8000d4a:	e7fe      	b.n	8000d4a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000d4c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000d4e:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000d50:	f7ff ff8a 	bl	8000c68 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000d54:	6862      	ldr	r2, [r4, #4]
 8000d56:	4919      	ldr	r1, [pc, #100]	@ (8000dbc <pvPortMalloc+0xf4>)
 8000d58:	680b      	ldr	r3, [r1, #0]
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000d5e:	4919      	ldr	r1, [pc, #100]	@ (8000dc4 <pvPortMalloc+0xfc>)
 8000d60:	6809      	ldr	r1, [r1, #0]
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d201      	bcs.n	8000d6a <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000d66:	4917      	ldr	r1, [pc, #92]	@ (8000dc4 <pvPortMalloc+0xfc>)
 8000d68:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <pvPortMalloc+0xf0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8000d76:	4a14      	ldr	r2, [pc, #80]	@ (8000dc8 <pvPortMalloc+0x100>)
 8000d78:	6813      	ldr	r3, [r2, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e002      	b.n	8000d86 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8000d80:	2500      	movs	r5, #0
 8000d82:	e000      	b.n	8000d86 <pvPortMalloc+0xbe>
 8000d84:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8000d86:	f002 fa91 	bl	80032ac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d8a:	f015 0f07 	tst.w	r5, #7
 8000d8e:	d00e      	beq.n	8000dae <pvPortMalloc+0xe6>
 8000d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d94:	f383 8811 	msr	BASEPRI, r3
 8000d98:	f3bf 8f6f 	isb	sy
 8000d9c:	f3bf 8f4f 	dsb	sy
 8000da0:	e7fe      	b.n	8000da0 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8000da2:	2500      	movs	r5, #0
 8000da4:	e7ef      	b.n	8000d86 <pvPortMalloc+0xbe>
 8000da6:	2500      	movs	r5, #0
 8000da8:	e7ed      	b.n	8000d86 <pvPortMalloc+0xbe>
 8000daa:	2500      	movs	r5, #0
 8000dac:	e7eb      	b.n	8000d86 <pvPortMalloc+0xbe>
}
 8000dae:	4628      	mov	r0, r5
 8000db0:	bd38      	pop	{r3, r4, r5, pc}
 8000db2:	bf00      	nop
 8000db4:	20000430 	.word	0x20000430
 8000db8:	2000041c 	.word	0x2000041c
 8000dbc:	2000042c 	.word	0x2000042c
 8000dc0:	20000434 	.word	0x20000434
 8000dc4:	20000428 	.word	0x20000428
 8000dc8:	20000424 	.word	0x20000424

08000dcc <vPortFree>:
	if( pv != NULL )
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	d034      	beq.n	8000e3a <vPortFree+0x6e>
{
 8000dd0:	b538      	push	{r3, r4, r5, lr}
 8000dd2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8000dd4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000dd8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8000ddc:	4a17      	ldr	r2, [pc, #92]	@ (8000e3c <vPortFree+0x70>)
 8000dde:	6812      	ldr	r2, [r2, #0]
 8000de0:	4213      	tst	r3, r2
 8000de2:	d108      	bne.n	8000df6 <vPortFree+0x2a>
 8000de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000de8:	f383 8811 	msr	BASEPRI, r3
 8000dec:	f3bf 8f6f 	isb	sy
 8000df0:	f3bf 8f4f 	dsb	sy
 8000df4:	e7fe      	b.n	8000df4 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000df6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8000dfa:	b141      	cbz	r1, 8000e0e <vPortFree+0x42>
 8000dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e00:	f383 8811 	msr	BASEPRI, r3
 8000e04:	f3bf 8f6f 	isb	sy
 8000e08:	f3bf 8f4f 	dsb	sy
 8000e0c:	e7fe      	b.n	8000e0c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000e0e:	ea23 0302 	bic.w	r3, r3, r2
 8000e12:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8000e16:	f002 f9b5 	bl	8003184 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000e1a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8000e1e:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <vPortFree+0x74>)
 8000e20:	6813      	ldr	r3, [r2, #0]
 8000e22:	440b      	add	r3, r1
 8000e24:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000e26:	4628      	mov	r0, r5
 8000e28:	f7ff ff1e 	bl	8000c68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000e2c:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <vPortFree+0x78>)
 8000e2e:	6813      	ldr	r3, [r2, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8000e34:	f002 fa3a 	bl	80032ac <xTaskResumeAll>
}
 8000e38:	bd38      	pop	{r3, r4, r5, pc}
 8000e3a:	4770      	bx	lr
 8000e3c:	2000041c 	.word	0x2000041c
 8000e40:	2000042c 	.word	0x2000042c
 8000e44:	20000420 	.word	0x20000420

08000e48 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e48:	f100 0308 	add.w	r3, r0, #8
 8000e4c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000e4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e52:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e54:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e56:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000e5c:	4770      	bx	lr

08000e5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000e62:	4770      	bx	lr

08000e64 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000e64:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000e66:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000e6c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000e6e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000e70:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000e72:	6803      	ldr	r3, [r0, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	6003      	str	r3, [r0, #0]
}
 8000e78:	4770      	bx	lr

08000e7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000e7a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000e7c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000e7e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8000e82:	d011      	beq.n	8000ea8 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000e84:	f100 0308 	add.w	r3, r0, #8
 8000e88:	461c      	mov	r4, r3
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	42aa      	cmp	r2, r5
 8000e90:	d9fa      	bls.n	8000e88 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000e92:	6863      	ldr	r3, [r4, #4]
 8000e94:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000e96:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000e98:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000e9a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000e9c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000e9e:	6803      	ldr	r3, [r0, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	6003      	str	r3, [r0, #0]
}
 8000ea4:	bc30      	pop	{r4, r5}
 8000ea6:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8000ea8:	6904      	ldr	r4, [r0, #16]
 8000eaa:	e7f2      	b.n	8000e92 <vListInsert+0x18>

08000eac <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000eac:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000eae:	6841      	ldr	r1, [r0, #4]
 8000eb0:	6882      	ldr	r2, [r0, #8]
 8000eb2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000eb4:	6841      	ldr	r1, [r0, #4]
 8000eb6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	4282      	cmp	r2, r0
 8000ebc:	d006      	beq.n	8000ecc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	3a01      	subs	r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000ec8:	6818      	ldr	r0, [r3, #0]
}
 8000eca:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000ecc:	6882      	ldr	r2, [r0, #8]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	e7f5      	b.n	8000ebe <uxListRemove+0x12>
	...

08000ed4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ed4:	b084      	sub	sp, #16
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <MX_GPIO_Init+0x40>)
 8000ed8:	699a      	ldr	r2, [r3, #24]
 8000eda:	f042 0220 	orr.w	r2, r2, #32
 8000ede:	619a      	str	r2, [r3, #24]
 8000ee0:	699a      	ldr	r2, [r3, #24]
 8000ee2:	f002 0220 	and.w	r2, r2, #32
 8000ee6:	9201      	str	r2, [sp, #4]
 8000ee8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	699a      	ldr	r2, [r3, #24]
 8000eec:	f042 0204 	orr.w	r2, r2, #4
 8000ef0:	619a      	str	r2, [r3, #24]
 8000ef2:	699a      	ldr	r2, [r3, #24]
 8000ef4:	f002 0204 	and.w	r2, r2, #4
 8000ef8:	9202      	str	r2, [sp, #8]
 8000efa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efc:	699a      	ldr	r2, [r3, #24]
 8000efe:	f042 0208 	orr.w	r2, r2, #8
 8000f02:	619a      	str	r2, [r3, #24]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	9303      	str	r3, [sp, #12]
 8000f0c:	9b03      	ldr	r3, [sp, #12]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f0e:	b004      	add	sp, #16
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000

08000f18 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f18:	b508      	push	{r3, lr}
    // OLED_Clear();
    // write_to_vram_test();
    // send_vram_data_to_oled_test();
    // write_to_vram_test();
    // MY_OLED_WriteNBytes(test01_data, 16);
    show_UI();
 8000f1a:	f002 fb37 	bl	800358c <show_UI>
  for (;;)
 8000f1e:	e7fc      	b.n	8000f1a <StartDefaultTask+0x2>

08000f20 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000f22:	6802      	ldr	r2, [r0, #0]
 8000f24:	4b03      	ldr	r3, [pc, #12]	@ (8000f34 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d000      	beq.n	8000f2c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f2a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000f2c:	f000 fb1c 	bl	8001568 <HAL_IncTick>
}
 8000f30:	e7fb      	b.n	8000f2a <HAL_TIM_PeriodElapsedCallback+0xa>
 8000f32:	bf00      	nop
 8000f34:	40012c00 	.word	0x40012c00

08000f38 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <Error_Handler+0x2>

08000f3c <MX_I2C1_Init>:
{
 8000f3c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000f3e:	480a      	ldr	r0, [pc, #40]	@ (8000f68 <MX_I2C1_Init+0x2c>)
 8000f40:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <MX_I2C1_Init+0x30>)
 8000f42:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <MX_I2C1_Init+0x34>)
 8000f46:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f4c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f52:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f54:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f56:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f58:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f5a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f5c:	f000 fe88 	bl	8001c70 <HAL_I2C_Init>
 8000f60:	b900      	cbnz	r0, 8000f64 <MX_I2C1_Init+0x28>
}
 8000f62:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f64:	f7ff ffe8 	bl	8000f38 <Error_Handler>
 8000f68:	20003084 	.word	0x20003084
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	00061a80 	.word	0x00061a80

08000f74 <MX_USART1_UART_Init>:
{
 8000f74:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000f76:	480a      	ldr	r0, [pc, #40]	@ (8000fa0 <MX_USART1_UART_Init+0x2c>)
 8000f78:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <MX_USART1_UART_Init+0x30>)
 8000f7a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000f7c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000f80:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	2300      	movs	r3, #0
 8000f84:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f86:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f88:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f90:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f92:	f001 fe81 	bl	8002c98 <HAL_UART_Init>
 8000f96:	b900      	cbnz	r0, 8000f9a <MX_USART1_UART_Init+0x26>
}
 8000f98:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f9a:	f7ff ffcd 	bl	8000f38 <Error_Handler>
 8000f9e:	bf00      	nop
 8000fa0:	2000303c 	.word	0x2000303c
 8000fa4:	40013800 	.word	0x40013800

08000fa8 <SystemClock_Config>:
{
 8000fa8:	b500      	push	{lr}
 8000faa:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fac:	2228      	movs	r2, #40	@ 0x28
 8000fae:	2100      	movs	r1, #0
 8000fb0:	a806      	add	r0, sp, #24
 8000fb2:	f002 fcda 	bl	800396a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	9303      	str	r3, [sp, #12]
 8000fbe:	9304      	str	r3, [sp, #16]
 8000fc0:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fca:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fcc:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fce:	2202      	movs	r2, #2
 8000fd0:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd2:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fd4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000fd8:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fda:	a806      	add	r0, sp, #24
 8000fdc:	f001 f942 	bl	8002264 <HAL_RCC_OscConfig>
 8000fe0:	b980      	cbnz	r0, 8001004 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ff2:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff4:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff6:	a801      	add	r0, sp, #4
 8000ff8:	f001 fb66 	bl	80026c8 <HAL_RCC_ClockConfig>
 8000ffc:	b920      	cbnz	r0, 8001008 <SystemClock_Config+0x60>
}
 8000ffe:	b011      	add	sp, #68	@ 0x44
 8001000:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001004:	f7ff ff98 	bl	8000f38 <Error_Handler>
    Error_Handler();
 8001008:	f7ff ff96 	bl	8000f38 <Error_Handler>

0800100c <main>:
{
 800100c:	b500      	push	{lr}
 800100e:	b083      	sub	sp, #12
  HAL_Init();
 8001010:	f000 fa98 	bl	8001544 <HAL_Init>
  SystemClock_Config();
 8001014:	f7ff ffc8 	bl	8000fa8 <SystemClock_Config>
  MX_GPIO_Init();
 8001018:	f7ff ff5c 	bl	8000ed4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800101c:	f7ff ff8e 	bl	8000f3c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001020:	f7ff ffa8 	bl	8000f74 <MX_USART1_UART_Init>
  OLED_Init();
 8001024:	f7ff fd94 	bl	8000b50 <OLED_Init>
  OLED_Clear();
 8001028:	f7ff fdc9 	bl	8000bbe <OLED_Clear>
  xTaskCreate(StartDefaultTask, NULL, 128*10, NULL, osPriorityNormal, NULL);
 800102c:	2100      	movs	r1, #0
 800102e:	9101      	str	r1, [sp, #4]
 8001030:	9100      	str	r1, [sp, #0]
 8001032:	460b      	mov	r3, r1
 8001034:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <main+0x38>)
 800103a:	f002 f836 	bl	80030aa <xTaskCreate>
  osKernelStart();
 800103e:	f7ff fbbf 	bl	80007c0 <osKernelStart>
  while (1)
 8001042:	e7fe      	b.n	8001042 <main+0x36>
 8001044:	08000f19 	.word	0x08000f19

08001048 <get_char_vram_length>:

extern uint8_t ascii_font[128][16];

// 获取字符的显存宽度
uint8_t get_char_vram_length(const char *string)
{
 8001048:	b510      	push	{r4, lr}
 800104a:	4604      	mov	r4, r0
    uint8_t string_length = strlen(string);
 800104c:	f7ff f860 	bl	8000110 <strlen>
 8001050:	b2c1      	uxtb	r1, r0
    uint8_t char_vram_length = 0;

    for (uint8_t i = 0; i < string_length; i++)
 8001052:	2300      	movs	r3, #0
    uint8_t char_vram_length = 0;
 8001054:	4618      	mov	r0, r3
    for (uint8_t i = 0; i < string_length; i++)
 8001056:	e004      	b.n	8001062 <get_char_vram_length+0x1a>
    {

        // ascll 字符码小于128
        if (*string < 128)
        {
            char_vram_length += 1;
 8001058:	3001      	adds	r0, #1
 800105a:	b2c0      	uxtb	r0, r0
        {
            char_vram_length += 2;
            i++;
            string++;
        }
        string++;
 800105c:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < string_length; i++)
 800105e:	3301      	adds	r3, #1
 8001060:	b2db      	uxtb	r3, r3
 8001062:	428b      	cmp	r3, r1
 8001064:	d209      	bcs.n	800107a <get_char_vram_length+0x32>
        if (*string < 128)
 8001066:	f994 2000 	ldrsb.w	r2, [r4]
 800106a:	2a00      	cmp	r2, #0
 800106c:	daf4      	bge.n	8001058 <get_char_vram_length+0x10>
            char_vram_length += 2;
 800106e:	3002      	adds	r0, #2
 8001070:	b2c0      	uxtb	r0, r0
            i++;
 8001072:	3301      	adds	r3, #1
 8001074:	b2db      	uxtb	r3, r3
            string++;
 8001076:	3401      	adds	r4, #1
 8001078:	e7f0      	b.n	800105c <get_char_vram_length+0x14>
    }
    return char_vram_length;
}
 800107a:	bd10      	pop	{r4, pc}

0800107c <set_oled_font_vram>:

// 使用 宽 8 长 16
void set_oled_font_vram(const char *string, uint8_t *vram, uint8_t vram_length)
{
 800107c:	b570      	push	{r4, r5, r6, lr}
 800107e:	460c      	mov	r4, r1
 8001080:	4615      	mov	r5, r2

    uint16_t vram_index = 0;
 8001082:	2100      	movs	r1, #0
    while (vram_length)
 8001084:	e01e      	b.n	80010c4 <set_oled_font_vram+0x48>
    {
        if (*string < 128)
        {
            for (uint8_t i = 0; i < 8; i++)
            {
                vram[vram_index + 2 * i] = ascii_font[(uint8_t)*string][i];
 8001086:	f890 e000 	ldrb.w	lr, [r0]
 800108a:	eb01 0c43 	add.w	ip, r1, r3, lsl #1
 800108e:	4a12      	ldr	r2, [pc, #72]	@ (80010d8 <set_oled_font_vram+0x5c>)
 8001090:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 8001094:	f81e 6003 	ldrb.w	r6, [lr, r3]
 8001098:	f804 600c 	strb.w	r6, [r4, ip]
                vram[vram_index + 2 * i + 1] = ascii_font[(uint8_t)*string][i + 8];
 800109c:	7806      	ldrb	r6, [r0, #0]
 800109e:	f103 0e08 	add.w	lr, r3, #8
 80010a2:	f10c 0c01 	add.w	ip, ip, #1
 80010a6:	eb02 1206 	add.w	r2, r2, r6, lsl #4
 80010aa:	f812 e00e 	ldrb.w	lr, [r2, lr]
 80010ae:	f804 e00c 	strb.w	lr, [r4, ip]
            for (uint8_t i = 0; i < 8; i++)
 80010b2:	3301      	adds	r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b07      	cmp	r3, #7
 80010b8:	d9e5      	bls.n	8001086 <set_oled_font_vram+0xa>
        else
        {
            // 复制非ascll
            string++;
        }
        string++;
 80010ba:	3001      	adds	r0, #1
        vram_index += 16;
 80010bc:	3110      	adds	r1, #16
 80010be:	b289      	uxth	r1, r1
        vram_length--;
 80010c0:	3d01      	subs	r5, #1
 80010c2:	b2ed      	uxtb	r5, r5
    while (vram_length)
 80010c4:	b13d      	cbz	r5, 80010d6 <set_oled_font_vram+0x5a>
        if (*string < 128)
 80010c6:	f990 3000 	ldrsb.w	r3, [r0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	da01      	bge.n	80010d2 <set_oled_font_vram+0x56>
            string++;
 80010ce:	3001      	adds	r0, #1
 80010d0:	e7f3      	b.n	80010ba <set_oled_font_vram+0x3e>
            for (uint8_t i = 0; i < 8; i++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	e7ef      	b.n	80010b6 <set_oled_font_vram+0x3a>
    }
}
 80010d6:	bd70      	pop	{r4, r5, r6, pc}
 80010d8:	0800447c 	.word	0x0800447c

080010dc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80010dc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80010de:	2300      	movs	r3, #0
 80010e0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80010e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <prvTaskExitError+0x3c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010ea:	d008      	beq.n	80010fe <prvTaskExitError+0x22>
 80010ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010f0:	f383 8811 	msr	BASEPRI, r3
 80010f4:	f3bf 8f6f 	isb	sy
 80010f8:	f3bf 8f4f 	dsb	sy
 80010fc:	e7fe      	b.n	80010fc <prvTaskExitError+0x20>
 80010fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001102:	f383 8811 	msr	BASEPRI, r3
 8001106:	f3bf 8f6f 	isb	sy
 800110a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800110e:	9b01      	ldr	r3, [sp, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0fc      	beq.n	800110e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001114:	b002      	add	sp, #8
 8001116:	4770      	bx	lr
 8001118:	20000004 	.word	0x20000004

0800111c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800111c:	4806      	ldr	r0, [pc, #24]	@ (8001138 <prvPortStartFirstTask+0x1c>)
 800111e:	6800      	ldr	r0, [r0, #0]
 8001120:	6800      	ldr	r0, [r0, #0]
 8001122:	f380 8808 	msr	MSP, r0
 8001126:	b662      	cpsie	i
 8001128:	b661      	cpsie	f
 800112a:	f3bf 8f4f 	dsb	sy
 800112e:	f3bf 8f6f 	isb	sy
 8001132:	df00      	svc	0
 8001134:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001136:	0000      	.short	0x0000
 8001138:	e000ed08 	.word	0xe000ed08

0800113c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800113c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001140:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001144:	f021 0101 	bic.w	r1, r1, #1
 8001148:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800114c:	4b03      	ldr	r3, [pc, #12]	@ (800115c <pxPortInitialiseStack+0x20>)
 800114e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001152:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8001156:	3840      	subs	r0, #64	@ 0x40
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	080010dd 	.word	0x080010dd

08001160 <SVC_Handler>:
	__asm volatile (
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <pxCurrentTCBConst2>)
 8001162:	6819      	ldr	r1, [r3, #0]
 8001164:	6808      	ldr	r0, [r1, #0]
 8001166:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800116a:	f380 8809 	msr	PSP, r0
 800116e:	f3bf 8f6f 	isb	sy
 8001172:	f04f 0000 	mov.w	r0, #0
 8001176:	f380 8811 	msr	BASEPRI, r0
 800117a:	f04e 0e0d 	orr.w	lr, lr, #13
 800117e:	4770      	bx	lr

08001180 <pxCurrentTCBConst2>:
 8001180:	2000326c 	.word	0x2000326c

08001184 <vPortEnterCritical>:
 8001184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001188:	f383 8811 	msr	BASEPRI, r3
 800118c:	f3bf 8f6f 	isb	sy
 8001190:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001194:	4a0b      	ldr	r2, [pc, #44]	@ (80011c4 <vPortEnterCritical+0x40>)
 8001196:	6813      	ldr	r3, [r2, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800119c:	2b01      	cmp	r3, #1
 800119e:	d000      	beq.n	80011a2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80011a0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80011a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80011a6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80011aa:	f013 0fff 	tst.w	r3, #255	@ 0xff
 80011ae:	d0f7      	beq.n	80011a0 <vPortEnterCritical+0x1c>
 80011b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011b4:	f383 8811 	msr	BASEPRI, r3
 80011b8:	f3bf 8f6f 	isb	sy
 80011bc:	f3bf 8f4f 	dsb	sy
 80011c0:	e7fe      	b.n	80011c0 <vPortEnterCritical+0x3c>
 80011c2:	bf00      	nop
 80011c4:	20000004 	.word	0x20000004

080011c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80011c8:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <vPortExitCritical+0x28>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	b943      	cbnz	r3, 80011e0 <vPortExitCritical+0x18>
 80011ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011d2:	f383 8811 	msr	BASEPRI, r3
 80011d6:	f3bf 8f6f 	isb	sy
 80011da:	f3bf 8f4f 	dsb	sy
 80011de:	e7fe      	b.n	80011de <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80011e0:	3b01      	subs	r3, #1
 80011e2:	4a03      	ldr	r2, [pc, #12]	@ (80011f0 <vPortExitCritical+0x28>)
 80011e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80011e6:	b90b      	cbnz	r3, 80011ec <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80011e8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000004 	.word	0x20000004
	...

08001200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001200:	f3ef 8009 	mrs	r0, PSP
 8001204:	f3bf 8f6f 	isb	sy
 8001208:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <pxCurrentTCBConst>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001210:	6010      	str	r0, [r2, #0]
 8001212:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001216:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800121a:	f380 8811 	msr	BASEPRI, r0
 800121e:	f002 f8e7 	bl	80033f0 <vTaskSwitchContext>
 8001222:	f04f 0000 	mov.w	r0, #0
 8001226:	f380 8811 	msr	BASEPRI, r0
 800122a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800122e:	6819      	ldr	r1, [r3, #0]
 8001230:	6808      	ldr	r0, [r1, #0]
 8001232:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001236:	f380 8809 	msr	PSP, r0
 800123a:	f3bf 8f6f 	isb	sy
 800123e:	4770      	bx	lr

08001240 <pxCurrentTCBConst>:
 8001240:	2000326c 	.word	0x2000326c

08001244 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001244:	b508      	push	{r3, lr}
	__asm volatile
 8001246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800124a:	f383 8811 	msr	BASEPRI, r3
 800124e:	f3bf 8f6f 	isb	sy
 8001252:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001256:	f001 ff9d 	bl	8003194 <xTaskIncrementTick>
 800125a:	b128      	cbz	r0, 8001268 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800125c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001264:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8001268:	2300      	movs	r3, #0
 800126a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800126e:	bd08      	pop	{r3, pc}

08001270 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001270:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8001274:	2300      	movs	r3, #0
 8001276:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001278:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800127a:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <vPortSetupTimerInterrupt+0x20>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4905      	ldr	r1, [pc, #20]	@ (8001294 <vPortSetupTimerInterrupt+0x24>)
 8001280:	fba1 1303 	umull	r1, r3, r1, r3
 8001284:	099b      	lsrs	r3, r3, #6
 8001286:	3b01      	subs	r3, #1
 8001288:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800128a:	2307      	movs	r3, #7
 800128c:	6113      	str	r3, [r2, #16]
}
 800128e:	4770      	bx	lr
 8001290:	20000010 	.word	0x20000010
 8001294:	10624dd3 	.word	0x10624dd3

08001298 <xPortStartScheduler>:
{
 8001298:	b510      	push	{r4, lr}
 800129a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800129c:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <xPortStartScheduler+0xb0>)
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80012a4:	22ff      	movs	r2, #255	@ 0xff
 80012a6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80012b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80012b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80012b8:	4a24      	ldr	r2, [pc, #144]	@ (800134c <xPortStartScheduler+0xb4>)
 80012ba:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80012bc:	4b24      	ldr	r3, [pc, #144]	@ (8001350 <xPortStartScheduler+0xb8>)
 80012be:	2207      	movs	r2, #7
 80012c0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80012c2:	e009      	b.n	80012d8 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80012c4:	4a22      	ldr	r2, [pc, #136]	@ (8001350 <xPortStartScheduler+0xb8>)
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80012cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80012d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80012dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80012e0:	d1f0      	bne.n	80012c4 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80012e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <xPortStartScheduler+0xb8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d008      	beq.n	80012fc <xPortStartScheduler+0x64>
	__asm volatile
 80012ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012ee:	f383 8811 	msr	BASEPRI, r3
 80012f2:	f3bf 8f6f 	isb	sy
 80012f6:	f3bf 8f4f 	dsb	sy
 80012fa:	e7fe      	b.n	80012fa <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <xPortStartScheduler+0xb8>)
 8001300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001302:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001306:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001308:	9b01      	ldr	r3, [sp, #4]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4a0e      	ldr	r2, [pc, #56]	@ (8001348 <xPortStartScheduler+0xb0>)
 800130e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001310:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001314:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8001318:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800131c:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001320:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8001324:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 8001328:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800132c:	f7ff ffa0 	bl	8001270 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001330:	2400      	movs	r4, #0
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <xPortStartScheduler+0xbc>)
 8001334:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8001336:	f7ff fef1 	bl	800111c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800133a:	f002 f859 	bl	80033f0 <vTaskSwitchContext>
	prvTaskExitError();
 800133e:	f7ff fecd 	bl	80010dc <prvTaskExitError>
}
 8001342:	4620      	mov	r0, r4
 8001344:	b002      	add	sp, #8
 8001346:	bd10      	pop	{r4, pc}
 8001348:	e000e400 	.word	0xe000e400
 800134c:	200030dc 	.word	0x200030dc
 8001350:	200030d8 	.word	0x200030d8
 8001354:	20000004 	.word	0x20000004

08001358 <selector_init_animation>:

// 初始化动画
void selector_init_animation(PageNodeTypedef *currentNodePage)
{
    static uint8_t temp = 0;
    temp++;
 8001358:	4a0e      	ldr	r2, [pc, #56]	@ (8001394 <selector_init_animation+0x3c>)
 800135a:	7813      	ldrb	r3, [r2, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	b2db      	uxtb	r3, r3
 8001360:	7013      	strb	r3, [r2, #0]
    if (temp > 10)
 8001362:	2b0a      	cmp	r3, #10
 8001364:	d807      	bhi.n	8001376 <selector_init_animation+0x1e>
        selector.selectorVram->x = selector.selectorPositionBanimotion->setLocation_X;
        selector.selectorVram->y = selector.selectorPositionBanimotion->setLocation_y;
    }
    else
    {
        selector.selectorVram->x = VRAM_WIDTH;
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <selector_init_animation+0x40>)
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	2180      	movs	r1, #128	@ 0x80
 800136c:	8011      	strh	r1, [r2, #0]
        selector.selectorVram->y = VRAM_HIGH;
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2240      	movs	r2, #64	@ 0x40
 8001372:	805a      	strh	r2, [r3, #2]
 8001374:	4770      	bx	lr
{
 8001376:	b510      	push	{r4, lr}
        animation_entry(selector.selectorPositionBanimotion, NON_LINEAR_ANIMATION);
 8001378:	4c07      	ldr	r4, [pc, #28]	@ (8001398 <selector_init_animation+0x40>)
 800137a:	2101      	movs	r1, #1
 800137c:	68e0      	ldr	r0, [r4, #12]
 800137e:	f7ff faf7 	bl	8000970 <animation_entry>
        selector.selectorVram->x = selector.selectorPositionBanimotion->setLocation_X;
 8001382:	68e2      	ldr	r2, [r4, #12]
 8001384:	6863      	ldr	r3, [r4, #4]
 8001386:	7992      	ldrb	r2, [r2, #6]
 8001388:	801a      	strh	r2, [r3, #0]
        selector.selectorVram->y = selector.selectorPositionBanimotion->setLocation_y;
 800138a:	68e2      	ldr	r2, [r4, #12]
 800138c:	6863      	ldr	r3, [r4, #4]
 800138e:	79d2      	ldrb	r2, [r2, #7]
 8001390:	805a      	strh	r2, [r3, #2]
    }
}
 8001392:	bd10      	pop	{r4, pc}
 8001394:	200030dd 	.word	0x200030dd
 8001398:	200030e0 	.word	0x200030e0

0800139c <selector_animation>:

// 选择器动画
void selector_animation(PageNodeTypedef *currentNodePage)
{
 800139c:	b538      	push	{r3, r4, r5, lr}
 800139e:	4605      	mov	r5, r0
    //     selector.selectorPositionBanimotion->wantedTimes = CURVE_MOVING_TIME;
    //     selector.selectorPositionBanimotion->passedTimes = 0;
    // }

    // 选择器位置运动
    animation_entry(selector.selectorPositionBanimotion, NON_LINEAR_ANIMATION);
 80013a0:	4c10      	ldr	r4, [pc, #64]	@ (80013e4 <selector_animation+0x48>)
 80013a2:	2101      	movs	r1, #1
 80013a4:	68e0      	ldr	r0, [r4, #12]
 80013a6:	f7ff fae3 	bl	8000970 <animation_entry>
    selector.selectorVram->x = selector.selectorPositionBanimotion->setLocation_X;
 80013aa:	68e2      	ldr	r2, [r4, #12]
 80013ac:	6863      	ldr	r3, [r4, #4]
 80013ae:	7992      	ldrb	r2, [r2, #6]
 80013b0:	801a      	strh	r2, [r3, #0]
    selector.selectorVram->y = selector.selectorPositionBanimotion->setLocation_y;
 80013b2:	68e2      	ldr	r2, [r4, #12]
 80013b4:	6863      	ldr	r3, [r4, #4]
 80013b6:	79d2      	ldrb	r2, [r2, #7]
 80013b8:	805a      	strh	r2, [r3, #2]

    // 选择器显存面积运动
    animation_entry(selector.selectorAreaAanimotion, NON_LINEAR_ANIMATION);
 80013ba:	2101      	movs	r1, #1
 80013bc:	68a0      	ldr	r0, [r4, #8]
 80013be:	f7ff fad7 	bl	8000970 <animation_entry>
    selector.selectorVram->width = selector.selectorAreaAanimotion->setLocation_X;
 80013c2:	68a2      	ldr	r2, [r4, #8]
 80013c4:	6863      	ldr	r3, [r4, #4]
 80013c6:	7992      	ldrb	r2, [r2, #6]
 80013c8:	80da      	strh	r2, [r3, #6]
    selector.selectorVram->height = selector.selectorAreaAanimotion->setLocation_y;
 80013ca:	68a2      	ldr	r2, [r4, #8]
 80013cc:	6863      	ldr	r3, [r4, #4]
 80013ce:	79d2      	ldrb	r2, [r2, #7]
 80013d0:	811a      	strh	r2, [r3, #8]

    if (selector.selectorPositionBanimotion->wantedTimes == selector.selectorPositionBanimotion->passedTimes)
 80013d2:	68e3      	ldr	r3, [r4, #12]
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	785b      	ldrb	r3, [r3, #1]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d000      	beq.n	80013de <selector_animation+0x42>
    {
        currentNodePage->selectedItem = selector.selectedItem;
    }
}
 80013dc:	bd38      	pop	{r3, r4, r5, pc}
        currentNodePage->selectedItem = selector.selectedItem;
 80013de:	6923      	ldr	r3, [r4, #16]
 80013e0:	622b      	str	r3, [r5, #32]
}
 80013e2:	e7fb      	b.n	80013dc <selector_animation+0x40>
 80013e4:	200030e0 	.word	0x200030e0

080013e8 <set_selector_location>:

// 设置选择器目标location
void set_selector_location(VRAM_typedef *vram)
{
 80013e8:	b500      	push	{lr}
    // 设置选择器目标位置
    selector.selectorPositionBanimotion->endLocation_X = vram->x - ITEM_GAP_WIDTH;
 80013ea:	8802      	ldrh	r2, [r0, #0]
 80013ec:	4b17      	ldr	r3, [pc, #92]	@ (800144c <set_selector_location+0x64>)
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	3a04      	subs	r2, #4
 80013f2:	710a      	strb	r2, [r1, #4]
    selector.selectorPositionBanimotion->endLocation_y = vram->y - ITEM_GAP_HEIGHT;
 80013f4:	8841      	ldrh	r1, [r0, #2]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	7151      	strb	r1, [r2, #5]

    // 设置选择器当前位置
    selector.selectorPositionBanimotion->startLocation_X = selector.selectorVram->x;
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	8811      	ldrh	r1, [r2, #0]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	7091      	strb	r1, [r2, #2]
    selector.selectorPositionBanimotion->startLocation_y = selector.selectorVram->y;
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	8851      	ldrh	r1, [r2, #2]
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	70d1      	strb	r1, [r2, #3]

    // 设置选择器时间参数
    selector.selectorPositionBanimotion->wantedTimes = CURVE_MOVING_TIME;
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	f04f 0c14 	mov.w	ip, #20
 8001410:	f882 c000 	strb.w	ip, [r2]
    selector.selectorPositionBanimotion->passedTimes = 0;
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	2100      	movs	r1, #0
 8001418:	7051      	strb	r1, [r2, #1]

    // 设置选择器显存块大小
    selector.selectorAreaAanimotion->endLocation_X = vram->width + ITEM_GAP_WIDTH * 2;
 800141a:	88c2      	ldrh	r2, [r0, #6]
 800141c:	3208      	adds	r2, #8
 800141e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8001422:	f88e 2004 	strb.w	r2, [lr, #4]
    selector.selectorAreaAanimotion->endLocation_y = vram->height + ITEM_GAP_HEIGHT * 2;
 8001426:	8900      	ldrh	r0, [r0, #8]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	7150      	strb	r0, [r2, #5]

    // 设置选择器显存块当前位置
    selector.selectorAreaAanimotion->startLocation_X = selector.selectorVram->width;
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	88d0      	ldrh	r0, [r2, #6]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	7090      	strb	r0, [r2, #2]
    selector.selectorAreaAanimotion->startLocation_y = selector.selectorVram->height;
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	8910      	ldrh	r0, [r2, #8]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	70d0      	strb	r0, [r2, #3]

    // 设置选择器时间参数
    selector.selectorAreaAanimotion->wantedTimes = CURVE_MOVING_TIME;
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	f882 c000 	strb.w	ip, [r2]
    selector.selectorAreaAanimotion->passedTimes = 0;
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	7059      	strb	r1, [r3, #1]
}
 8001446:	f85d fb04 	ldr.w	pc, [sp], #4
 800144a:	bf00      	nop
 800144c:	200030e0 	.word	0x200030e0

08001450 <update_selector_state>:

// 更新selector 的状态
uint8_t update_selector_state(PageNodeTypedef *currentNodePage)
{
 8001450:	b508      	push	{r3, lr}
    uint8_t selector_state = SELECTOR_STATE_INIT;

    if (selector.selectorPositionBanimotion->passedTimes == selector.selectorPositionBanimotion->wantedTimes)
 8001452:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <update_selector_state+0x40>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	785a      	ldrb	r2, [r3, #1]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d001      	beq.n	8001462 <update_selector_state+0x12>
    {
        selector_state = SELECTOR_STATE_IDLE;
    }
    else
    {
        selector_state = SELECTOR_STATE_MOVING;
 800145e:	2003      	movs	r0, #3
            set_selector_location(selector.selectedItem->vram);
        }
    }

    return selector_state;
}
 8001460:	bd08      	pop	{r3, pc}
        if (selector.selectedItem == currentNodePage->itemNodeHead)
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <update_selector_state+0x40>)
 8001464:	691a      	ldr	r2, [r3, #16]
 8001466:	69c3      	ldr	r3, [r0, #28]
 8001468:	429a      	cmp	r2, r3
 800146a:	d006      	beq.n	800147a <update_selector_state+0x2a>
            selector.selectedItem = currentNodePage->itemNodeHead;
 800146c:	4a08      	ldr	r2, [pc, #32]	@ (8001490 <update_selector_state+0x40>)
 800146e:	6113      	str	r3, [r2, #16]
            set_selector_location(selector.selectedItem->vram);
 8001470:	69d8      	ldr	r0, [r3, #28]
 8001472:	f7ff ffb9 	bl	80013e8 <set_selector_location>
        selector_state = SELECTOR_STATE_IDLE;
 8001476:	2002      	movs	r0, #2
 8001478:	e7f2      	b.n	8001460 <update_selector_state+0x10>
            selector.selectedItem = currentNodePage->itemNodeHead->itemNodeNext->itemNodeNext->itemNodeNext;
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	4a03      	ldr	r2, [pc, #12]	@ (8001490 <update_selector_state+0x40>)
 8001482:	6113      	str	r3, [r2, #16]
            set_selector_location(selector.selectedItem->vram);
 8001484:	69d8      	ldr	r0, [r3, #28]
 8001486:	f7ff ffaf 	bl	80013e8 <set_selector_location>
        selector_state = SELECTOR_STATE_IDLE;
 800148a:	2002      	movs	r0, #2
 800148c:	e7e8      	b.n	8001460 <update_selector_state+0x10>
 800148e:	bf00      	nop
 8001490:	200030e0 	.word	0x200030e0

08001494 <selector_state>:
{
 8001494:	b510      	push	{r4, lr}
 8001496:	4604      	mov	r4, r0
    selectorState = update_selector_state(currentNodePage);
 8001498:	f7ff ffda 	bl	8001450 <update_selector_state>
 800149c:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <selector_state+0x5c>)
 800149e:	7018      	strb	r0, [r3, #0]
    switch (selectorState)
 80014a0:	2801      	cmp	r0, #1
 80014a2:	d007      	beq.n	80014b4 <selector_state+0x20>
 80014a4:	2803      	cmp	r0, #3
 80014a6:	d009      	beq.n	80014bc <selector_state+0x28>
    get_vram_data(selector.selectorVram);
 80014a8:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <selector_state+0x60>)
 80014aa:	6858      	ldr	r0, [r3, #4]
 80014ac:	f002 f9f0 	bl	8003890 <get_vram_data>
    for (uint16_t i = 0; i < selector.selectorVram->width * selector.selectorVram->height / 8; i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	e010      	b.n	80014d6 <selector_state+0x42>
        selector_init_animation(currentNodePage);
 80014b4:	4620      	mov	r0, r4
 80014b6:	f7ff ff4f 	bl	8001358 <selector_init_animation>
        break;
 80014ba:	e7f5      	b.n	80014a8 <selector_state+0x14>
        selector_animation(currentNodePage);
 80014bc:	4620      	mov	r0, r4
 80014be:	f7ff ff6d 	bl	800139c <selector_animation>
 80014c2:	e7f1      	b.n	80014a8 <selector_state+0x14>
    for (uint16_t i = 0; i < selector.selectorVram->width * selector.selectorVram->height / 8; i++)
 80014c4:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
 80014c8:	da0f      	bge.n	80014ea <selector_state+0x56>
        selector.selectorVram->data[i] = ~selector.selectorVram->data[i];
 80014ca:	68c1      	ldr	r1, [r0, #12]
 80014cc:	5cca      	ldrb	r2, [r1, r3]
 80014ce:	43d2      	mvns	r2, r2
 80014d0:	54ca      	strb	r2, [r1, r3]
    for (uint16_t i = 0; i < selector.selectorVram->width * selector.selectorVram->height / 8; i++)
 80014d2:	3301      	adds	r3, #1
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <selector_state+0x60>)
 80014d8:	6850      	ldr	r0, [r2, #4]
 80014da:	88c2      	ldrh	r2, [r0, #6]
 80014dc:	8901      	ldrh	r1, [r0, #8]
 80014de:	fb01 f202 	mul.w	r2, r1, r2
 80014e2:	2a00      	cmp	r2, #0
 80014e4:	daee      	bge.n	80014c4 <selector_state+0x30>
 80014e6:	3207      	adds	r2, #7
 80014e8:	e7ec      	b.n	80014c4 <selector_state+0x30>
    write_to_vram_with_cover(selector.selectorVram);
 80014ea:	f002 f985 	bl	80037f8 <write_to_vram_with_cover>
}
 80014ee:	bd10      	pop	{r4, pc}
 80014f0:	200030de 	.word	0x200030de
 80014f4:	200030e0 	.word	0x200030e0

080014f8 <selector_init>:

// 选择器初始化
void selector_init(PageNodeTypedef *currentNodePage)
{
 80014f8:	b570      	push	{r4, r5, r6, lr}
 80014fa:	4605      	mov	r5, r0
    // 显存结构体分配
    selector.selectorVram = (VRAM_typedef *)pvPortMalloc(sizeof(VRAM_typedef));
 80014fc:	2014      	movs	r0, #20
 80014fe:	f7ff fbe3 	bl	8000cc8 <pvPortMalloc>
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <selector_init+0x48>)
 8001504:	6058      	str	r0, [r3, #4]
    if (selector.selectorVram != NULL)
 8001506:	b128      	cbz	r0, 8001514 <selector_init+0x1c>
 8001508:	4604      	mov	r4, r0
    {
        selector.selectorVram->data = pvPortMalloc(VRAM_HIGH * VRAM_WIDTH / 8);
 800150a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800150e:	f7ff fbdb 	bl	8000cc8 <pvPortMalloc>
 8001512:	60e0      	str	r0, [r4, #12]
    }
    // 选择器面积运动曲线分配
    selector.selectorAreaAanimotion = (curve_state_typedef *)pvPortMalloc(sizeof(curve_state_typedef));
 8001514:	2008      	movs	r0, #8
 8001516:	f7ff fbd7 	bl	8000cc8 <pvPortMalloc>
 800151a:	4e09      	ldr	r6, [pc, #36]	@ (8001540 <selector_init+0x48>)
 800151c:	60b0      	str	r0, [r6, #8]
    memset(selector.selectorAreaAanimotion, 0, sizeof(curve_state_typedef));
 800151e:	2400      	movs	r4, #0
 8001520:	6004      	str	r4, [r0, #0]
 8001522:	6044      	str	r4, [r0, #4]
    // 选择器位置运动曲线分配
    selector.selectorPositionBanimotion = (curve_state_typedef *)pvPortMalloc(sizeof(curve_state_typedef));
 8001524:	2008      	movs	r0, #8
 8001526:	f7ff fbcf 	bl	8000cc8 <pvPortMalloc>
 800152a:	60f0      	str	r0, [r6, #12]
    memset(selector.selectorPositionBanimotion, 0, sizeof(curve_state_typedef));
 800152c:	6004      	str	r4, [r0, #0]
 800152e:	6044      	str	r4, [r0, #4]
    selector.current_y = VRAM_HIGH;
    selector.end_x = ITEM_GAP_WIDTH;
    selector.end_y = ITEM_GAP_HEIGHT;
    #endif

    set_selector_location(currentNodePage->selectedItem->vram);
 8001530:	6a2b      	ldr	r3, [r5, #32]
 8001532:	69d8      	ldr	r0, [r3, #28]
 8001534:	f7ff ff58 	bl	80013e8 <set_selector_location>

    // 暂时无用
    selector.selectedItem = currentNodePage->itemNodeHead;
 8001538:	69eb      	ldr	r3, [r5, #28]
 800153a:	6133      	str	r3, [r6, #16]
}
 800153c:	bd70      	pop	{r4, r5, r6, pc}
 800153e:	bf00      	nop
 8001540:	200030e0 	.word	0x200030e0

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001546:	4a07      	ldr	r2, [pc, #28]	@ (8001564 <HAL_Init+0x20>)
 8001548:	6813      	ldr	r3, [r2, #0]
 800154a:	f043 0310 	orr.w	r3, r3, #16
 800154e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f84f 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	200f      	movs	r0, #15
 8001558:	f001 fb0a 	bl	8002b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155c:	f000 fdd4 	bl	8002108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001560:	2000      	movs	r0, #0
 8001562:	bd08      	pop	{r3, pc}
 8001564:	40022000 	.word	0x40022000

08001568 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001568:	4a03      	ldr	r2, [pc, #12]	@ (8001578 <HAL_IncTick+0x10>)
 800156a:	6811      	ldr	r1, [r2, #0]
 800156c:	4b03      	ldr	r3, [pc, #12]	@ (800157c <HAL_IncTick+0x14>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	440b      	add	r3, r1
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200030f8 	.word	0x200030f8
 800157c:	20000008 	.word	0x20000008

08001580 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001580:	4b01      	ldr	r3, [pc, #4]	@ (8001588 <HAL_GetTick+0x8>)
 8001582:	6818      	ldr	r0, [r3, #0]
}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	200030f8 	.word	0x200030f8

0800158c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800158c:	2800      	cmp	r0, #0
 800158e:	db08      	blt.n	80015a2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	0109      	lsls	r1, r1, #4
 8001592:	b2c9      	uxtb	r1, r1
 8001594:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001598:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800159c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80015a0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	f000 000f 	and.w	r0, r0, #15
 80015a6:	0109      	lsls	r1, r1, #4
 80015a8:	b2c9      	uxtb	r1, r1
 80015aa:	4b01      	ldr	r3, [pc, #4]	@ (80015b0 <__NVIC_SetPriority+0x24>)
 80015ac:	5419      	strb	r1, [r3, r0]
  }
}
 80015ae:	4770      	bx	lr
 80015b0:	e000ed14 	.word	0xe000ed14

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ba:	f1c0 0c07 	rsb	ip, r0, #7
 80015be:	f1bc 0f04 	cmp.w	ip, #4
 80015c2:	bf28      	it	cs
 80015c4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c8:	1d03      	adds	r3, r0, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d90f      	bls.n	80015ee <NVIC_EncodePriority+0x3a>
 80015ce:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80015d4:	fa0e f00c 	lsl.w	r0, lr, ip
 80015d8:	ea21 0100 	bic.w	r1, r1, r0
 80015dc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015de:	fa0e fe03 	lsl.w	lr, lr, r3
 80015e2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80015e6:	ea41 0002 	orr.w	r0, r1, r2
 80015ea:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	2300      	movs	r3, #0
 80015f0:	e7ee      	b.n	80015d0 <NVIC_EncodePriority+0x1c>
	...

080015f4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4a07      	ldr	r2, [pc, #28]	@ (8001614 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80015f6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001600:	0200      	lsls	r0, r0, #8
 8001602:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001606:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001610:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001618:	b510      	push	{r4, lr}
 800161a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <HAL_NVIC_SetPriority+0x1c>)
 800161e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001620:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001624:	f7ff ffc6 	bl	80015b4 <NVIC_EncodePriority>
 8001628:	4601      	mov	r1, r0
 800162a:	4620      	mov	r0, r4
 800162c:	f7ff ffae 	bl	800158c <__NVIC_SetPriority>
}
 8001630:	bd10      	pop	{r4, pc}
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001638:	2800      	cmp	r0, #0
 800163a:	db07      	blt.n	800164c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163c:	f000 021f 	and.w	r2, r0, #31
 8001640:	0940      	lsrs	r0, r0, #5
 8001642:	2301      	movs	r3, #1
 8001644:	4093      	lsls	r3, r2
 8001646:	4a02      	ldr	r2, [pc, #8]	@ (8001650 <HAL_NVIC_EnableIRQ+0x18>)
 8001648:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e100 	.word	0xe000e100

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b570      	push	{r4, r5, r6, lr}
 8001656:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001658:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800165a:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165c:	e0a1      	b.n	80017a2 <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800165e:	4d7e      	ldr	r5, [pc, #504]	@ (8001858 <HAL_GPIO_Init+0x204>)
 8001660:	42ab      	cmp	r3, r5
 8001662:	d014      	beq.n	800168e <HAL_GPIO_Init+0x3a>
 8001664:	d80c      	bhi.n	8001680 <HAL_GPIO_Init+0x2c>
 8001666:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800166a:	42ab      	cmp	r3, r5
 800166c:	d00f      	beq.n	800168e <HAL_GPIO_Init+0x3a>
 800166e:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8001672:	42ab      	cmp	r3, r5
 8001674:	d00b      	beq.n	800168e <HAL_GPIO_Init+0x3a>
 8001676:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800167a:	42ab      	cmp	r3, r5
 800167c:	d110      	bne.n	80016a0 <HAL_GPIO_Init+0x4c>
 800167e:	e006      	b.n	800168e <HAL_GPIO_Init+0x3a>
 8001680:	4d76      	ldr	r5, [pc, #472]	@ (800185c <HAL_GPIO_Init+0x208>)
 8001682:	42ab      	cmp	r3, r5
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x3a>
 8001686:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 800168a:	42ab      	cmp	r3, r5
 800168c:	d108      	bne.n	80016a0 <HAL_GPIO_Init+0x4c>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800168e:	688b      	ldr	r3, [r1, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d050      	beq.n	8001736 <HAL_GPIO_Init+0xe2>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001694:	2b01      	cmp	r3, #1
 8001696:	d049      	beq.n	800172c <HAL_GPIO_Init+0xd8>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001698:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800169a:	2408      	movs	r4, #8
 800169c:	e000      	b.n	80016a0 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800169e:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016a0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80016a4:	d849      	bhi.n	800173a <HAL_GPIO_Init+0xe6>
 80016a6:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016a8:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016ac:	6833      	ldr	r3, [r6, #0]
 80016ae:	250f      	movs	r5, #15
 80016b0:	4095      	lsls	r5, r2
 80016b2:	ea23 0305 	bic.w	r3, r3, r5
 80016b6:	fa04 f202 	lsl.w	r2, r4, r2
 80016ba:	4313      	orrs	r3, r2
 80016bc:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016be:	684b      	ldr	r3, [r1, #4]
 80016c0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80016c4:	d06b      	beq.n	800179e <HAL_GPIO_Init+0x14a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016c6:	4b66      	ldr	r3, [pc, #408]	@ (8001860 <HAL_GPIO_Init+0x20c>)
 80016c8:	699a      	ldr	r2, [r3, #24]
 80016ca:	f042 0201 	orr.w	r2, r2, #1
 80016ce:	619a      	str	r2, [r3, #24]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80016da:	ea4f 029c 	mov.w	r2, ip, lsr #2
 80016de:	1c95      	adds	r5, r2, #2
 80016e0:	4b60      	ldr	r3, [pc, #384]	@ (8001864 <HAL_GPIO_Init+0x210>)
 80016e2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016e6:	f00c 0503 	and.w	r5, ip, #3
 80016ea:	00ad      	lsls	r5, r5, #2
 80016ec:	230f      	movs	r3, #15
 80016ee:	40ab      	lsls	r3, r5
 80016f0:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001868 <HAL_GPIO_Init+0x214>)
 80016f6:	4298      	cmp	r0, r3
 80016f8:	d026      	beq.n	8001748 <HAL_GPIO_Init+0xf4>
 80016fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80016fe:	4298      	cmp	r0, r3
 8001700:	f000 808c 	beq.w	800181c <HAL_GPIO_Init+0x1c8>
 8001704:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001708:	4298      	cmp	r0, r3
 800170a:	f000 8089 	beq.w	8001820 <HAL_GPIO_Init+0x1cc>
 800170e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001712:	4298      	cmp	r0, r3
 8001714:	d016      	beq.n	8001744 <HAL_GPIO_Init+0xf0>
 8001716:	2304      	movs	r3, #4
 8001718:	e017      	b.n	800174a <HAL_GPIO_Init+0xf6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800171a:	68cc      	ldr	r4, [r1, #12]
 800171c:	3404      	adds	r4, #4
          break;
 800171e:	e7bf      	b.n	80016a0 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001720:	68cc      	ldr	r4, [r1, #12]
 8001722:	3408      	adds	r4, #8
          break;
 8001724:	e7bc      	b.n	80016a0 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001726:	68cc      	ldr	r4, [r1, #12]
 8001728:	340c      	adds	r4, #12
          break;
 800172a:	e7b9      	b.n	80016a0 <HAL_GPIO_Init+0x4c>
            GPIOx->BSRR = ioposition;
 800172c:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800172e:	2408      	movs	r4, #8
 8001730:	e7b6      	b.n	80016a0 <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001732:	2400      	movs	r4, #0
 8001734:	e7b4      	b.n	80016a0 <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001736:	2404      	movs	r4, #4
 8001738:	e7b2      	b.n	80016a0 <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800173a:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800173c:	f1ac 0208 	sub.w	r2, ip, #8
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	e7b3      	b.n	80016ac <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001744:	2303      	movs	r3, #3
 8001746:	e000      	b.n	800174a <HAL_GPIO_Init+0xf6>
 8001748:	2300      	movs	r3, #0
 800174a:	40ab      	lsls	r3, r5
 800174c:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 800174e:	3202      	adds	r2, #2
 8001750:	4d44      	ldr	r5, [pc, #272]	@ (8001864 <HAL_GPIO_Init+0x210>)
 8001752:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001756:	684b      	ldr	r3, [r1, #4]
 8001758:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800175c:	d062      	beq.n	8001824 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800175e:	4a43      	ldr	r2, [pc, #268]	@ (800186c <HAL_GPIO_Init+0x218>)
 8001760:	6893      	ldr	r3, [r2, #8]
 8001762:	ea43 030e 	orr.w	r3, r3, lr
 8001766:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001768:	684b      	ldr	r3, [r1, #4]
 800176a:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800176e:	d05f      	beq.n	8001830 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001770:	4a3e      	ldr	r2, [pc, #248]	@ (800186c <HAL_GPIO_Init+0x218>)
 8001772:	68d3      	ldr	r3, [r2, #12]
 8001774:	ea43 030e 	orr.w	r3, r3, lr
 8001778:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800177a:	684b      	ldr	r3, [r1, #4]
 800177c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001780:	d05c      	beq.n	800183c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001782:	4a3a      	ldr	r2, [pc, #232]	@ (800186c <HAL_GPIO_Init+0x218>)
 8001784:	6853      	ldr	r3, [r2, #4]
 8001786:	ea43 030e 	orr.w	r3, r3, lr
 800178a:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178c:	684b      	ldr	r3, [r1, #4]
 800178e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001792:	d059      	beq.n	8001848 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001794:	4a35      	ldr	r2, [pc, #212]	@ (800186c <HAL_GPIO_Init+0x218>)
 8001796:	6813      	ldr	r3, [r2, #0]
 8001798:	ea43 030e 	orr.w	r3, r3, lr
 800179c:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 800179e:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a2:	680b      	ldr	r3, [r1, #0]
 80017a4:	fa33 f20c 	lsrs.w	r2, r3, ip
 80017a8:	d054      	beq.n	8001854 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 80017aa:	2201      	movs	r2, #1
 80017ac:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b0:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 80017b4:	ea32 0303 	bics.w	r3, r2, r3
 80017b8:	d1f1      	bne.n	800179e <HAL_GPIO_Init+0x14a>
      switch (GPIO_Init->Mode)
 80017ba:	684b      	ldr	r3, [r1, #4]
 80017bc:	2b12      	cmp	r3, #18
 80017be:	f63f af4e 	bhi.w	800165e <HAL_GPIO_Init+0xa>
 80017c2:	2b12      	cmp	r3, #18
 80017c4:	f63f af6c 	bhi.w	80016a0 <HAL_GPIO_Init+0x4c>
 80017c8:	a501      	add	r5, pc, #4	@ (adr r5, 80017d0 <HAL_GPIO_Init+0x17c>)
 80017ca:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 80017ce:	bf00      	nop
 80017d0:	0800168f 	.word	0x0800168f
 80017d4:	0800169f 	.word	0x0800169f
 80017d8:	08001721 	.word	0x08001721
 80017dc:	08001733 	.word	0x08001733
 80017e0:	080016a1 	.word	0x080016a1
 80017e4:	080016a1 	.word	0x080016a1
 80017e8:	080016a1 	.word	0x080016a1
 80017ec:	080016a1 	.word	0x080016a1
 80017f0:	080016a1 	.word	0x080016a1
 80017f4:	080016a1 	.word	0x080016a1
 80017f8:	080016a1 	.word	0x080016a1
 80017fc:	080016a1 	.word	0x080016a1
 8001800:	080016a1 	.word	0x080016a1
 8001804:	080016a1 	.word	0x080016a1
 8001808:	080016a1 	.word	0x080016a1
 800180c:	080016a1 	.word	0x080016a1
 8001810:	080016a1 	.word	0x080016a1
 8001814:	0800171b 	.word	0x0800171b
 8001818:	08001727 	.word	0x08001727
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800181c:	2301      	movs	r3, #1
 800181e:	e794      	b.n	800174a <HAL_GPIO_Init+0xf6>
 8001820:	2302      	movs	r3, #2
 8001822:	e792      	b.n	800174a <HAL_GPIO_Init+0xf6>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001824:	4a11      	ldr	r2, [pc, #68]	@ (800186c <HAL_GPIO_Init+0x218>)
 8001826:	6893      	ldr	r3, [r2, #8]
 8001828:	ea23 030e 	bic.w	r3, r3, lr
 800182c:	6093      	str	r3, [r2, #8]
 800182e:	e79b      	b.n	8001768 <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001830:	4a0e      	ldr	r2, [pc, #56]	@ (800186c <HAL_GPIO_Init+0x218>)
 8001832:	68d3      	ldr	r3, [r2, #12]
 8001834:	ea23 030e 	bic.w	r3, r3, lr
 8001838:	60d3      	str	r3, [r2, #12]
 800183a:	e79e      	b.n	800177a <HAL_GPIO_Init+0x126>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800183c:	4a0b      	ldr	r2, [pc, #44]	@ (800186c <HAL_GPIO_Init+0x218>)
 800183e:	6853      	ldr	r3, [r2, #4]
 8001840:	ea23 030e 	bic.w	r3, r3, lr
 8001844:	6053      	str	r3, [r2, #4]
 8001846:	e7a1      	b.n	800178c <HAL_GPIO_Init+0x138>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001848:	4a08      	ldr	r2, [pc, #32]	@ (800186c <HAL_GPIO_Init+0x218>)
 800184a:	6813      	ldr	r3, [r2, #0]
 800184c:	ea23 030e 	bic.w	r3, r3, lr
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e7a4      	b.n	800179e <HAL_GPIO_Init+0x14a>
  }
}
 8001854:	b002      	add	sp, #8
 8001856:	bd70      	pop	{r4, r5, r6, pc}
 8001858:	10220000 	.word	0x10220000
 800185c:	10310000 	.word	0x10310000
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000
 8001868:	40010800 	.word	0x40010800
 800186c:	40010400 	.word	0x40010400

08001870 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001870:	6803      	ldr	r3, [r0, #0]
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001878:	d101      	bne.n	800187e <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800187a:	2000      	movs	r0, #0
}
 800187c:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800187e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001882:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001884:	2300      	movs	r3, #0
 8001886:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001888:	2220      	movs	r2, #32
 800188a:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800188e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001892:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001894:	f042 0204 	orr.w	r2, r2, #4
 8001898:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 800189a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 800189e:	2001      	movs	r0, #1
 80018a0:	4770      	bx	lr

080018a2 <I2C_WaitOnFlagUntilTimeout>:
{
 80018a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018a6:	4606      	mov	r6, r0
 80018a8:	460c      	mov	r4, r1
 80018aa:	4617      	mov	r7, r2
 80018ac:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018ae:	e03b      	b.n	8001928 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018b0:	f7ff fe66 	bl	8001580 <HAL_GetTick>
 80018b4:	9b06      	ldr	r3, [sp, #24]
 80018b6:	1ac0      	subs	r0, r0, r3
 80018b8:	4540      	cmp	r0, r8
 80018ba:	d802      	bhi.n	80018c2 <I2C_WaitOnFlagUntilTimeout+0x20>
 80018bc:	f1b8 0f00 	cmp.w	r8, #0
 80018c0:	d132      	bne.n	8001928 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018c2:	2d01      	cmp	r5, #1
 80018c4:	d018      	beq.n	80018f8 <I2C_WaitOnFlagUntilTimeout+0x56>
 80018c6:	6833      	ldr	r3, [r6, #0]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	ea24 0303 	bic.w	r3, r4, r3
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	095b      	lsrs	r3, r3, #5
 80018d6:	429f      	cmp	r7, r3
 80018d8:	d126      	bne.n	8001928 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80018da:	2300      	movs	r3, #0
 80018dc:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80018de:	2220      	movs	r2, #32
 80018e0:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018e4:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018e8:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80018ea:	f042 0220 	orr.w	r2, r2, #32
 80018ee:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80018f0:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 80018f4:	2001      	movs	r0, #1
 80018f6:	e027      	b.n	8001948 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018f8:	6833      	ldr	r3, [r6, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	ea24 0303 	bic.w	r3, r4, r3
 8001900:	b29b      	uxth	r3, r3
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	e7e5      	b.n	80018d6 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800190a:	6833      	ldr	r3, [r6, #0]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	ea24 0c03 	bic.w	ip, r4, r3
 8001912:	fa1f fc8c 	uxth.w	ip, ip
 8001916:	fabc fc8c 	clz	ip, ip
 800191a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800191e:	4567      	cmp	r7, ip
 8001920:	d111      	bne.n	8001946 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8001922:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001926:	d1c3      	bne.n	80018b0 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001928:	f3c4 4507 	ubfx	r5, r4, #16, #8
 800192c:	2d01      	cmp	r5, #1
 800192e:	d0ec      	beq.n	800190a <I2C_WaitOnFlagUntilTimeout+0x68>
 8001930:	6833      	ldr	r3, [r6, #0]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	ea24 0c03 	bic.w	ip, r4, r3
 8001938:	fa1f fc8c 	uxth.w	ip, ip
 800193c:	fabc fc8c 	clz	ip, ip
 8001940:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001944:	e7eb      	b.n	800191e <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8001946:	2000      	movs	r0, #0
}
 8001948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800194c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800194c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001950:	4605      	mov	r5, r0
 8001952:	460e      	mov	r6, r1
 8001954:	4690      	mov	r8, r2
 8001956:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001958:	e053      	b.n	8001a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001960:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001962:	682b      	ldr	r3, [r5, #0]
 8001964:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001968:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800196a:	2300      	movs	r3, #0
 800196c:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800196e:	2220      	movs	r2, #32
 8001970:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001974:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001978:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800197a:	f042 0204 	orr.w	r2, r2, #4
 800197e:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8001980:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8001984:	2001      	movs	r0, #1
 8001986:	e04a      	b.n	8001a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001988:	f7ff fdfa 	bl	8001580 <HAL_GetTick>
 800198c:	eba0 0009 	sub.w	r0, r0, r9
 8001990:	4540      	cmp	r0, r8
 8001992:	d802      	bhi.n	800199a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8001994:	f1b8 0f00 	cmp.w	r8, #0
 8001998:	d133      	bne.n	8001a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800199a:	2f01      	cmp	r7, #1
 800199c:	d017      	beq.n	80019ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 800199e:	682b      	ldr	r3, [r5, #0]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	ea26 0303 	bic.w	r3, r6, r3
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	3b00      	subs	r3, #0
 80019aa:	bf18      	it	ne
 80019ac:	2301      	movne	r3, #1
 80019ae:	b343      	cbz	r3, 8001a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019b4:	2220      	movs	r2, #32
 80019b6:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ba:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019be:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80019c0:	f042 0220 	orr.w	r2, r2, #32
 80019c4:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80019c6:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 80019ca:	2001      	movs	r0, #1
 80019cc:	e027      	b.n	8001a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80019ce:	682b      	ldr	r3, [r5, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	ea26 0303 	bic.w	r3, r6, r3
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3b00      	subs	r3, #0
 80019da:	bf18      	it	ne
 80019dc:	2301      	movne	r3, #1
 80019de:	e7e6      	b.n	80019ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019e0:	682b      	ldr	r3, [r5, #0]
 80019e2:	699c      	ldr	r4, [r3, #24]
 80019e4:	ea26 0404 	bic.w	r4, r6, r4
 80019e8:	b2a4      	uxth	r4, r4
 80019ea:	3c00      	subs	r4, #0
 80019ec:	bf18      	it	ne
 80019ee:	2401      	movne	r4, #1
 80019f0:	b1a4      	cbz	r4, 8001a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019f2:	682b      	ldr	r3, [r5, #0]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80019fa:	d1ae      	bne.n	800195a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80019fc:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001a00:	d1c2      	bne.n	8001988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a02:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8001a06:	2f01      	cmp	r7, #1
 8001a08:	d1ea      	bne.n	80019e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8001a0a:	682b      	ldr	r3, [r5, #0]
 8001a0c:	695c      	ldr	r4, [r3, #20]
 8001a0e:	ea26 0404 	bic.w	r4, r6, r4
 8001a12:	b2a4      	uxth	r4, r4
 8001a14:	3c00      	subs	r4, #0
 8001a16:	bf18      	it	ne
 8001a18:	2401      	movne	r4, #1
 8001a1a:	e7e9      	b.n	80019f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8001a1c:	2000      	movs	r0, #0
}
 8001a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001a24 <I2C_MasterRequestWrite>:
{
 8001a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a26:	b083      	sub	sp, #12
 8001a28:	4604      	mov	r4, r0
 8001a2a:	460d      	mov	r5, r1
 8001a2c:	4616      	mov	r6, r2
 8001a2e:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a30:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d00d      	beq.n	8001a52 <I2C_MasterRequestWrite+0x2e>
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d00b      	beq.n	8001a52 <I2C_MasterRequestWrite+0x2e>
 8001a3a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a3e:	d008      	beq.n	8001a52 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a40:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d10a      	bne.n	8001a5c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a46:	6802      	ldr	r2, [r0, #0]
 8001a48:	6813      	ldr	r3, [r2, #0]
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	e004      	b.n	8001a5c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a52:	6822      	ldr	r2, [r4, #0]
 8001a54:	6813      	ldr	r3, [r2, #0]
 8001a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a5c:	9700      	str	r7, [sp, #0]
 8001a5e:	4633      	mov	r3, r6
 8001a60:	2200      	movs	r2, #0
 8001a62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a66:	4620      	mov	r0, r4
 8001a68:	f7ff ff1b 	bl	80018a2 <I2C_WaitOnFlagUntilTimeout>
 8001a6c:	b980      	cbnz	r0, 8001a90 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a6e:	6923      	ldr	r3, [r4, #16]
 8001a70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a74:	d116      	bne.n	8001aa4 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a76:	6823      	ldr	r3, [r4, #0]
 8001a78:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8001a7c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a7e:	463b      	mov	r3, r7
 8001a80:	4632      	mov	r2, r6
 8001a82:	4913      	ldr	r1, [pc, #76]	@ (8001ad0 <I2C_MasterRequestWrite+0xac>)
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff ff61 	bl	800194c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a8a:	b9f8      	cbnz	r0, 8001acc <I2C_MasterRequestWrite+0xa8>
}
 8001a8c:	b003      	add	sp, #12
 8001a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001a98:	d002      	beq.n	8001aa0 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a9e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	e7f3      	b.n	8001a8c <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001aa4:	11eb      	asrs	r3, r5, #7
 8001aa6:	6822      	ldr	r2, [r4, #0]
 8001aa8:	f003 0306 	and.w	r3, r3, #6
 8001aac:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8001ab0:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	4632      	mov	r2, r6
 8001ab6:	4907      	ldr	r1, [pc, #28]	@ (8001ad4 <I2C_MasterRequestWrite+0xb0>)
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff ff47 	bl	800194c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001abe:	b918      	cbnz	r0, 8001ac8 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	b2ed      	uxtb	r5, r5
 8001ac4:	611d      	str	r5, [r3, #16]
 8001ac6:	e7da      	b.n	8001a7e <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8001ac8:	2001      	movs	r0, #1
 8001aca:	e7df      	b.n	8001a8c <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8001acc:	2001      	movs	r0, #1
 8001ace:	e7dd      	b.n	8001a8c <I2C_MasterRequestWrite+0x68>
 8001ad0:	00010002 	.word	0x00010002
 8001ad4:	00010008 	.word	0x00010008

08001ad8 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001ad8:	b570      	push	{r4, r5, r6, lr}
 8001ada:	4604      	mov	r4, r0
 8001adc:	460d      	mov	r5, r1
 8001ade:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001ae8:	d121      	bne.n	8001b2e <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff fec0 	bl	8001870 <I2C_IsAcknowledgeFailed>
 8001af0:	b9f8      	cbnz	r0, 8001b32 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001af2:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001af6:	d0f3      	beq.n	8001ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af8:	f7ff fd42 	bl	8001580 <HAL_GetTick>
 8001afc:	1b80      	subs	r0, r0, r6
 8001afe:	42a8      	cmp	r0, r5
 8001b00:	d801      	bhi.n	8001b06 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001b02:	2d00      	cmp	r5, #0
 8001b04:	d1ec      	bne.n	8001ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001b0e:	d1e7      	bne.n	8001ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b14:	2220      	movs	r2, #32
 8001b16:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b1a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b1e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001b20:	f042 0220 	orr.w	r2, r2, #32
 8001b24:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001b26:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	e000      	b.n	8001b30 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8001b2e:	2000      	movs	r0, #0
}
 8001b30:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001b32:	2001      	movs	r0, #1
 8001b34:	e7fc      	b.n	8001b30 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
	...

08001b38 <I2C_RequestMemoryWrite>:
{
 8001b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	4604      	mov	r4, r0
 8001b40:	460d      	mov	r5, r1
 8001b42:	4691      	mov	r9, r2
 8001b44:	461f      	mov	r7, r3
 8001b46:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8001b4a:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b4c:	6803      	ldr	r3, [r0, #0]
 8001b4e:	6819      	ldr	r1, [r3, #0]
 8001b50:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001b54:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b56:	9600      	str	r6, [sp, #0]
 8001b58:	4643      	mov	r3, r8
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b60:	f7ff fe9f 	bl	80018a2 <I2C_WaitOnFlagUntilTimeout>
 8001b64:	b960      	cbnz	r0, 8001b80 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8001b6c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b6e:	4633      	mov	r3, r6
 8001b70:	4642      	mov	r2, r8
 8001b72:	4926      	ldr	r1, [pc, #152]	@ (8001c0c <I2C_RequestMemoryWrite+0xd4>)
 8001b74:	4620      	mov	r0, r4
 8001b76:	f7ff fee9 	bl	800194c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b7a:	b168      	cbz	r0, 8001b98 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	e008      	b.n	8001b92 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001b88:	d002      	beq.n	8001b90 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b8e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001b90:	2003      	movs	r0, #3
}
 8001b92:	b005      	add	sp, #20
 8001b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9303      	str	r3, [sp, #12]
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	9203      	str	r2, [sp, #12]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	9303      	str	r3, [sp, #12]
 8001ba6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba8:	4632      	mov	r2, r6
 8001baa:	4641      	mov	r1, r8
 8001bac:	4620      	mov	r0, r4
 8001bae:	f7ff ff93 	bl	8001ad8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bb2:	b930      	cbnz	r0, 8001bc2 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bb4:	2f01      	cmp	r7, #1
 8001bb6:	d10f      	bne.n	8001bd8 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	fa5f f689 	uxtb.w	r6, r9
 8001bbe:	611e      	str	r6, [r3, #16]
 8001bc0:	e7e7      	b.n	8001b92 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bc2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d001      	beq.n	8001bcc <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8001bc8:	2001      	movs	r0, #1
 8001bca:	e7e2      	b.n	8001b92 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bcc:	6822      	ldr	r2, [r4, #0]
 8001bce:	6813      	ldr	r3, [r2, #0]
 8001bd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e7f7      	b.n	8001bc8 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8001bde:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001be0:	4632      	mov	r2, r6
 8001be2:	4641      	mov	r1, r8
 8001be4:	4620      	mov	r0, r4
 8001be6:	f7ff ff77 	bl	8001ad8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bea:	b920      	cbnz	r0, 8001bf6 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	fa5f f689 	uxtb.w	r6, r9
 8001bf2:	611e      	str	r6, [r3, #16]
 8001bf4:	e7cd      	b.n	8001b92 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bf6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d001      	beq.n	8001c00 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	e7c8      	b.n	8001b92 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c00:	6822      	ldr	r2, [r4, #0]
 8001c02:	6813      	ldr	r3, [r2, #0]
 8001c04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e7f7      	b.n	8001bfc <I2C_RequestMemoryWrite+0xc4>
 8001c0c:	00010002 	.word	0x00010002

08001c10 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	4604      	mov	r4, r0
 8001c14:	460d      	mov	r5, r1
 8001c16:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	f013 0f04 	tst.w	r3, #4
 8001c20:	d121      	bne.n	8001c66 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c22:	4620      	mov	r0, r4
 8001c24:	f7ff fe24 	bl	8001870 <I2C_IsAcknowledgeFailed>
 8001c28:	b9f8      	cbnz	r0, 8001c6a <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001c2a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001c2e:	d0f3      	beq.n	8001c18 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c30:	f7ff fca6 	bl	8001580 <HAL_GetTick>
 8001c34:	1b80      	subs	r0, r0, r6
 8001c36:	42a8      	cmp	r0, r5
 8001c38:	d801      	bhi.n	8001c3e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001c3a:	2d00      	cmp	r5, #0
 8001c3c:	d1ec      	bne.n	8001c18 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f013 0f04 	tst.w	r3, #4
 8001c46:	d1e7      	bne.n	8001c18 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c52:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c56:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001c58:	f042 0220 	orr.w	r2, r2, #32
 8001c5c:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001c5e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001c62:	2001      	movs	r0, #1
 8001c64:	e000      	b.n	8001c68 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8001c66:	2000      	movs	r0, #0
}
 8001c68:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	e7fc      	b.n	8001c68 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
	...

08001c70 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001c70:	2800      	cmp	r0, #0
 8001c72:	f000 80cc 	beq.w	8001e0e <HAL_I2C_Init+0x19e>
{
 8001c76:	b570      	push	{r4, r5, r6, lr}
 8001c78:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c7a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d077      	beq.n	8001d72 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c82:	2324      	movs	r3, #36	@ 0x24
 8001c84:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001c88:	6822      	ldr	r2, [r4, #0]
 8001c8a:	6813      	ldr	r3, [r2, #0]
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c92:	6822      	ldr	r2, [r4, #0]
 8001c94:	6813      	ldr	r3, [r2, #0]
 8001c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c9a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c9c:	6822      	ldr	r2, [r4, #0]
 8001c9e:	6813      	ldr	r3, [r2, #0]
 8001ca0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001ca4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ca6:	f000 fdcb 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001caa:	6862      	ldr	r2, [r4, #4]
 8001cac:	4b5a      	ldr	r3, [pc, #360]	@ (8001e18 <HAL_I2C_Init+0x1a8>)
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d864      	bhi.n	8001d7c <HAL_I2C_Init+0x10c>
 8001cb2:	4b5a      	ldr	r3, [pc, #360]	@ (8001e1c <HAL_I2C_Init+0x1ac>)
 8001cb4:	4298      	cmp	r0, r3
 8001cb6:	bf8c      	ite	hi
 8001cb8:	2300      	movhi	r3, #0
 8001cba:	2301      	movls	r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f040 80a8 	bne.w	8001e12 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8001cc2:	4957      	ldr	r1, [pc, #348]	@ (8001e20 <HAL_I2C_Init+0x1b0>)
 8001cc4:	fba1 3100 	umull	r3, r1, r1, r0
 8001cc8:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cca:	6825      	ldr	r5, [r4, #0]
 8001ccc:	686a      	ldr	r2, [r5, #4]
 8001cce:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001cd2:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8001cd6:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cd8:	6821      	ldr	r1, [r4, #0]
 8001cda:	6a0a      	ldr	r2, [r1, #32]
 8001cdc:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001ce0:	6866      	ldr	r6, [r4, #4]
 8001ce2:	4d4d      	ldr	r5, [pc, #308]	@ (8001e18 <HAL_I2C_Init+0x1a8>)
 8001ce4:	42ae      	cmp	r6, r5
 8001ce6:	d84f      	bhi.n	8001d88 <HAL_I2C_Init+0x118>
 8001ce8:	3301      	adds	r3, #1
 8001cea:	4313      	orrs	r3, r2
 8001cec:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cee:	6821      	ldr	r1, [r4, #0]
 8001cf0:	69ca      	ldr	r2, [r1, #28]
 8001cf2:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8001cf6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001cfa:	6865      	ldr	r5, [r4, #4]
 8001cfc:	4b46      	ldr	r3, [pc, #280]	@ (8001e18 <HAL_I2C_Init+0x1a8>)
 8001cfe:	429d      	cmp	r5, r3
 8001d00:	d84c      	bhi.n	8001d9c <HAL_I2C_Init+0x12c>
 8001d02:	1e43      	subs	r3, r0, #1
 8001d04:	006d      	lsls	r5, r5, #1
 8001d06:	fbb3 f3f5 	udiv	r3, r3, r5
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8001d10:	4203      	tst	r3, r0
 8001d12:	d078      	beq.n	8001e06 <HAL_I2C_Init+0x196>
 8001d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d1c:	6821      	ldr	r1, [r4, #0]
 8001d1e:	680b      	ldr	r3, [r1, #0]
 8001d20:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001d24:	69e2      	ldr	r2, [r4, #28]
 8001d26:	6a20      	ldr	r0, [r4, #32]
 8001d28:	4302      	orrs	r2, r0
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d2e:	6821      	ldr	r1, [r4, #0]
 8001d30:	688b      	ldr	r3, [r1, #8]
 8001d32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d3a:	6922      	ldr	r2, [r4, #16]
 8001d3c:	68e0      	ldr	r0, [r4, #12]
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	4313      	orrs	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d44:	6821      	ldr	r1, [r4, #0]
 8001d46:	68cb      	ldr	r3, [r1, #12]
 8001d48:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d4c:	6962      	ldr	r2, [r4, #20]
 8001d4e:	69a0      	ldr	r0, [r4, #24]
 8001d50:	4302      	orrs	r2, r0
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001d56:	6822      	ldr	r2, [r4, #0]
 8001d58:	6813      	ldr	r3, [r2, #0]
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d60:	2000      	movs	r0, #0
 8001d62:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d64:	2320      	movs	r3, #32
 8001d66:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d6a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6c:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8001d70:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001d72:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8001d76:	f000 f9f1 	bl	800215c <HAL_I2C_MspInit>
 8001d7a:	e782      	b.n	8001c82 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d7c:	4b29      	ldr	r3, [pc, #164]	@ (8001e24 <HAL_I2C_Init+0x1b4>)
 8001d7e:	4298      	cmp	r0, r3
 8001d80:	bf8c      	ite	hi
 8001d82:	2300      	movhi	r3, #0
 8001d84:	2301      	movls	r3, #1
 8001d86:	e799      	b.n	8001cbc <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d88:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8001d8c:	fb05 f303 	mul.w	r3, r5, r3
 8001d90:	4d25      	ldr	r5, [pc, #148]	@ (8001e28 <HAL_I2C_Init+0x1b8>)
 8001d92:	fba5 5303 	umull	r5, r3, r5, r3
 8001d96:	099b      	lsrs	r3, r3, #6
 8001d98:	3301      	adds	r3, #1
 8001d9a:	e7a6      	b.n	8001cea <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d9c:	68a6      	ldr	r6, [r4, #8]
 8001d9e:	b9be      	cbnz	r6, 8001dd0 <HAL_I2C_Init+0x160>
 8001da0:	1e43      	subs	r3, r0, #1
 8001da2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8001da6:	fbb3 f3fc 	udiv	r3, r3, ip
 8001daa:	3301      	adds	r3, #1
 8001dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	095b      	lsrs	r3, r3, #5
 8001db6:	bb43      	cbnz	r3, 8001e0a <HAL_I2C_Init+0x19a>
 8001db8:	b9c6      	cbnz	r6, 8001dec <HAL_I2C_Init+0x17c>
 8001dba:	1e43      	subs	r3, r0, #1
 8001dbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001dc0:	fbb3 f3f5 	udiv	r3, r3, r5
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dce:	e7a3      	b.n	8001d18 <HAL_I2C_Init+0xa8>
 8001dd0:	1e43      	subs	r3, r0, #1
 8001dd2:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8001dd6:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001dda:	fbb3 f3fc 	udiv	r3, r3, ip
 8001dde:	3301      	adds	r3, #1
 8001de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	e7e4      	b.n	8001db6 <HAL_I2C_Init+0x146>
 8001dec:	1e43      	subs	r3, r0, #1
 8001dee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001df2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001df6:	fbb3 f3f5 	udiv	r3, r3, r5
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e04:	e788      	b.n	8001d18 <HAL_I2C_Init+0xa8>
 8001e06:	2304      	movs	r3, #4
 8001e08:	e786      	b.n	8001d18 <HAL_I2C_Init+0xa8>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e784      	b.n	8001d18 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001e0e:	2001      	movs	r0, #1
}
 8001e10:	4770      	bx	lr
    return HAL_ERROR;
 8001e12:	2001      	movs	r0, #1
 8001e14:	e7ac      	b.n	8001d70 <HAL_I2C_Init+0x100>
 8001e16:	bf00      	nop
 8001e18:	000186a0 	.word	0x000186a0
 8001e1c:	001e847f 	.word	0x001e847f
 8001e20:	431bde83 	.word	0x431bde83
 8001e24:	003d08ff 	.word	0x003d08ff
 8001e28:	10624dd3 	.word	0x10624dd3

08001e2c <HAL_I2C_Master_Transmit>:
{
 8001e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e30:	b085      	sub	sp, #20
 8001e32:	4604      	mov	r4, r0
 8001e34:	460f      	mov	r7, r1
 8001e36:	4691      	mov	r9, r2
 8001e38:	4698      	mov	r8, r3
 8001e3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8001e3c:	f7ff fba0 	bl	8001580 <HAL_GetTick>
 8001e40:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e42:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8001e46:	b2c0      	uxtb	r0, r0
 8001e48:	2820      	cmp	r0, #32
 8001e4a:	d004      	beq.n	8001e56 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8001e4c:	2702      	movs	r7, #2
}
 8001e4e:	4638      	mov	r0, r7
 8001e50:	b005      	add	sp, #20
 8001e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e56:	9500      	str	r5, [sp, #0]
 8001e58:	2319      	movs	r3, #25
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	494f      	ldr	r1, [pc, #316]	@ (8001f9c <HAL_I2C_Master_Transmit+0x170>)
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f7ff fd1f 	bl	80018a2 <I2C_WaitOnFlagUntilTimeout>
 8001e64:	2800      	cmp	r0, #0
 8001e66:	f040 8092 	bne.w	8001f8e <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8001e6a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	f000 808f 	beq.w	8001f92 <HAL_I2C_Master_Transmit+0x166>
 8001e74:	2301      	movs	r3, #1
 8001e76:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	f012 0f01 	tst.w	r2, #1
 8001e82:	d103      	bne.n	8001e8c <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e8c:	6822      	ldr	r2, [r4, #0]
 8001e8e:	6813      	ldr	r3, [r2, #0]
 8001e90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001e94:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e96:	2321      	movs	r3, #33	@ 0x21
 8001e98:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e9c:	2310      	movs	r3, #16
 8001e9e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8001ea6:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001eaa:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001eb0:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa0 <HAL_I2C_Master_Transmit+0x174>)
 8001eb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001eb6:	462b      	mov	r3, r5
 8001eb8:	4632      	mov	r2, r6
 8001eba:	4639      	mov	r1, r7
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	f7ff fdb1 	bl	8001a24 <I2C_MasterRequestWrite>
 8001ec2:	4607      	mov	r7, r0
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d166      	bne.n	8001f96 <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9303      	str	r3, [sp, #12]
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	9203      	str	r2, [sp, #12]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	9303      	str	r3, [sp, #12]
 8001ed6:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001ed8:	e011      	b.n	8001efe <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d001      	beq.n	8001ee4 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8001ee0:	2701      	movs	r7, #1
 8001ee2:	e7b4      	b.n	8001e4e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee4:	6822      	ldr	r2, [r4, #0]
 8001ee6:	6813      	ldr	r3, [r2, #0]
 8001ee8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e7f7      	b.n	8001ee0 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef0:	462a      	mov	r2, r5
 8001ef2:	4631      	mov	r1, r6
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7ff fe8b 	bl	8001c10 <I2C_WaitOnBTFFlagUntilTimeout>
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d12e      	bne.n	8001f5c <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8001efe:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d036      	beq.n	8001f72 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f04:	462a      	mov	r2, r5
 8001f06:	4631      	mov	r1, r6
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7ff fde5 	bl	8001ad8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	d1e3      	bne.n	8001eda <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f12:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	7812      	ldrb	r2, [r2, #0]
 8001f18:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001f1a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001f1c:	1c43      	adds	r3, r0, #1
 8001f1e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001f20:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8001f22:	b289      	uxth	r1, r1
 8001f24:	3901      	subs	r1, #1
 8001f26:	b289      	uxth	r1, r1
 8001f28:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f2a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f32:	6822      	ldr	r2, [r4, #0]
 8001f34:	6951      	ldr	r1, [r2, #20]
 8001f36:	f011 0f04 	tst.w	r1, #4
 8001f3a:	d0d9      	beq.n	8001ef0 <HAL_I2C_Master_Transmit+0xc4>
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0d7      	beq.n	8001ef0 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f40:	7843      	ldrb	r3, [r0, #1]
 8001f42:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001f44:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f46:	3301      	adds	r3, #1
 8001f48:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8001f4a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8001f54:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001f56:	3b01      	subs	r3, #1
 8001f58:	8523      	strh	r3, [r4, #40]	@ 0x28
 8001f5a:	e7c9      	b.n	8001ef0 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d001      	beq.n	8001f66 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8001f62:	2701      	movs	r7, #1
 8001f64:	e773      	b.n	8001e4e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f66:	6822      	ldr	r2, [r4, #0]
 8001f68:	6813      	ldr	r3, [r2, #0]
 8001f6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	e7f7      	b.n	8001f62 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f72:	6822      	ldr	r2, [r4, #0]
 8001f74:	6813      	ldr	r3, [r2, #0]
 8001f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f7a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8001f88:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8001f8c:	e75f      	b.n	8001e4e <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8001f8e:	2702      	movs	r7, #2
 8001f90:	e75d      	b.n	8001e4e <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8001f92:	2702      	movs	r7, #2
 8001f94:	e75b      	b.n	8001e4e <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8001f96:	2701      	movs	r7, #1
 8001f98:	e759      	b.n	8001e4e <HAL_I2C_Master_Transmit+0x22>
 8001f9a:	bf00      	nop
 8001f9c:	00100002 	.word	0x00100002
 8001fa0:	ffff0000 	.word	0xffff0000

08001fa4 <HAL_I2C_Mem_Write>:
{
 8001fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	4604      	mov	r4, r0
 8001fac:	460f      	mov	r7, r1
 8001fae:	4690      	mov	r8, r2
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8001fb4:	f7ff fae4 	bl	8001580 <HAL_GetTick>
 8001fb8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fba:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8001fbe:	b2c0      	uxtb	r0, r0
 8001fc0:	2820      	cmp	r0, #32
 8001fc2:	d003      	beq.n	8001fcc <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8001fc4:	2002      	movs	r0, #2
}
 8001fc6:	b003      	add	sp, #12
 8001fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fcc:	9500      	str	r5, [sp, #0]
 8001fce:	2319      	movs	r3, #25
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	494b      	ldr	r1, [pc, #300]	@ (8002100 <HAL_I2C_Mem_Write+0x15c>)
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7ff fc64 	bl	80018a2 <I2C_WaitOnFlagUntilTimeout>
 8001fda:	2800      	cmp	r0, #0
 8001fdc:	f040 8089 	bne.w	80020f2 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8001fe0:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	f000 8086 	beq.w	80020f6 <HAL_I2C_Mem_Write+0x152>
 8001fea:	2301      	movs	r3, #1
 8001fec:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ff0:	6823      	ldr	r3, [r4, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	f012 0f01 	tst.w	r2, #1
 8001ff8:	d103      	bne.n	8002002 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	f042 0201 	orr.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002002:	6822      	ldr	r2, [r4, #0]
 8002004:	6813      	ldr	r3, [r2, #0]
 8002006:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800200a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800200c:	2321      	movs	r3, #33	@ 0x21
 800200e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002012:	2340      	movs	r3, #64	@ 0x40
 8002014:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002018:	2300      	movs	r3, #0
 800201a:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800201c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800201e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002020:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8002024:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002026:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002028:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800202a:	4b36      	ldr	r3, [pc, #216]	@ (8002104 <HAL_I2C_Mem_Write+0x160>)
 800202c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800202e:	9501      	str	r5, [sp, #4]
 8002030:	9600      	str	r6, [sp, #0]
 8002032:	464b      	mov	r3, r9
 8002034:	4642      	mov	r2, r8
 8002036:	4639      	mov	r1, r7
 8002038:	4620      	mov	r0, r4
 800203a:	f7ff fd7d 	bl	8001b38 <I2C_RequestMemoryWrite>
 800203e:	2800      	cmp	r0, #0
 8002040:	d15b      	bne.n	80020fa <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8002042:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002044:	2b00      	cmp	r3, #0
 8002046:	d035      	beq.n	80020b4 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002048:	462a      	mov	r2, r5
 800204a:	4631      	mov	r1, r6
 800204c:	4620      	mov	r0, r4
 800204e:	f7ff fd43 	bl	8001ad8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002052:	bb20      	cbnz	r0, 800209e <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002054:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002056:	6823      	ldr	r3, [r4, #0]
 8002058:	7812      	ldrb	r2, [r2, #0]
 800205a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800205c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800205e:	1c53      	adds	r3, r2, #1
 8002060:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002062:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8002064:	3901      	subs	r1, #1
 8002066:	b289      	uxth	r1, r1
 8002068:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800206a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800206c:	b29b      	uxth	r3, r3
 800206e:	3b01      	subs	r3, #1
 8002070:	b29b      	uxth	r3, r3
 8002072:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	6958      	ldr	r0, [r3, #20]
 8002078:	f010 0f04 	tst.w	r0, #4
 800207c:	d0e1      	beq.n	8002042 <HAL_I2C_Mem_Write+0x9e>
 800207e:	2900      	cmp	r1, #0
 8002080:	d0df      	beq.n	8002042 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002082:	7852      	ldrb	r2, [r2, #1]
 8002084:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002086:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002088:	3301      	adds	r3, #1
 800208a:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 800208c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800208e:	3b01      	subs	r3, #1
 8002090:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002092:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002094:	b29b      	uxth	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	b29b      	uxth	r3, r3
 800209a:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800209c:	e7d1      	b.n	8002042 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d001      	beq.n	80020a8 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 80020a4:	2001      	movs	r0, #1
 80020a6:	e78e      	b.n	8001fc6 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a8:	6822      	ldr	r2, [r4, #0]
 80020aa:	6813      	ldr	r3, [r2, #0]
 80020ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e7f7      	b.n	80020a4 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b4:	462a      	mov	r2, r5
 80020b6:	4631      	mov	r1, r6
 80020b8:	4620      	mov	r0, r4
 80020ba:	f7ff fda9 	bl	8001c10 <I2C_WaitOnBTFFlagUntilTimeout>
 80020be:	b150      	cbz	r0, 80020d6 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 80020c6:	2001      	movs	r0, #1
 80020c8:	e77d      	b.n	8001fc6 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ca:	6822      	ldr	r2, [r4, #0]
 80020cc:	6813      	ldr	r3, [r2, #0]
 80020ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	e7f7      	b.n	80020c6 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d6:	6822      	ldr	r2, [r4, #0]
 80020d8:	6813      	ldr	r3, [r2, #0]
 80020da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020de:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	2320      	movs	r3, #32
 80020e2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80020ec:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80020f0:	e769      	b.n	8001fc6 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 80020f2:	2002      	movs	r0, #2
 80020f4:	e767      	b.n	8001fc6 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 80020f6:	2002      	movs	r0, #2
 80020f8:	e765      	b.n	8001fc6 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80020fa:	2001      	movs	r0, #1
 80020fc:	e763      	b.n	8001fc6 <HAL_I2C_Mem_Write+0x22>
 80020fe:	bf00      	nop
 8002100:	00100002 	.word	0x00100002
 8002104:	ffff0000 	.word	0xffff0000

08002108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002108:	b500      	push	{lr}
 800210a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800210c:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <HAL_MspInit+0x4c>)
 800210e:	699a      	ldr	r2, [r3, #24]
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	619a      	str	r2, [r3, #24]
 8002116:	699a      	ldr	r2, [r3, #24]
 8002118:	f002 0201 	and.w	r2, r2, #1
 800211c:	9200      	str	r2, [sp, #0]
 800211e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002120:	69da      	ldr	r2, [r3, #28]
 8002122:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002126:	61da      	str	r2, [r3, #28]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	210f      	movs	r1, #15
 8002136:	f06f 0001 	mvn.w	r0, #1
 800213a:	f7ff fa6d 	bl	8001618 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800213e:	4a06      	ldr	r2, [pc, #24]	@ (8002158 <HAL_MspInit+0x50>)
 8002140:	6853      	ldr	r3, [r2, #4]
 8002142:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002146:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800214a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214c:	b003      	add	sp, #12
 800214e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	40010000 	.word	0x40010000

0800215c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800215c:	b510      	push	{r4, lr}
 800215e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	2300      	movs	r3, #0
 8002162:	9302      	str	r3, [sp, #8]
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	9304      	str	r3, [sp, #16]
 8002168:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 800216a:	6802      	ldr	r2, [r0, #0]
 800216c:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <HAL_I2C_MspInit+0x58>)
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002172:	b006      	add	sp, #24
 8002174:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002176:	4c10      	ldr	r4, [pc, #64]	@ (80021b8 <HAL_I2C_MspInit+0x5c>)
 8002178:	69a3      	ldr	r3, [r4, #24]
 800217a:	f043 0308 	orr.w	r3, r3, #8
 800217e:	61a3      	str	r3, [r4, #24]
 8002180:	69a3      	ldr	r3, [r4, #24]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800218a:	23c0      	movs	r3, #192	@ 0xc0
 800218c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800218e:	2312      	movs	r3, #18
 8002190:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002196:	a902      	add	r1, sp, #8
 8002198:	4808      	ldr	r0, [pc, #32]	@ (80021bc <HAL_I2C_MspInit+0x60>)
 800219a:	f7ff fa5b 	bl	8001654 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800219e:	69e3      	ldr	r3, [r4, #28]
 80021a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021a4:	61e3      	str	r3, [r4, #28]
 80021a6:	69e3      	ldr	r3, [r4, #28]
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	9b01      	ldr	r3, [sp, #4]
}
 80021b0:	e7df      	b.n	8002172 <HAL_I2C_MspInit+0x16>
 80021b2:	bf00      	nop
 80021b4:	40005400 	.word	0x40005400
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40010c00 	.word	0x40010c00

080021c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c0:	b510      	push	{r4, lr}
 80021c2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	2300      	movs	r3, #0
 80021c6:	9302      	str	r3, [sp, #8]
 80021c8:	9303      	str	r3, [sp, #12]
 80021ca:	9304      	str	r3, [sp, #16]
 80021cc:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 80021ce:	6802      	ldr	r2, [r0, #0]
 80021d0:	4b17      	ldr	r3, [pc, #92]	@ (8002230 <HAL_UART_MspInit+0x70>)
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d001      	beq.n	80021da <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021d6:	b006      	add	sp, #24
 80021d8:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80021da:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021e4:	619a      	str	r2, [r3, #24]
 80021e6:	699a      	ldr	r2, [r3, #24]
 80021e8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80021ec:	9200      	str	r2, [sp, #0]
 80021ee:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	f042 0204 	orr.w	r2, r2, #4
 80021f6:	619a      	str	r2, [r3, #24]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002202:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002206:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800220c:	2303      	movs	r3, #3
 800220e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	4c08      	ldr	r4, [pc, #32]	@ (8002234 <HAL_UART_MspInit+0x74>)
 8002212:	a902      	add	r1, sp, #8
 8002214:	4620      	mov	r0, r4
 8002216:	f7ff fa1d 	bl	8001654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800221a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800221e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002220:	2300      	movs	r3, #0
 8002222:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	a902      	add	r1, sp, #8
 8002228:	4620      	mov	r0, r4
 800222a:	f7ff fa13 	bl	8001654 <HAL_GPIO_Init>
}
 800222e:	e7d2      	b.n	80021d6 <HAL_UART_MspInit+0x16>
 8002230:	40013800 	.word	0x40013800
 8002234:	40010800 	.word	0x40010800

08002238 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002238:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800223a:	4b08      	ldr	r3, [pc, #32]	@ (800225c <RCC_Delay+0x24>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a08      	ldr	r2, [pc, #32]	@ (8002260 <RCC_Delay+0x28>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	0a5b      	lsrs	r3, r3, #9
 8002246:	fb00 f303 	mul.w	r3, r0, r3
 800224a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800224c:	bf00      	nop
  }
  while (Delay --);
 800224e:	9b01      	ldr	r3, [sp, #4]
 8002250:	1e5a      	subs	r2, r3, #1
 8002252:	9201      	str	r2, [sp, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f9      	bne.n	800224c <RCC_Delay+0x14>
}
 8002258:	b002      	add	sp, #8
 800225a:	4770      	bx	lr
 800225c:	20000010 	.word	0x20000010
 8002260:	10624dd3 	.word	0x10624dd3

08002264 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002264:	2800      	cmp	r0, #0
 8002266:	f000 81f1 	beq.w	800264c <HAL_RCC_OscConfig+0x3e8>
{
 800226a:	b570      	push	{r4, r5, r6, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002270:	6803      	ldr	r3, [r0, #0]
 8002272:	f013 0f01 	tst.w	r3, #1
 8002276:	d02c      	beq.n	80022d2 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002278:	4b99      	ldr	r3, [pc, #612]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b04      	cmp	r3, #4
 8002282:	d01d      	beq.n	80022c0 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002284:	4b96      	ldr	r3, [pc, #600]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b08      	cmp	r3, #8
 800228e:	d012      	beq.n	80022b6 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002290:	6863      	ldr	r3, [r4, #4]
 8002292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002296:	d041      	beq.n	800231c <HAL_RCC_OscConfig+0xb8>
 8002298:	2b00      	cmp	r3, #0
 800229a:	d155      	bne.n	8002348 <HAL_RCC_OscConfig+0xe4>
 800229c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022a0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e037      	b.n	8002326 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022b6:	4b8a      	ldr	r3, [pc, #552]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80022be:	d0e7      	beq.n	8002290 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	4b87      	ldr	r3, [pc, #540]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80022c8:	d003      	beq.n	80022d2 <HAL_RCC_OscConfig+0x6e>
 80022ca:	6863      	ldr	r3, [r4, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 81bf 	beq.w	8002650 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	f013 0f02 	tst.w	r3, #2
 80022d8:	d075      	beq.n	80023c6 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022da:	4b81      	ldr	r3, [pc, #516]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f013 0f0c 	tst.w	r3, #12
 80022e2:	d05f      	beq.n	80023a4 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022e4:	4b7e      	ldr	r3, [pc, #504]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 030c 	and.w	r3, r3, #12
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d054      	beq.n	800239a <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022f0:	6923      	ldr	r3, [r4, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 808a 	beq.w	800240c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80022f8:	4b7a      	ldr	r3, [pc, #488]	@ (80024e4 <HAL_RCC_OscConfig+0x280>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022fe:	f7ff f93f 	bl	8001580 <HAL_GetTick>
 8002302:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002304:	4b76      	ldr	r3, [pc, #472]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f013 0f02 	tst.w	r3, #2
 800230c:	d175      	bne.n	80023fa <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230e:	f7ff f937 	bl	8001580 <HAL_GetTick>
 8002312:	1b40      	subs	r0, r0, r5
 8002314:	2802      	cmp	r0, #2
 8002316:	d9f5      	bls.n	8002304 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8002318:	2003      	movs	r0, #3
 800231a:	e19e      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231c:	4a70      	ldr	r2, [pc, #448]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 800231e:	6813      	ldr	r3, [r2, #0]
 8002320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002324:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002326:	6863      	ldr	r3, [r4, #4]
 8002328:	b343      	cbz	r3, 800237c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800232a:	f7ff f929 	bl	8001580 <HAL_GetTick>
 800232e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002330:	4b6b      	ldr	r3, [pc, #428]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002338:	d1cb      	bne.n	80022d2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233a:	f7ff f921 	bl	8001580 <HAL_GetTick>
 800233e:	1b40      	subs	r0, r0, r5
 8002340:	2864      	cmp	r0, #100	@ 0x64
 8002342:	d9f5      	bls.n	8002330 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002344:	2003      	movs	r0, #3
 8002346:	e188      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002348:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800234c:	d009      	beq.n	8002362 <HAL_RCC_OscConfig+0xfe>
 800234e:	4b64      	ldr	r3, [pc, #400]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e7e1      	b.n	8002326 <HAL_RCC_OscConfig+0xc2>
 8002362:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002366:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e7d4      	b.n	8002326 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 800237c:	f7ff f900 	bl	8001580 <HAL_GetTick>
 8002380:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	4b57      	ldr	r3, [pc, #348]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800238a:	d0a2      	beq.n	80022d2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800238c:	f7ff f8f8 	bl	8001580 <HAL_GetTick>
 8002390:	1b40      	subs	r0, r0, r5
 8002392:	2864      	cmp	r0, #100	@ 0x64
 8002394:	d9f5      	bls.n	8002382 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8002396:	2003      	movs	r0, #3
 8002398:	e15f      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800239a:	4b51      	ldr	r3, [pc, #324]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80023a2:	d1a5      	bne.n	80022f0 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a4:	4b4e      	ldr	r3, [pc, #312]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f013 0f02 	tst.w	r3, #2
 80023ac:	d003      	beq.n	80023b6 <HAL_RCC_OscConfig+0x152>
 80023ae:	6923      	ldr	r3, [r4, #16]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	f040 814f 	bne.w	8002654 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b6:	4a4a      	ldr	r2, [pc, #296]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80023b8:	6813      	ldr	r3, [r2, #0]
 80023ba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80023be:	6961      	ldr	r1, [r4, #20]
 80023c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023c4:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	f013 0f08 	tst.w	r3, #8
 80023cc:	d033      	beq.n	8002436 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ce:	69a3      	ldr	r3, [r4, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d05c      	beq.n	800248e <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80023d4:	4b43      	ldr	r3, [pc, #268]	@ (80024e4 <HAL_RCC_OscConfig+0x280>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80023dc:	f7ff f8d0 	bl	8001580 <HAL_GetTick>
 80023e0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e2:	4b3f      	ldr	r3, [pc, #252]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	f013 0f02 	tst.w	r3, #2
 80023ea:	d121      	bne.n	8002430 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ec:	f7ff f8c8 	bl	8001580 <HAL_GetTick>
 80023f0:	1b40      	subs	r0, r0, r5
 80023f2:	2802      	cmp	r0, #2
 80023f4:	d9f5      	bls.n	80023e2 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80023f6:	2003      	movs	r0, #3
 80023f8:	e12f      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fa:	4a39      	ldr	r2, [pc, #228]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80023fc:	6813      	ldr	r3, [r2, #0]
 80023fe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002402:	6961      	ldr	r1, [r4, #20]
 8002404:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e7dc      	b.n	80023c6 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800240c:	4b35      	ldr	r3, [pc, #212]	@ (80024e4 <HAL_RCC_OscConfig+0x280>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002412:	f7ff f8b5 	bl	8001580 <HAL_GetTick>
 8002416:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002418:	4b31      	ldr	r3, [pc, #196]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f013 0f02 	tst.w	r3, #2
 8002420:	d0d1      	beq.n	80023c6 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002422:	f7ff f8ad 	bl	8001580 <HAL_GetTick>
 8002426:	1b40      	subs	r0, r0, r5
 8002428:	2802      	cmp	r0, #2
 800242a:	d9f5      	bls.n	8002418 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 800242c:	2003      	movs	r0, #3
 800242e:	e114      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8002430:	2001      	movs	r0, #1
 8002432:	f7ff ff01 	bl	8002238 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	f013 0f04 	tst.w	r3, #4
 800243c:	f000 8096 	beq.w	800256c <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002440:	4b27      	ldr	r3, [pc, #156]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002448:	d134      	bne.n	80024b4 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	4b25      	ldr	r3, [pc, #148]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 800244c:	69da      	ldr	r2, [r3, #28]
 800244e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002452:	61da      	str	r2, [r3, #28]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800245e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	4b21      	ldr	r3, [pc, #132]	@ (80024e8 <HAL_RCC_OscConfig+0x284>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002468:	d026      	beq.n	80024b8 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800246a:	68e3      	ldr	r3, [r4, #12]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d03d      	beq.n	80024ec <HAL_RCC_OscConfig+0x288>
 8002470:	2b00      	cmp	r3, #0
 8002472:	d153      	bne.n	800251c <HAL_RCC_OscConfig+0x2b8>
 8002474:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002478:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800247c:	6a1a      	ldr	r2, [r3, #32]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	621a      	str	r2, [r3, #32]
 8002484:	6a1a      	ldr	r2, [r3, #32]
 8002486:	f022 0204 	bic.w	r2, r2, #4
 800248a:	621a      	str	r2, [r3, #32]
 800248c:	e033      	b.n	80024f6 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 800248e:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <HAL_RCC_OscConfig+0x280>)
 8002490:	2200      	movs	r2, #0
 8002492:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002496:	f7ff f873 	bl	8001580 <HAL_GetTick>
 800249a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249c:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <HAL_RCC_OscConfig+0x27c>)
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	f013 0f02 	tst.w	r3, #2
 80024a4:	d0c7      	beq.n	8002436 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a6:	f7ff f86b 	bl	8001580 <HAL_GetTick>
 80024aa:	1b40      	subs	r0, r0, r5
 80024ac:	2802      	cmp	r0, #2
 80024ae:	d9f5      	bls.n	800249c <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80024b0:	2003      	movs	r0, #3
 80024b2:	e0d2      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80024b4:	2500      	movs	r5, #0
 80024b6:	e7d3      	b.n	8002460 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b8:	4a0b      	ldr	r2, [pc, #44]	@ (80024e8 <HAL_RCC_OscConfig+0x284>)
 80024ba:	6813      	ldr	r3, [r2, #0]
 80024bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80024c2:	f7ff f85d 	bl	8001580 <HAL_GetTick>
 80024c6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <HAL_RCC_OscConfig+0x284>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80024d0:	d1cb      	bne.n	800246a <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d2:	f7ff f855 	bl	8001580 <HAL_GetTick>
 80024d6:	1b80      	subs	r0, r0, r6
 80024d8:	2864      	cmp	r0, #100	@ 0x64
 80024da:	d9f5      	bls.n	80024c8 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80024dc:	2003      	movs	r0, #3
 80024de:	e0bc      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
 80024e0:	40021000 	.word	0x40021000
 80024e4:	42420000 	.word	0x42420000
 80024e8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ec:	4a5f      	ldr	r2, [pc, #380]	@ (800266c <HAL_RCC_OscConfig+0x408>)
 80024ee:	6a13      	ldr	r3, [r2, #32]
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f6:	68e3      	ldr	r3, [r4, #12]
 80024f8:	b333      	cbz	r3, 8002548 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80024fa:	f7ff f841 	bl	8001580 <HAL_GetTick>
 80024fe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002500:	4b5a      	ldr	r3, [pc, #360]	@ (800266c <HAL_RCC_OscConfig+0x408>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f013 0f02 	tst.w	r3, #2
 8002508:	d12f      	bne.n	800256a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250a:	f7ff f839 	bl	8001580 <HAL_GetTick>
 800250e:	1b80      	subs	r0, r0, r6
 8002510:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002514:	4298      	cmp	r0, r3
 8002516:	d9f3      	bls.n	8002500 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8002518:	2003      	movs	r0, #3
 800251a:	e09e      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251c:	2b05      	cmp	r3, #5
 800251e:	d009      	beq.n	8002534 <HAL_RCC_OscConfig+0x2d0>
 8002520:	4b52      	ldr	r3, [pc, #328]	@ (800266c <HAL_RCC_OscConfig+0x408>)
 8002522:	6a1a      	ldr	r2, [r3, #32]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	621a      	str	r2, [r3, #32]
 800252a:	6a1a      	ldr	r2, [r3, #32]
 800252c:	f022 0204 	bic.w	r2, r2, #4
 8002530:	621a      	str	r2, [r3, #32]
 8002532:	e7e0      	b.n	80024f6 <HAL_RCC_OscConfig+0x292>
 8002534:	4b4d      	ldr	r3, [pc, #308]	@ (800266c <HAL_RCC_OscConfig+0x408>)
 8002536:	6a1a      	ldr	r2, [r3, #32]
 8002538:	f042 0204 	orr.w	r2, r2, #4
 800253c:	621a      	str	r2, [r3, #32]
 800253e:	6a1a      	ldr	r2, [r3, #32]
 8002540:	f042 0201 	orr.w	r2, r2, #1
 8002544:	621a      	str	r2, [r3, #32]
 8002546:	e7d6      	b.n	80024f6 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8002548:	f7ff f81a 	bl	8001580 <HAL_GetTick>
 800254c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254e:	4b47      	ldr	r3, [pc, #284]	@ (800266c <HAL_RCC_OscConfig+0x408>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	f013 0f02 	tst.w	r3, #2
 8002556:	d008      	beq.n	800256a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002558:	f7ff f812 	bl	8001580 <HAL_GetTick>
 800255c:	1b80      	subs	r0, r0, r6
 800255e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002562:	4298      	cmp	r0, r3
 8002564:	d9f3      	bls.n	800254e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8002566:	2003      	movs	r0, #3
 8002568:	e077      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800256a:	b9e5      	cbnz	r5, 80025a6 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256c:	69e3      	ldr	r3, [r4, #28]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d072      	beq.n	8002658 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002572:	4a3e      	ldr	r2, [pc, #248]	@ (800266c <HAL_RCC_OscConfig+0x408>)
 8002574:	6852      	ldr	r2, [r2, #4]
 8002576:	f002 020c 	and.w	r2, r2, #12
 800257a:	2a08      	cmp	r2, #8
 800257c:	d056      	beq.n	800262c <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800257e:	2b02      	cmp	r3, #2
 8002580:	d017      	beq.n	80025b2 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8002582:	4b3b      	ldr	r3, [pc, #236]	@ (8002670 <HAL_RCC_OscConfig+0x40c>)
 8002584:	2200      	movs	r2, #0
 8002586:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002588:	f7fe fffa 	bl	8001580 <HAL_GetTick>
 800258c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258e:	4b37      	ldr	r3, [pc, #220]	@ (800266c <HAL_RCC_OscConfig+0x408>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002596:	d047      	beq.n	8002628 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe fff2 	bl	8001580 <HAL_GetTick>
 800259c:	1b00      	subs	r0, r0, r4
 800259e:	2802      	cmp	r0, #2
 80025a0:	d9f5      	bls.n	800258e <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80025a2:	2003      	movs	r0, #3
 80025a4:	e059      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a6:	4a31      	ldr	r2, [pc, #196]	@ (800266c <HAL_RCC_OscConfig+0x408>)
 80025a8:	69d3      	ldr	r3, [r2, #28]
 80025aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ae:	61d3      	str	r3, [r2, #28]
 80025b0:	e7dc      	b.n	800256c <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002670 <HAL_RCC_OscConfig+0x40c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80025b8:	f7fe ffe2 	bl	8001580 <HAL_GetTick>
 80025bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025be:	4b2b      	ldr	r3, [pc, #172]	@ (800266c <HAL_RCC_OscConfig+0x408>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80025c6:	d006      	beq.n	80025d6 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe ffda 	bl	8001580 <HAL_GetTick>
 80025cc:	1b40      	subs	r0, r0, r5
 80025ce:	2802      	cmp	r0, #2
 80025d0:	d9f5      	bls.n	80025be <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80025d2:	2003      	movs	r0, #3
 80025d4:	e041      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025d6:	6a23      	ldr	r3, [r4, #32]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025dc:	d01a      	beq.n	8002614 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025de:	4923      	ldr	r1, [pc, #140]	@ (800266c <HAL_RCC_OscConfig+0x408>)
 80025e0:	684b      	ldr	r3, [r1, #4]
 80025e2:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 80025e6:	6a22      	ldr	r2, [r4, #32]
 80025e8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80025ea:	4302      	orrs	r2, r0
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80025f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002670 <HAL_RCC_OscConfig+0x40c>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80025f6:	f7fe ffc3 	bl	8001580 <HAL_GetTick>
 80025fa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <HAL_RCC_OscConfig+0x408>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002604:	d10e      	bne.n	8002624 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7fe ffbb 	bl	8001580 <HAL_GetTick>
 800260a:	1b00      	subs	r0, r0, r4
 800260c:	2802      	cmp	r0, #2
 800260e:	d9f5      	bls.n	80025fc <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8002610:	2003      	movs	r0, #3
 8002612:	e022      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002614:	4a15      	ldr	r2, [pc, #84]	@ (800266c <HAL_RCC_OscConfig+0x408>)
 8002616:	6853      	ldr	r3, [r2, #4]
 8002618:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800261c:	68a1      	ldr	r1, [r4, #8]
 800261e:	430b      	orrs	r3, r1
 8002620:	6053      	str	r3, [r2, #4]
 8002622:	e7dc      	b.n	80025de <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8002624:	2000      	movs	r0, #0
 8002626:	e018      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
 8002628:	2000      	movs	r0, #0
 800262a:	e016      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800262c:	2b01      	cmp	r3, #1
 800262e:	d016      	beq.n	800265e <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8002630:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <HAL_RCC_OscConfig+0x408>)
 8002632:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002634:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8002638:	6a22      	ldr	r2, [r4, #32]
 800263a:	4291      	cmp	r1, r2
 800263c:	d111      	bne.n	8002662 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800263e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002642:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002644:	4293      	cmp	r3, r2
 8002646:	d10e      	bne.n	8002666 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8002648:	2000      	movs	r0, #0
 800264a:	e006      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 800264c:	2001      	movs	r0, #1
}
 800264e:	4770      	bx	lr
        return HAL_ERROR;
 8002650:	2001      	movs	r0, #1
 8002652:	e002      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8002654:	2001      	movs	r0, #1
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8002658:	2000      	movs	r0, #0
}
 800265a:	b002      	add	sp, #8
 800265c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800265e:	2001      	movs	r0, #1
 8002660:	e7fb      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8002662:	2001      	movs	r0, #1
 8002664:	e7f9      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
 8002666:	2001      	movs	r0, #1
 8002668:	e7f7      	b.n	800265a <HAL_RCC_OscConfig+0x3f6>
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	42420000 	.word	0x42420000

08002674 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002674:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x40>)
 8002676:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002678:	f003 020c 	and.w	r2, r3, #12
 800267c:	2a08      	cmp	r2, #8
 800267e:	d001      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8002680:	480d      	ldr	r0, [pc, #52]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8002682:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002684:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002688:	490c      	ldr	r1, [pc, #48]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x48>)
 800268a:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800268c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002690:	d00b      	beq.n	80026aa <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002692:	4b08      	ldr	r3, [pc, #32]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x40>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800269a:	4a09      	ldr	r2, [pc, #36]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x4c>)
 800269c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800269e:	4a06      	ldr	r2, [pc, #24]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x44>)
 80026a0:	fb02 f000 	mul.w	r0, r2, r0
 80026a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80026a8:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026aa:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x50>)
 80026ac:	fb03 f000 	mul.w	r0, r3, r0
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	007a1200 	.word	0x007a1200
 80026bc:	08004c80 	.word	0x08004c80
 80026c0:	08004c7c 	.word	0x08004c7c
 80026c4:	003d0900 	.word	0x003d0900

080026c8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80026c8:	2800      	cmp	r0, #0
 80026ca:	f000 80a0 	beq.w	800280e <HAL_RCC_ClockConfig+0x146>
{
 80026ce:	b570      	push	{r4, r5, r6, lr}
 80026d0:	460d      	mov	r5, r1
 80026d2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d4:	4b52      	ldr	r3, [pc, #328]	@ (8002820 <HAL_RCC_ClockConfig+0x158>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	428b      	cmp	r3, r1
 80026de:	d20b      	bcs.n	80026f8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002820 <HAL_RCC_ClockConfig+0x158>)
 80026e2:	6813      	ldr	r3, [r2, #0]
 80026e4:	f023 0307 	bic.w	r3, r3, #7
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ec:	6813      	ldr	r3, [r2, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	428b      	cmp	r3, r1
 80026f4:	f040 808d 	bne.w	8002812 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	f013 0f02 	tst.w	r3, #2
 80026fe:	d017      	beq.n	8002730 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	f013 0f04 	tst.w	r3, #4
 8002704:	d004      	beq.n	8002710 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002706:	4a47      	ldr	r2, [pc, #284]	@ (8002824 <HAL_RCC_ClockConfig+0x15c>)
 8002708:	6853      	ldr	r3, [r2, #4]
 800270a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800270e:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	f013 0f08 	tst.w	r3, #8
 8002716:	d004      	beq.n	8002722 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002718:	4a42      	ldr	r2, [pc, #264]	@ (8002824 <HAL_RCC_ClockConfig+0x15c>)
 800271a:	6853      	ldr	r3, [r2, #4]
 800271c:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002720:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002722:	4a40      	ldr	r2, [pc, #256]	@ (8002824 <HAL_RCC_ClockConfig+0x15c>)
 8002724:	6853      	ldr	r3, [r2, #4]
 8002726:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800272a:	68a1      	ldr	r1, [r4, #8]
 800272c:	430b      	orrs	r3, r1
 800272e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	f013 0f01 	tst.w	r3, #1
 8002736:	d031      	beq.n	800279c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002738:	6863      	ldr	r3, [r4, #4]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d020      	beq.n	8002780 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273e:	2b02      	cmp	r3, #2
 8002740:	d025      	beq.n	800278e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	4a38      	ldr	r2, [pc, #224]	@ (8002824 <HAL_RCC_ClockConfig+0x15c>)
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	f012 0f02 	tst.w	r2, #2
 800274a:	d064      	beq.n	8002816 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274c:	4935      	ldr	r1, [pc, #212]	@ (8002824 <HAL_RCC_ClockConfig+0x15c>)
 800274e:	684a      	ldr	r2, [r1, #4]
 8002750:	f022 0203 	bic.w	r2, r2, #3
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002758:	f7fe ff12 	bl	8001580 <HAL_GetTick>
 800275c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	4b31      	ldr	r3, [pc, #196]	@ (8002824 <HAL_RCC_ClockConfig+0x15c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	6862      	ldr	r2, [r4, #4]
 8002768:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800276c:	d016      	beq.n	800279c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276e:	f7fe ff07 	bl	8001580 <HAL_GetTick>
 8002772:	1b80      	subs	r0, r0, r6
 8002774:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002778:	4298      	cmp	r0, r3
 800277a:	d9f0      	bls.n	800275e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800277c:	2003      	movs	r0, #3
 800277e:	e045      	b.n	800280c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002780:	4a28      	ldr	r2, [pc, #160]	@ (8002824 <HAL_RCC_ClockConfig+0x15c>)
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002788:	d1e0      	bne.n	800274c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800278a:	2001      	movs	r0, #1
 800278c:	e03e      	b.n	800280c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	4a25      	ldr	r2, [pc, #148]	@ (8002824 <HAL_RCC_ClockConfig+0x15c>)
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002796:	d1d9      	bne.n	800274c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002798:	2001      	movs	r0, #1
 800279a:	e037      	b.n	800280c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800279c:	4b20      	ldr	r3, [pc, #128]	@ (8002820 <HAL_RCC_ClockConfig+0x158>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	42ab      	cmp	r3, r5
 80027a6:	d90a      	bls.n	80027be <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002820 <HAL_RCC_ClockConfig+0x158>)
 80027aa:	6813      	ldr	r3, [r2, #0]
 80027ac:	f023 0307 	bic.w	r3, r3, #7
 80027b0:	432b      	orrs	r3, r5
 80027b2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b4:	6813      	ldr	r3, [r2, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	42ab      	cmp	r3, r5
 80027bc:	d12d      	bne.n	800281a <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	f013 0f04 	tst.w	r3, #4
 80027c4:	d006      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c6:	4a17      	ldr	r2, [pc, #92]	@ (8002824 <HAL_RCC_ClockConfig+0x15c>)
 80027c8:	6853      	ldr	r3, [r2, #4]
 80027ca:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80027ce:	68e1      	ldr	r1, [r4, #12]
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	f013 0f08 	tst.w	r3, #8
 80027da:	d007      	beq.n	80027ec <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027dc:	4a11      	ldr	r2, [pc, #68]	@ (8002824 <HAL_RCC_ClockConfig+0x15c>)
 80027de:	6853      	ldr	r3, [r2, #4]
 80027e0:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80027e4:	6921      	ldr	r1, [r4, #16]
 80027e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027ea:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ec:	f7ff ff42 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 80027f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <HAL_RCC_ClockConfig+0x15c>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80027f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002828 <HAL_RCC_ClockConfig+0x160>)
 80027fa:	5cd3      	ldrb	r3, [r2, r3]
 80027fc:	40d8      	lsrs	r0, r3
 80027fe:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <HAL_RCC_ClockConfig+0x164>)
 8002800:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002802:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <HAL_RCC_ClockConfig+0x168>)
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	f000 f9b3 	bl	8002b70 <HAL_InitTick>
  return HAL_OK;
 800280a:	2000      	movs	r0, #0
}
 800280c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800280e:	2001      	movs	r0, #1
}
 8002810:	4770      	bx	lr
    return HAL_ERROR;
 8002812:	2001      	movs	r0, #1
 8002814:	e7fa      	b.n	800280c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8002816:	2001      	movs	r0, #1
 8002818:	e7f8      	b.n	800280c <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800281a:	2001      	movs	r0, #1
 800281c:	e7f6      	b.n	800280c <HAL_RCC_ClockConfig+0x144>
 800281e:	bf00      	nop
 8002820:	40022000 	.word	0x40022000
 8002824:	40021000 	.word	0x40021000
 8002828:	08004c98 	.word	0x08004c98
 800282c:	20000010 	.word	0x20000010
 8002830:	2000000c 	.word	0x2000000c

08002834 <HAL_RCC_GetHCLKFreq>:
}
 8002834:	4b01      	ldr	r3, [pc, #4]	@ (800283c <HAL_RCC_GetHCLKFreq+0x8>)
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000010 	.word	0x20000010

08002840 <HAL_RCC_GetPCLK1Freq>:
{
 8002840:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002842:	f7ff fff7 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002846:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800284e:	4a03      	ldr	r2, [pc, #12]	@ (800285c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002850:	5cd3      	ldrb	r3, [r2, r3]
}
 8002852:	40d8      	lsrs	r0, r3
 8002854:	bd08      	pop	{r3, pc}
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	08004c90 	.word	0x08004c90

08002860 <HAL_RCC_GetPCLK2Freq>:
{
 8002860:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002862:	f7ff ffe7 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002866:	4b04      	ldr	r3, [pc, #16]	@ (8002878 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800286e:	4a03      	ldr	r2, [pc, #12]	@ (800287c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002870:	5cd3      	ldrb	r3, [r2, r3]
}
 8002872:	40d8      	lsrs	r0, r3
 8002874:	bd08      	pop	{r3, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	08004c90 	.word	0x08004c90

08002880 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002880:	230f      	movs	r3, #15
 8002882:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002884:	4b0b      	ldr	r3, [pc, #44]	@ (80028b4 <HAL_RCC_GetClockConfig+0x34>)
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	f002 0203 	and.w	r2, r2, #3
 800288c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002894:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800289c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	08db      	lsrs	r3, r3, #3
 80028a2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80028a6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028a8:	4b03      	ldr	r3, [pc, #12]	@ (80028b8 <HAL_RCC_GetClockConfig+0x38>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	600b      	str	r3, [r1, #0]
}
 80028b2:	4770      	bx	lr
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40022000 	.word	0x40022000

080028bc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028c0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d127      	bne.n	800291a <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ca:	2302      	movs	r3, #2
 80028cc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028d0:	6802      	ldr	r2, [r0, #0]
 80028d2:	68d3      	ldr	r3, [r2, #12]
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028da:	6803      	ldr	r3, [r0, #0]
 80028dc:	4a11      	ldr	r2, [pc, #68]	@ (8002924 <HAL_TIM_Base_Start_IT+0x64>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d010      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x44>
 80028e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e6:	d00d      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x44>
 80028e8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d009      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x44>
 80028f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d005      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002900:	2000      	movs	r0, #0
 8002902:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290a:	2a06      	cmp	r2, #6
 800290c:	d007      	beq.n	800291e <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	f042 0201 	orr.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002916:	2000      	movs	r0, #0
 8002918:	4770      	bx	lr
    return HAL_ERROR;
 800291a:	2001      	movs	r0, #1
 800291c:	4770      	bx	lr
  return HAL_OK;
 800291e:	2000      	movs	r0, #0
}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40012c00 	.word	0x40012c00

08002928 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002928:	4770      	bx	lr

0800292a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800292a:	4770      	bx	lr

0800292c <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800292c:	4770      	bx	lr

0800292e <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800292e:	4770      	bx	lr

08002930 <HAL_TIM_IRQHandler>:
{
 8002930:	b570      	push	{r4, r5, r6, lr}
 8002932:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8002934:	6803      	ldr	r3, [r0, #0]
 8002936:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002938:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800293a:	f015 0f02 	tst.w	r5, #2
 800293e:	d010      	beq.n	8002962 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002940:	f016 0f02 	tst.w	r6, #2
 8002944:	d00d      	beq.n	8002962 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002946:	f06f 0202 	mvn.w	r2, #2
 800294a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800294c:	2301      	movs	r3, #1
 800294e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002950:	6803      	ldr	r3, [r0, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f013 0f03 	tst.w	r3, #3
 8002958:	d05e      	beq.n	8002a18 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 800295a:	f7ff ffe6 	bl	800292a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	2300      	movs	r3, #0
 8002960:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002962:	f015 0f04 	tst.w	r5, #4
 8002966:	d012      	beq.n	800298e <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002968:	f016 0f04 	tst.w	r6, #4
 800296c:	d00f      	beq.n	800298e <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	f06f 0204 	mvn.w	r2, #4
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002976:	2302      	movs	r3, #2
 8002978:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800297a:	6823      	ldr	r3, [r4, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002982:	d04f      	beq.n	8002a24 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8002984:	4620      	mov	r0, r4
 8002986:	f7ff ffd0 	bl	800292a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	2300      	movs	r3, #0
 800298c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800298e:	f015 0f08 	tst.w	r5, #8
 8002992:	d012      	beq.n	80029ba <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002994:	f016 0f08 	tst.w	r6, #8
 8002998:	d00f      	beq.n	80029ba <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	f06f 0208 	mvn.w	r2, #8
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029a2:	2304      	movs	r3, #4
 80029a4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f013 0f03 	tst.w	r3, #3
 80029ae:	d040      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7ff ffba 	bl	800292a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b6:	2300      	movs	r3, #0
 80029b8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029ba:	f015 0f10 	tst.w	r5, #16
 80029be:	d012      	beq.n	80029e6 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029c0:	f016 0f10 	tst.w	r6, #16
 80029c4:	d00f      	beq.n	80029e6 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	f06f 0210 	mvn.w	r2, #16
 80029cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ce:	2308      	movs	r3, #8
 80029d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80029da:	d031      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80029dc:	4620      	mov	r0, r4
 80029de:	f7ff ffa4 	bl	800292a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	2300      	movs	r3, #0
 80029e4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029e6:	f015 0f01 	tst.w	r5, #1
 80029ea:	d002      	beq.n	80029f2 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029ec:	f016 0f01 	tst.w	r6, #1
 80029f0:	d12d      	bne.n	8002a4e <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029f2:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80029f6:	d002      	beq.n	80029fe <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029f8:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80029fc:	d12f      	bne.n	8002a5e <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029fe:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8002a02:	d002      	beq.n	8002a0a <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a04:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8002a08:	d131      	bne.n	8002a6e <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a0a:	f015 0f20 	tst.w	r5, #32
 8002a0e:	d002      	beq.n	8002a16 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a10:	f016 0f20 	tst.w	r6, #32
 8002a14:	d133      	bne.n	8002a7e <HAL_TIM_IRQHandler+0x14e>
}
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a18:	f7ff ff86 	bl	8002928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f7ff ff85 	bl	800292c <HAL_TIM_PWM_PulseFinishedCallback>
 8002a22:	e79c      	b.n	800295e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a24:	4620      	mov	r0, r4
 8002a26:	f7ff ff7f 	bl	8002928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f7ff ff7e 	bl	800292c <HAL_TIM_PWM_PulseFinishedCallback>
 8002a30:	e7ab      	b.n	800298a <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	4620      	mov	r0, r4
 8002a34:	f7ff ff78 	bl	8002928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f7ff ff77 	bl	800292c <HAL_TIM_PWM_PulseFinishedCallback>
 8002a3e:	e7ba      	b.n	80029b6 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a40:	4620      	mov	r0, r4
 8002a42:	f7ff ff71 	bl	8002928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a46:	4620      	mov	r0, r4
 8002a48:	f7ff ff70 	bl	800292c <HAL_TIM_PWM_PulseFinishedCallback>
 8002a4c:	e7c9      	b.n	80029e2 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	f06f 0201 	mvn.w	r2, #1
 8002a54:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a56:	4620      	mov	r0, r4
 8002a58:	f7fe fa62 	bl	8000f20 <HAL_TIM_PeriodElapsedCallback>
 8002a5c:	e7c9      	b.n	80029f2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a64:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002a66:	4620      	mov	r0, r4
 8002a68:	f000 f881 	bl	8002b6e <HAL_TIMEx_BreakCallback>
 8002a6c:	e7c7      	b.n	80029fe <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a74:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002a76:	4620      	mov	r0, r4
 8002a78:	f7ff ff59 	bl	800292e <HAL_TIM_TriggerCallback>
 8002a7c:	e7c5      	b.n	8002a0a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	f06f 0220 	mvn.w	r2, #32
 8002a84:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002a86:	4620      	mov	r0, r4
 8002a88:	f000 f870 	bl	8002b6c <HAL_TIMEx_CommutCallback>
}
 8002a8c:	e7c3      	b.n	8002a16 <HAL_TIM_IRQHandler+0xe6>
	...

08002a90 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a90:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a92:	4a1f      	ldr	r2, [pc, #124]	@ (8002b10 <TIM_Base_SetConfig+0x80>)
 8002a94:	4290      	cmp	r0, r2
 8002a96:	d00a      	beq.n	8002aae <TIM_Base_SetConfig+0x1e>
 8002a98:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002a9c:	d007      	beq.n	8002aae <TIM_Base_SetConfig+0x1e>
 8002a9e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002aa2:	4290      	cmp	r0, r2
 8002aa4:	d003      	beq.n	8002aae <TIM_Base_SetConfig+0x1e>
 8002aa6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002aaa:	4290      	cmp	r0, r2
 8002aac:	d103      	bne.n	8002ab6 <TIM_Base_SetConfig+0x26>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ab2:	684a      	ldr	r2, [r1, #4]
 8002ab4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ab6:	4a16      	ldr	r2, [pc, #88]	@ (8002b10 <TIM_Base_SetConfig+0x80>)
 8002ab8:	4290      	cmp	r0, r2
 8002aba:	d00a      	beq.n	8002ad2 <TIM_Base_SetConfig+0x42>
 8002abc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002ac0:	d007      	beq.n	8002ad2 <TIM_Base_SetConfig+0x42>
 8002ac2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002ac6:	4290      	cmp	r0, r2
 8002ac8:	d003      	beq.n	8002ad2 <TIM_Base_SetConfig+0x42>
 8002aca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002ace:	4290      	cmp	r0, r2
 8002ad0:	d103      	bne.n	8002ada <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ad6:	68ca      	ldr	r2, [r1, #12]
 8002ad8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ade:	694a      	ldr	r2, [r1, #20]
 8002ae0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002ae2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ae4:	688b      	ldr	r3, [r1, #8]
 8002ae6:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae8:	680b      	ldr	r3, [r1, #0]
 8002aea:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aec:	4b08      	ldr	r3, [pc, #32]	@ (8002b10 <TIM_Base_SetConfig+0x80>)
 8002aee:	4298      	cmp	r0, r3
 8002af0:	d00a      	beq.n	8002b08 <TIM_Base_SetConfig+0x78>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002af2:	2301      	movs	r3, #1
 8002af4:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002af6:	6903      	ldr	r3, [r0, #16]
 8002af8:	f013 0f01 	tst.w	r3, #1
 8002afc:	d003      	beq.n	8002b06 <TIM_Base_SetConfig+0x76>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002afe:	6903      	ldr	r3, [r0, #16]
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	6103      	str	r3, [r0, #16]
  }
}
 8002b06:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002b08:	690b      	ldr	r3, [r1, #16]
 8002b0a:	6303      	str	r3, [r0, #48]	@ 0x30
 8002b0c:	e7f1      	b.n	8002af2 <TIM_Base_SetConfig+0x62>
 8002b0e:	bf00      	nop
 8002b10:	40012c00 	.word	0x40012c00

08002b14 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002b14:	b340      	cbz	r0, 8002b68 <HAL_TIM_Base_Init+0x54>
{
 8002b16:	b510      	push	{r4, lr}
 8002b18:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002b1e:	b1f3      	cbz	r3, 8002b5e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	2302      	movs	r3, #2
 8002b22:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b26:	4621      	mov	r1, r4
 8002b28:	f851 0b04 	ldr.w	r0, [r1], #4
 8002b2c:	f7ff ffb0 	bl	8002a90 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b30:	2301      	movs	r3, #1
 8002b32:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b36:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002b3a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002b3e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002b42:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b46:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b4e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002b52:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002b56:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002b5a:	2000      	movs	r0, #0
}
 8002b5c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002b5e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002b62:	f7ff feab 	bl	80028bc <HAL_TIM_Base_MspInit>
 8002b66:	e7db      	b.n	8002b20 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002b68:	2001      	movs	r0, #1
}
 8002b6a:	4770      	bx	lr

08002b6c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b6c:	4770      	bx	lr

08002b6e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b6e:	4770      	bx	lr

08002b70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b70:	b530      	push	{r4, r5, lr}
 8002b72:	b089      	sub	sp, #36	@ 0x24
 8002b74:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002b76:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf0 <HAL_InitTick+0x80>)
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b7e:	619a      	str	r2, [r3, #24]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b8a:	a902      	add	r1, sp, #8
 8002b8c:	a803      	add	r0, sp, #12
 8002b8e:	f7ff fe77 	bl	8002880 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002b92:	f7ff fe65 	bl	8002860 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b96:	4a17      	ldr	r2, [pc, #92]	@ (8002bf4 <HAL_InitTick+0x84>)
 8002b98:	fba2 2300 	umull	r2, r3, r2, r0
 8002b9c:	0c9b      	lsrs	r3, r3, #18
 8002b9e:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002ba0:	4815      	ldr	r0, [pc, #84]	@ (8002bf8 <HAL_InitTick+0x88>)
 8002ba2:	4a16      	ldr	r2, [pc, #88]	@ (8002bfc <HAL_InitTick+0x8c>)
 8002ba4:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002ba6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002baa:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002bac:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb2:	6083      	str	r3, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb4:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002bb6:	f7ff ffad 	bl	8002b14 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8002bba:	4605      	mov	r5, r0
 8002bbc:	b110      	cbz	r0, 8002bc4 <HAL_InitTick+0x54>
    }
  }

 /* Return function status */
  return status;
}
 8002bbe:	4628      	mov	r0, r5
 8002bc0:	b009      	add	sp, #36	@ 0x24
 8002bc2:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002bc4:	480c      	ldr	r0, [pc, #48]	@ (8002bf8 <HAL_InitTick+0x88>)
 8002bc6:	f7ff fe7b 	bl	80028c0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8002bca:	4605      	mov	r5, r0
 8002bcc:	2800      	cmp	r0, #0
 8002bce:	d1f6      	bne.n	8002bbe <HAL_InitTick+0x4e>
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002bd0:	2019      	movs	r0, #25
 8002bd2:	f7fe fd31 	bl	8001638 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd6:	2c0f      	cmp	r4, #15
 8002bd8:	d901      	bls.n	8002bde <HAL_InitTick+0x6e>
        status = HAL_ERROR;
 8002bda:	2501      	movs	r5, #1
 8002bdc:	e7ef      	b.n	8002bbe <HAL_InitTick+0x4e>
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8002bde:	2200      	movs	r2, #0
 8002be0:	4621      	mov	r1, r4
 8002be2:	2019      	movs	r0, #25
 8002be4:	f7fe fd18 	bl	8001618 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002be8:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <HAL_InitTick+0x90>)
 8002bea:	601c      	str	r4, [r3, #0]
 8002bec:	e7e7      	b.n	8002bbe <HAL_InitTick+0x4e>
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	431bde83 	.word	0x431bde83
 8002bf8:	200030fc 	.word	0x200030fc
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	2000000c 	.word	0x2000000c

08002c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c04:	b510      	push	{r4, lr}
 8002c06:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c08:	6802      	ldr	r2, [r0, #0]
 8002c0a:	6913      	ldr	r3, [r2, #16]
 8002c0c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c10:	68c1      	ldr	r1, [r0, #12]
 8002c12:	430b      	orrs	r3, r1
 8002c14:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c16:	6883      	ldr	r3, [r0, #8]
 8002c18:	6902      	ldr	r2, [r0, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	6942      	ldr	r2, [r0, #20]
 8002c1e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002c20:	6801      	ldr	r1, [r0, #0]
 8002c22:	68cb      	ldr	r3, [r1, #12]
 8002c24:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c28:	f023 030c 	bic.w	r3, r3, #12
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c30:	6802      	ldr	r2, [r0, #0]
 8002c32:	6953      	ldr	r3, [r2, #20]
 8002c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c38:	6981      	ldr	r1, [r0, #24]
 8002c3a:	430b      	orrs	r3, r1
 8002c3c:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8002c3e:	6802      	ldr	r2, [r0, #0]
 8002c40:	4b13      	ldr	r3, [pc, #76]	@ (8002c90 <UART_SetConfig+0x8c>)
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d020      	beq.n	8002c88 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c46:	f7ff fdfb 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 8002c4a:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c4c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002c50:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002c54:	6863      	ldr	r3, [r4, #4]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c5c:	480d      	ldr	r0, [pc, #52]	@ (8002c94 <UART_SetConfig+0x90>)
 8002c5e:	fba0 3102 	umull	r3, r1, r0, r2
 8002c62:	0949      	lsrs	r1, r1, #5
 8002c64:	2364      	movs	r3, #100	@ 0x64
 8002c66:	fb03 2311 	mls	r3, r3, r1, r2
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	3332      	adds	r3, #50	@ 0x32
 8002c6e:	fba0 0303 	umull	r0, r3, r0, r3
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c78:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	6821      	ldr	r1, [r4, #0]
 8002c82:	4413      	add	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c86:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c88:	f7ff fdea 	bl	8002860 <HAL_RCC_GetPCLK2Freq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	e7dd      	b.n	8002c4c <UART_SetConfig+0x48>
 8002c90:	40013800 	.word	0x40013800
 8002c94:	51eb851f 	.word	0x51eb851f

08002c98 <HAL_UART_Init>:
  if (huart == NULL)
 8002c98:	b360      	cbz	r0, 8002cf4 <HAL_UART_Init+0x5c>
{
 8002c9a:	b510      	push	{r4, lr}
 8002c9c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c9e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002ca2:	b313      	cbz	r3, 8002cea <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002ca4:	2324      	movs	r3, #36	@ 0x24
 8002ca6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002caa:	6822      	ldr	r2, [r4, #0]
 8002cac:	68d3      	ldr	r3, [r2, #12]
 8002cae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cb2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f7ff ffa5 	bl	8002c04 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cba:	6822      	ldr	r2, [r4, #0]
 8002cbc:	6913      	ldr	r3, [r2, #16]
 8002cbe:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002cc2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cc4:	6822      	ldr	r2, [r4, #0]
 8002cc6:	6953      	ldr	r3, [r2, #20]
 8002cc8:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002ccc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002cce:	6822      	ldr	r2, [r4, #0]
 8002cd0:	68d3      	ldr	r3, [r2, #12]
 8002cd2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cd6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd8:	2000      	movs	r0, #0
 8002cda:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cdc:	2320      	movs	r3, #32
 8002cde:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ce2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ce6:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002ce8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002cea:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002cee:	f7ff fa67 	bl	80021c0 <HAL_UART_MspInit>
 8002cf2:	e7d7      	b.n	8002ca4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002cf4:	2001      	movs	r0, #1
}
 8002cf6:	4770      	bx	lr

08002cf8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <NMI_Handler>

08002cfa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cfa:	e7fe      	b.n	8002cfa <HardFault_Handler>

08002cfc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cfc:	e7fe      	b.n	8002cfc <MemManage_Handler>

08002cfe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cfe:	e7fe      	b.n	8002cfe <BusFault_Handler>

08002d00 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d00:	e7fe      	b.n	8002d00 <UsageFault_Handler>

08002d02 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d02:	4770      	bx	lr

08002d04 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002d04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d06:	4802      	ldr	r0, [pc, #8]	@ (8002d10 <TIM1_UP_IRQHandler+0xc>)
 8002d08:	f7ff fe12 	bl	8002930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002d0c:	bd08      	pop	{r3, pc}
 8002d0e:	bf00      	nop
 8002d10:	200030fc 	.word	0x200030fc

08002d14 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d14:	4770      	bx	lr
	...

08002d18 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d18:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <prvResetNextTaskUnblockTime+0x24>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b923      	cbnz	r3, 8002d2a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d20:	4b07      	ldr	r3, [pc, #28]	@ (8002d40 <prvResetNextTaskUnblockTime+0x28>)
 8002d22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d2a:	4b04      	ldr	r3, [pc, #16]	@ (8002d3c <prvResetNextTaskUnblockTime+0x24>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	4b02      	ldr	r3, [pc, #8]	@ (8002d40 <prvResetNextTaskUnblockTime+0x28>)
 8002d36:	601a      	str	r2, [r3, #0]
	}
}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	200031b4 	.word	0x200031b4
 8002d40:	2000314c 	.word	0x2000314c

08002d44 <prvInitialiseNewTask>:
{
 8002d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d48:	4607      	mov	r7, r0
 8002d4a:	4698      	mov	r8, r3
 8002d4c:	9d08      	ldr	r5, [sp, #32]
 8002d4e:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8002d52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d54:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8002d56:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8002d5a:	3a01      	subs	r2, #1
 8002d5c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d60:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8002d64:	b3c1      	cbz	r1, 8002dd8 <prvInitialiseNewTask+0x94>
 8002d66:	4608      	mov	r0, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d68:	f04f 0c00 	mov.w	ip, #0
 8002d6c:	f1bc 0f0f 	cmp.w	ip, #15
 8002d70:	d809      	bhi.n	8002d86 <prvInitialiseNewTask+0x42>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d72:	f810 200c 	ldrb.w	r2, [r0, ip]
 8002d76:	eb04 030c 	add.w	r3, r4, ip
 8002d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8002d7e:	b112      	cbz	r2, 8002d86 <prvInitialiseNewTask+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d80:	f10c 0c01 	add.w	ip, ip, #1
 8002d84:	e7f2      	b.n	8002d6c <prvInitialiseNewTask+0x28>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d86:	2300      	movs	r3, #0
 8002d88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d8c:	2d06      	cmp	r5, #6
 8002d8e:	d900      	bls.n	8002d92 <prvInitialiseNewTask+0x4e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d90:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8002d92:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002d94:	6465      	str	r5, [r4, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002d96:	f04f 0a00 	mov.w	sl, #0
 8002d9a:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d9e:	1d20      	adds	r0, r4, #4
 8002da0:	f7fe f85d 	bl	8000e5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002da4:	f104 0018 	add.w	r0, r4, #24
 8002da8:	f7fe f859 	bl	8000e5e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dac:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dae:	f1c5 0507 	rsb	r5, r5, #7
 8002db2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002db4:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8002db6:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002dba:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dbe:	4642      	mov	r2, r8
 8002dc0:	4639      	mov	r1, r7
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	f7fe f9ba 	bl	800113c <pxPortInitialiseStack>
 8002dc8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8002dca:	f1b9 0f00 	cmp.w	r9, #0
 8002dce:	d001      	beq.n	8002dd4 <prvInitialiseNewTask+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002dd0:	f8c9 4000 	str.w	r4, [r9]
}
 8002dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8002dde:	e7d5      	b.n	8002d8c <prvInitialiseNewTask+0x48>

08002de0 <prvInitialiseTaskLists>:
{
 8002de0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002de2:	2400      	movs	r4, #0
 8002de4:	e007      	b.n	8002df6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002de6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002dea:	0093      	lsls	r3, r2, #2
 8002dec:	480e      	ldr	r0, [pc, #56]	@ (8002e28 <prvInitialiseTaskLists+0x48>)
 8002dee:	4418      	add	r0, r3
 8002df0:	f7fe f82a 	bl	8000e48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002df4:	3401      	adds	r4, #1
 8002df6:	2c06      	cmp	r4, #6
 8002df8:	d9f5      	bls.n	8002de6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8002dfa:	4d0c      	ldr	r5, [pc, #48]	@ (8002e2c <prvInitialiseTaskLists+0x4c>)
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	f7fe f823 	bl	8000e48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002e02:	4c0b      	ldr	r4, [pc, #44]	@ (8002e30 <prvInitialiseTaskLists+0x50>)
 8002e04:	4620      	mov	r0, r4
 8002e06:	f7fe f81f 	bl	8000e48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002e0a:	480a      	ldr	r0, [pc, #40]	@ (8002e34 <prvInitialiseTaskLists+0x54>)
 8002e0c:	f7fe f81c 	bl	8000e48 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002e10:	4809      	ldr	r0, [pc, #36]	@ (8002e38 <prvInitialiseTaskLists+0x58>)
 8002e12:	f7fe f819 	bl	8000e48 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002e16:	4809      	ldr	r0, [pc, #36]	@ (8002e3c <prvInitialiseTaskLists+0x5c>)
 8002e18:	f7fe f816 	bl	8000e48 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002e1c:	4b08      	ldr	r3, [pc, #32]	@ (8002e40 <prvInitialiseTaskLists+0x60>)
 8002e1e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e20:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <prvInitialiseTaskLists+0x64>)
 8002e22:	601c      	str	r4, [r3, #0]
}
 8002e24:	bd38      	pop	{r3, r4, r5, pc}
 8002e26:	bf00      	nop
 8002e28:	200031e0 	.word	0x200031e0
 8002e2c:	200031cc 	.word	0x200031cc
 8002e30:	200031b8 	.word	0x200031b8
 8002e34:	2000319c 	.word	0x2000319c
 8002e38:	20003188 	.word	0x20003188
 8002e3c:	20003170 	.word	0x20003170
 8002e40:	200031b4 	.word	0x200031b4
 8002e44:	200031b0 	.word	0x200031b0

08002e48 <prvAddNewTaskToReadyList>:
{
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002e4c:	f7fe f99a 	bl	8001184 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002e50:	4a21      	ldr	r2, [pc, #132]	@ (8002ed8 <prvAddNewTaskToReadyList+0x90>)
 8002e52:	6813      	ldr	r3, [r2, #0]
 8002e54:	3301      	adds	r3, #1
 8002e56:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e58:	4b20      	ldr	r3, [pc, #128]	@ (8002edc <prvAddNewTaskToReadyList+0x94>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	b15b      	cbz	r3, 8002e76 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8002e5e:	4b20      	ldr	r3, [pc, #128]	@ (8002ee0 <prvAddNewTaskToReadyList+0x98>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	b96b      	cbnz	r3, 8002e80 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e64:	4b1d      	ldr	r3, [pc, #116]	@ (8002edc <prvAddNewTaskToReadyList+0x94>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e6a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d807      	bhi.n	8002e80 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8002e70:	4b1a      	ldr	r3, [pc, #104]	@ (8002edc <prvAddNewTaskToReadyList+0x94>)
 8002e72:	601c      	str	r4, [r3, #0]
 8002e74:	e004      	b.n	8002e80 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8002e76:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <prvAddNewTaskToReadyList+0x94>)
 8002e78:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e7a:	6813      	ldr	r3, [r2, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d028      	beq.n	8002ed2 <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 8002e80:	4a18      	ldr	r2, [pc, #96]	@ (8002ee4 <prvAddNewTaskToReadyList+0x9c>)
 8002e82:	6813      	ldr	r3, [r2, #0]
 8002e84:	3301      	adds	r3, #1
 8002e86:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002e88:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	4083      	lsls	r3, r0
 8002e8e:	4a16      	ldr	r2, [pc, #88]	@ (8002ee8 <prvAddNewTaskToReadyList+0xa0>)
 8002e90:	6811      	ldr	r1, [r2, #0]
 8002e92:	430b      	orrs	r3, r1
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e9a:	1d21      	adds	r1, r4, #4
 8002e9c:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <prvAddNewTaskToReadyList+0xa4>)
 8002e9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002ea2:	f7fd ffdf 	bl	8000e64 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002ea6:	f7fe f98f 	bl	80011c8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <prvAddNewTaskToReadyList+0x98>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	b17b      	cbz	r3, 8002ed0 <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <prvAddNewTaskToReadyList+0x94>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d209      	bcs.n	8002ed0 <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 8002ebc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ec4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	f3bf 8f6f 	isb	sy
}
 8002ed0:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8002ed2:	f7ff ff85 	bl	8002de0 <prvInitialiseTaskLists>
 8002ed6:	e7d3      	b.n	8002e80 <prvAddNewTaskToReadyList+0x38>
 8002ed8:	2000316c 	.word	0x2000316c
 8002edc:	2000326c 	.word	0x2000326c
 8002ee0:	20003160 	.word	0x20003160
 8002ee4:	20003150 	.word	0x20003150
 8002ee8:	20003164 	.word	0x20003164
 8002eec:	200031e0 	.word	0x200031e0

08002ef0 <prvDeleteTCB>:
	{
 8002ef0:	b510      	push	{r4, lr}
 8002ef2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ef4:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 8002ef8:	b163      	cbz	r3, 8002f14 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d011      	beq.n	8002f22 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d00e      	beq.n	8002f20 <prvDeleteTCB+0x30>
 8002f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	e7fe      	b.n	8002f12 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8002f14:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002f16:	f7fd ff59 	bl	8000dcc <vPortFree>
				vPortFree( pxTCB );
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f7fd ff56 	bl	8000dcc <vPortFree>
	}
 8002f20:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8002f22:	f7fd ff53 	bl	8000dcc <vPortFree>
 8002f26:	e7fb      	b.n	8002f20 <prvDeleteTCB+0x30>

08002f28 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f28:	4b0f      	ldr	r3, [pc, #60]	@ (8002f68 <prvCheckTasksWaitingTermination+0x40>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	b1d3      	cbz	r3, 8002f64 <prvCheckTasksWaitingTermination+0x3c>
{
 8002f2e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8002f30:	f7fe f928 	bl	8001184 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f34:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <prvCheckTasksWaitingTermination+0x44>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f3a:	1d20      	adds	r0, r4, #4
 8002f3c:	f7fd ffb6 	bl	8000eac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002f40:	4a0b      	ldr	r2, [pc, #44]	@ (8002f70 <prvCheckTasksWaitingTermination+0x48>)
 8002f42:	6813      	ldr	r3, [r2, #0]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002f48:	4a07      	ldr	r2, [pc, #28]	@ (8002f68 <prvCheckTasksWaitingTermination+0x40>)
 8002f4a:	6813      	ldr	r3, [r2, #0]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8002f50:	f7fe f93a 	bl	80011c8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7ff ffcb 	bl	8002ef0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f5a:	4b03      	ldr	r3, [pc, #12]	@ (8002f68 <prvCheckTasksWaitingTermination+0x40>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e6      	bne.n	8002f30 <prvCheckTasksWaitingTermination+0x8>
}
 8002f62:	bd10      	pop	{r4, pc}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20003184 	.word	0x20003184
 8002f6c:	20003188 	.word	0x20003188
 8002f70:	2000316c 	.word	0x2000316c

08002f74 <prvIdleTask>:
{
 8002f74:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8002f76:	f7ff ffd7 	bl	8002f28 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f7a:	4b07      	ldr	r3, [pc, #28]	@ (8002f98 <prvIdleTask+0x24>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d9f9      	bls.n	8002f76 <prvIdleTask+0x2>
				taskYIELD();
 8002f82:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	e7ee      	b.n	8002f76 <prvIdleTask+0x2>
 8002f98:	200031e0 	.word	0x200031e0

08002f9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002f9c:	b570      	push	{r4, r5, r6, lr}
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8003018 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002fa4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800301c <prvAddCurrentTaskToDelayedList+0x80>)
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	3004      	adds	r0, #4
 8002fac:	f7fd ff7e 	bl	8000eac <uxListRemove>
 8002fb0:	b948      	cbnz	r0, 8002fc6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800301c <prvAddCurrentTaskToDelayedList+0x80>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb8:	2201      	movs	r2, #1
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	4918      	ldr	r1, [pc, #96]	@ (8003020 <prvAddCurrentTaskToDelayedList+0x84>)
 8002fbe:	680b      	ldr	r3, [r1, #0]
 8002fc0:	ea23 0302 	bic.w	r3, r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002fc6:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8002fca:	d00d      	beq.n	8002fe8 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002fcc:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002fce:	4b13      	ldr	r3, [pc, #76]	@ (800301c <prvAddCurrentTaskToDelayedList+0x80>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002fd4:	42a6      	cmp	r6, r4
 8002fd6:	d910      	bls.n	8002ffa <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fd8:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <prvAddCurrentTaskToDelayedList+0x88>)
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800301c <prvAddCurrentTaskToDelayedList+0x80>)
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	3104      	adds	r1, #4
 8002fe2:	f7fd ff4a 	bl	8000e7a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002fe6:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002fe8:	2d00      	cmp	r5, #0
 8002fea:	d0ef      	beq.n	8002fcc <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fec:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <prvAddCurrentTaskToDelayedList+0x80>)
 8002fee:	6819      	ldr	r1, [r3, #0]
 8002ff0:	3104      	adds	r1, #4
 8002ff2:	480d      	ldr	r0, [pc, #52]	@ (8003028 <prvAddCurrentTaskToDelayedList+0x8c>)
 8002ff4:	f7fd ff36 	bl	8000e64 <vListInsertEnd>
 8002ff8:	e7f5      	b.n	8002fe6 <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <prvAddCurrentTaskToDelayedList+0x90>)
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	4b07      	ldr	r3, [pc, #28]	@ (800301c <prvAddCurrentTaskToDelayedList+0x80>)
 8003000:	6819      	ldr	r1, [r3, #0]
 8003002:	3104      	adds	r1, #4
 8003004:	f7fd ff39 	bl	8000e7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003008:	4b09      	ldr	r3, [pc, #36]	@ (8003030 <prvAddCurrentTaskToDelayedList+0x94>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	42a3      	cmp	r3, r4
 800300e:	d9ea      	bls.n	8002fe6 <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 8003010:	4b07      	ldr	r3, [pc, #28]	@ (8003030 <prvAddCurrentTaskToDelayedList+0x94>)
 8003012:	601c      	str	r4, [r3, #0]
}
 8003014:	e7e7      	b.n	8002fe6 <prvAddCurrentTaskToDelayedList+0x4a>
 8003016:	bf00      	nop
 8003018:	20003168 	.word	0x20003168
 800301c:	2000326c 	.word	0x2000326c
 8003020:	20003164 	.word	0x20003164
 8003024:	200031b0 	.word	0x200031b0
 8003028:	20003170 	.word	0x20003170
 800302c:	200031b4 	.word	0x200031b4
 8003030:	2000314c 	.word	0x2000314c

08003034 <xTaskCreateStatic>:
	{
 8003034:	b530      	push	{r4, r5, lr}
 8003036:	b087      	sub	sp, #28
 8003038:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800303a:	b17c      	cbz	r4, 800305c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800303c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800303e:	b1b5      	cbz	r5, 800306e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003040:	2554      	movs	r5, #84	@ 0x54
 8003042:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003044:	9d04      	ldr	r5, [sp, #16]
 8003046:	2d54      	cmp	r5, #84	@ 0x54
 8003048:	d01a      	beq.n	8003080 <xTaskCreateStatic+0x4c>
 800304a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	e7fe      	b.n	800305a <xTaskCreateStatic+0x26>
 800305c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800306c:	e7fe      	b.n	800306c <xTaskCreateStatic+0x38>
 800306e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800307e:	e7fe      	b.n	800307e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003080:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003082:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8003084:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003086:	2402      	movs	r4, #2
 8003088:	f885 4051 	strb.w	r4, [r5, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800308c:	2400      	movs	r4, #0
 800308e:	9403      	str	r4, [sp, #12]
 8003090:	9502      	str	r5, [sp, #8]
 8003092:	ac05      	add	r4, sp, #20
 8003094:	9401      	str	r4, [sp, #4]
 8003096:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003098:	9400      	str	r4, [sp, #0]
 800309a:	f7ff fe53 	bl	8002d44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800309e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80030a0:	f7ff fed2 	bl	8002e48 <prvAddNewTaskToReadyList>
	}
 80030a4:	9805      	ldr	r0, [sp, #20]
 80030a6:	b007      	add	sp, #28
 80030a8:	bd30      	pop	{r4, r5, pc}

080030aa <xTaskCreate>:
	{
 80030aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030ae:	b085      	sub	sp, #20
 80030b0:	4607      	mov	r7, r0
 80030b2:	4688      	mov	r8, r1
 80030b4:	4614      	mov	r4, r2
 80030b6:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030b8:	0090      	lsls	r0, r2, #2
 80030ba:	f7fd fe05 	bl	8000cc8 <pvPortMalloc>
			if( pxStack != NULL )
 80030be:	b308      	cbz	r0, 8003104 <xTaskCreate+0x5a>
 80030c0:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030c2:	2054      	movs	r0, #84	@ 0x54
 80030c4:	f7fd fe00 	bl	8000cc8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80030c8:	4605      	mov	r5, r0
 80030ca:	b1a8      	cbz	r0, 80030f8 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80030cc:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030d6:	9303      	str	r3, [sp, #12]
 80030d8:	9002      	str	r0, [sp, #8]
 80030da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	4633      	mov	r3, r6
 80030e4:	4622      	mov	r2, r4
 80030e6:	4641      	mov	r1, r8
 80030e8:	4638      	mov	r0, r7
 80030ea:	f7ff fe2b 	bl	8002d44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030ee:	4628      	mov	r0, r5
 80030f0:	f7ff feaa 	bl	8002e48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030f4:	2001      	movs	r0, #1
 80030f6:	e007      	b.n	8003108 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 80030f8:	4648      	mov	r0, r9
 80030fa:	f7fd fe67 	bl	8000dcc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003102:	e001      	b.n	8003108 <xTaskCreate+0x5e>
 8003104:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 8003108:	b005      	add	sp, #20
 800310a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08003110 <vTaskStartScheduler>:
{
 8003110:	b510      	push	{r4, lr}
 8003112:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003114:	2400      	movs	r4, #0
 8003116:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003118:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800311a:	aa07      	add	r2, sp, #28
 800311c:	a906      	add	r1, sp, #24
 800311e:	a805      	add	r0, sp, #20
 8003120:	f7fd fd64 	bl	8000bec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003124:	9b05      	ldr	r3, [sp, #20]
 8003126:	9302      	str	r3, [sp, #8]
 8003128:	9b06      	ldr	r3, [sp, #24]
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	9400      	str	r4, [sp, #0]
 800312e:	4623      	mov	r3, r4
 8003130:	9a07      	ldr	r2, [sp, #28]
 8003132:	490e      	ldr	r1, [pc, #56]	@ (800316c <vTaskStartScheduler+0x5c>)
 8003134:	480e      	ldr	r0, [pc, #56]	@ (8003170 <vTaskStartScheduler+0x60>)
 8003136:	f7ff ff7d 	bl	8003034 <xTaskCreateStatic>
 800313a:	4b0e      	ldr	r3, [pc, #56]	@ (8003174 <vTaskStartScheduler+0x64>)
 800313c:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800313e:	b190      	cbz	r0, 8003166 <vTaskStartScheduler+0x56>
 8003140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003150:	4b09      	ldr	r3, [pc, #36]	@ (8003178 <vTaskStartScheduler+0x68>)
 8003152:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003156:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003158:	4b08      	ldr	r3, [pc, #32]	@ (800317c <vTaskStartScheduler+0x6c>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800315e:	4b08      	ldr	r3, [pc, #32]	@ (8003180 <vTaskStartScheduler+0x70>)
 8003160:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003162:	f7fe f899 	bl	8001298 <xPortStartScheduler>
}
 8003166:	b008      	add	sp, #32
 8003168:	bd10      	pop	{r4, pc}
 800316a:	bf00      	nop
 800316c:	08004ca8 	.word	0x08004ca8
 8003170:	08002f75 	.word	0x08002f75
 8003174:	20003148 	.word	0x20003148
 8003178:	2000314c 	.word	0x2000314c
 800317c:	20003160 	.word	0x20003160
 8003180:	20003168 	.word	0x20003168

08003184 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003184:	4a02      	ldr	r2, [pc, #8]	@ (8003190 <vTaskSuspendAll+0xc>)
 8003186:	6813      	ldr	r3, [r2, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	6013      	str	r3, [r2, #0]
}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20003144 	.word	0x20003144

08003194 <xTaskIncrementTick>:
{
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003196:	4b3a      	ldr	r3, [pc, #232]	@ (8003280 <xTaskIncrementTick+0xec>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d169      	bne.n	8003272 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800319e:	4b39      	ldr	r3, [pc, #228]	@ (8003284 <xTaskIncrementTick+0xf0>)
 80031a0:	681d      	ldr	r5, [r3, #0]
 80031a2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80031a4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031a6:	b9c5      	cbnz	r5, 80031da <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80031a8:	4b37      	ldr	r3, [pc, #220]	@ (8003288 <xTaskIncrementTick+0xf4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	b143      	cbz	r3, 80031c2 <xTaskIncrementTick+0x2e>
 80031b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	e7fe      	b.n	80031c0 <xTaskIncrementTick+0x2c>
 80031c2:	4a31      	ldr	r2, [pc, #196]	@ (8003288 <xTaskIncrementTick+0xf4>)
 80031c4:	6811      	ldr	r1, [r2, #0]
 80031c6:	4b31      	ldr	r3, [pc, #196]	@ (800328c <xTaskIncrementTick+0xf8>)
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	6010      	str	r0, [r2, #0]
 80031cc:	6019      	str	r1, [r3, #0]
 80031ce:	4a30      	ldr	r2, [pc, #192]	@ (8003290 <xTaskIncrementTick+0xfc>)
 80031d0:	6813      	ldr	r3, [r2, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	f7ff fd9f 	bl	8002d18 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031da:	4b2e      	ldr	r3, [pc, #184]	@ (8003294 <xTaskIncrementTick+0x100>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	42ab      	cmp	r3, r5
 80031e0:	d93d      	bls.n	800325e <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80031e2:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003298 <xTaskIncrementTick+0x104>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80031ee:	009a      	lsls	r2, r3, #2
 80031f0:	4b2a      	ldr	r3, [pc, #168]	@ (800329c <xTaskIncrementTick+0x108>)
 80031f2:	589b      	ldr	r3, [r3, r2]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d900      	bls.n	80031fa <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80031f8:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 80031fa:	4b29      	ldr	r3, [pc, #164]	@ (80032a0 <xTaskIncrementTick+0x10c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d03c      	beq.n	800327c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8003202:	2701      	movs	r7, #1
	return xSwitchRequired;
 8003204:	e03a      	b.n	800327c <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8003206:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003208:	4b1f      	ldr	r3, [pc, #124]	@ (8003288 <xTaskIncrementTick+0xf4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b343      	cbz	r3, 8003262 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003210:	4b1d      	ldr	r3, [pc, #116]	@ (8003288 <xTaskIncrementTick+0xf4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003218:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800321a:	429d      	cmp	r5, r3
 800321c:	d326      	bcc.n	800326c <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800321e:	1d26      	adds	r6, r4, #4
 8003220:	4630      	mov	r0, r6
 8003222:	f7fd fe43 	bl	8000eac <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003226:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003228:	b11b      	cbz	r3, 8003232 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800322a:	f104 0018 	add.w	r0, r4, #24
 800322e:	f7fd fe3d 	bl	8000eac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003232:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003234:	2201      	movs	r2, #1
 8003236:	409a      	lsls	r2, r3
 8003238:	491a      	ldr	r1, [pc, #104]	@ (80032a4 <xTaskIncrementTick+0x110>)
 800323a:	6808      	ldr	r0, [r1, #0]
 800323c:	4302      	orrs	r2, r0
 800323e:	600a      	str	r2, [r1, #0]
 8003240:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003244:	009a      	lsls	r2, r3, #2
 8003246:	4631      	mov	r1, r6
 8003248:	4814      	ldr	r0, [pc, #80]	@ (800329c <xTaskIncrementTick+0x108>)
 800324a:	4410      	add	r0, r2
 800324c:	f7fd fe0a 	bl	8000e64 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003250:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <xTaskIncrementTick+0x104>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	429a      	cmp	r2, r3
 800325a:	d2d4      	bcs.n	8003206 <xTaskIncrementTick+0x72>
 800325c:	e7d4      	b.n	8003208 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800325e:	2700      	movs	r7, #0
 8003260:	e7d2      	b.n	8003208 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003262:	4b0c      	ldr	r3, [pc, #48]	@ (8003294 <xTaskIncrementTick+0x100>)
 8003264:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003268:	601a      	str	r2, [r3, #0]
					break;
 800326a:	e7bb      	b.n	80031e4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800326c:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <xTaskIncrementTick+0x100>)
 800326e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003270:	e7b8      	b.n	80031e4 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8003272:	4a0d      	ldr	r2, [pc, #52]	@ (80032a8 <xTaskIncrementTick+0x114>)
 8003274:	6813      	ldr	r3, [r2, #0]
 8003276:	3301      	adds	r3, #1
 8003278:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800327a:	2700      	movs	r7, #0
}
 800327c:	4638      	mov	r0, r7
 800327e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003280:	20003144 	.word	0x20003144
 8003284:	20003168 	.word	0x20003168
 8003288:	200031b4 	.word	0x200031b4
 800328c:	200031b0 	.word	0x200031b0
 8003290:	20003154 	.word	0x20003154
 8003294:	2000314c 	.word	0x2000314c
 8003298:	2000326c 	.word	0x2000326c
 800329c:	200031e0 	.word	0x200031e0
 80032a0:	20003158 	.word	0x20003158
 80032a4:	20003164 	.word	0x20003164
 80032a8:	2000315c 	.word	0x2000315c

080032ac <xTaskResumeAll>:
{
 80032ac:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80032ae:	4b35      	ldr	r3, [pc, #212]	@ (8003384 <xTaskResumeAll+0xd8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	b943      	cbnz	r3, 80032c6 <xTaskResumeAll+0x1a>
 80032b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	e7fe      	b.n	80032c4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80032c6:	f7fd ff5d 	bl	8001184 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80032ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003384 <xTaskResumeAll+0xd8>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	3a01      	subs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d14f      	bne.n	8003378 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003388 <xTaskResumeAll+0xdc>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	b90b      	cbnz	r3, 80032e2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80032de:	2400      	movs	r4, #0
 80032e0:	e04b      	b.n	800337a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80032e2:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032e4:	4b29      	ldr	r3, [pc, #164]	@ (800338c <xTaskResumeAll+0xe0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	b31b      	cbz	r3, 8003332 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ea:	4b28      	ldr	r3, [pc, #160]	@ (800338c <xTaskResumeAll+0xe0>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032f0:	f104 0018 	add.w	r0, r4, #24
 80032f4:	f7fd fdda 	bl	8000eac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032f8:	1d25      	adds	r5, r4, #4
 80032fa:	4628      	mov	r0, r5
 80032fc:	f7fd fdd6 	bl	8000eac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003300:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003302:	2301      	movs	r3, #1
 8003304:	4083      	lsls	r3, r0
 8003306:	4a22      	ldr	r2, [pc, #136]	@ (8003390 <xTaskResumeAll+0xe4>)
 8003308:	6811      	ldr	r1, [r2, #0]
 800330a:	430b      	orrs	r3, r1
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003312:	4629      	mov	r1, r5
 8003314:	4b1f      	ldr	r3, [pc, #124]	@ (8003394 <xTaskResumeAll+0xe8>)
 8003316:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800331a:	f7fd fda3 	bl	8000e64 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800331e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003320:	4b1d      	ldr	r3, [pc, #116]	@ (8003398 <xTaskResumeAll+0xec>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003326:	429a      	cmp	r2, r3
 8003328:	d3dc      	bcc.n	80032e4 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800332a:	4b1c      	ldr	r3, [pc, #112]	@ (800339c <xTaskResumeAll+0xf0>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e7d8      	b.n	80032e4 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8003332:	b10c      	cbz	r4, 8003338 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8003334:	f7ff fcf0 	bl	8002d18 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003338:	4b19      	ldr	r3, [pc, #100]	@ (80033a0 <xTaskResumeAll+0xf4>)
 800333a:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800333c:	b984      	cbnz	r4, 8003360 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800333e:	4b17      	ldr	r3, [pc, #92]	@ (800339c <xTaskResumeAll+0xf0>)
 8003340:	681c      	ldr	r4, [r3, #0]
 8003342:	b1d4      	cbz	r4, 800337a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8003344:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800334c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003358:	2401      	movs	r4, #1
 800335a:	e00e      	b.n	800337a <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800335c:	3c01      	subs	r4, #1
 800335e:	d007      	beq.n	8003370 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8003360:	f7ff ff18 	bl	8003194 <xTaskIncrementTick>
 8003364:	2800      	cmp	r0, #0
 8003366:	d0f9      	beq.n	800335c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8003368:	4b0c      	ldr	r3, [pc, #48]	@ (800339c <xTaskResumeAll+0xf0>)
 800336a:	2201      	movs	r2, #1
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e7f5      	b.n	800335c <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8003370:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <xTaskResumeAll+0xf4>)
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	e7e2      	b.n	800333e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8003378:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800337a:	f7fd ff25 	bl	80011c8 <vPortExitCritical>
}
 800337e:	4620      	mov	r0, r4
 8003380:	bd38      	pop	{r3, r4, r5, pc}
 8003382:	bf00      	nop
 8003384:	20003144 	.word	0x20003144
 8003388:	2000316c 	.word	0x2000316c
 800338c:	2000319c 	.word	0x2000319c
 8003390:	20003164 	.word	0x20003164
 8003394:	200031e0 	.word	0x200031e0
 8003398:	2000326c 	.word	0x2000326c
 800339c:	20003158 	.word	0x20003158
 80033a0:	2000315c 	.word	0x2000315c

080033a4 <vTaskDelay>:
	{
 80033a4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033a6:	b1a8      	cbz	r0, 80033d4 <vTaskDelay+0x30>
 80033a8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80033aa:	4b10      	ldr	r3, [pc, #64]	@ (80033ec <vTaskDelay+0x48>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	b143      	cbz	r3, 80033c2 <vTaskDelay+0x1e>
 80033b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	e7fe      	b.n	80033c0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80033c2:	f7ff fedf 	bl	8003184 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033c6:	2100      	movs	r1, #0
 80033c8:	4620      	mov	r0, r4
 80033ca:	f7ff fde7 	bl	8002f9c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80033ce:	f7ff ff6d 	bl	80032ac <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80033d2:	b948      	cbnz	r0, 80033e8 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80033d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80033d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	f3bf 8f6f 	isb	sy
	}
 80033e8:	bd10      	pop	{r4, pc}
 80033ea:	bf00      	nop
 80033ec:	20003144 	.word	0x20003144

080033f0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033f0:	4b20      	ldr	r3, [pc, #128]	@ (8003474 <vTaskSwitchContext+0x84>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	b11b      	cbz	r3, 80033fe <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80033f6:	4b20      	ldr	r3, [pc, #128]	@ (8003478 <vTaskSwitchContext+0x88>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80033fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003478 <vTaskSwitchContext+0x88>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003404:	4b1d      	ldr	r3, [pc, #116]	@ (800347c <vTaskSwitchContext+0x8c>)
 8003406:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	f1c3 031f 	rsb	r3, r3, #31
 8003412:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003416:	008a      	lsls	r2, r1, #2
 8003418:	4919      	ldr	r1, [pc, #100]	@ (8003480 <vTaskSwitchContext+0x90>)
 800341a:	588a      	ldr	r2, [r1, r2]
 800341c:	b942      	cbnz	r2, 8003430 <vTaskSwitchContext+0x40>
	__asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	e7fe      	b.n	800342e <vTaskSwitchContext+0x3e>
 8003430:	4813      	ldr	r0, [pc, #76]	@ (8003480 <vTaskSwitchContext+0x90>)
 8003432:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003436:	008a      	lsls	r2, r1, #2
 8003438:	4402      	add	r2, r0
 800343a:	6851      	ldr	r1, [r2, #4]
 800343c:	6849      	ldr	r1, [r1, #4]
 800343e:	6051      	str	r1, [r2, #4]
 8003440:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8003444:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8003448:	3208      	adds	r2, #8
 800344a:	4402      	add	r2, r0
 800344c:	4291      	cmp	r1, r2
 800344e:	d009      	beq.n	8003464 <vTaskSwitchContext+0x74>
 8003450:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003454:	009a      	lsls	r2, r3, #2
 8003456:	4b0a      	ldr	r3, [pc, #40]	@ (8003480 <vTaskSwitchContext+0x90>)
 8003458:	4413      	add	r3, r2
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	4b09      	ldr	r3, [pc, #36]	@ (8003484 <vTaskSwitchContext+0x94>)
 8003460:	601a      	str	r2, [r3, #0]
}
 8003462:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003464:	6848      	ldr	r0, [r1, #4]
 8003466:	4662      	mov	r2, ip
 8003468:	0091      	lsls	r1, r2, #2
 800346a:	4a05      	ldr	r2, [pc, #20]	@ (8003480 <vTaskSwitchContext+0x90>)
 800346c:	440a      	add	r2, r1
 800346e:	6050      	str	r0, [r2, #4]
 8003470:	e7ee      	b.n	8003450 <vTaskSwitchContext+0x60>
 8003472:	bf00      	nop
 8003474:	20003144 	.word	0x20003144
 8003478:	20003158 	.word	0x20003158
 800347c:	20003164 	.word	0x20003164
 8003480:	200031e0 	.word	0x200031e0
 8003484:	2000326c 	.word	0x2000326c

08003488 <item_node_text_init>:
    }
}

// 给text 节点分配内存 与 初始化
void item_node_text_init(ItemNodeTypedef *NodeItem, uint8_t text_loction_x, uint8_t text_loction_y)
{
 8003488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800348c:	4604      	mov	r4, r0
 800348e:	460d      	mov	r5, r1
 8003490:	4616      	mov	r6, r2
    // uint8_t text_len = strlen(NodeItem->name);
    uint8_t text_vram_len = 14;

    // 分配 vram 内存
    NodeItem->vram = (VRAM_typedef *)pvPortMalloc(sizeof(VRAM_typedef));
 8003492:	2014      	movs	r0, #20
 8003494:	f7fd fc18 	bl	8000cc8 <pvPortMalloc>
 8003498:	61e0      	str	r0, [r4, #28]

    if (NodeItem->vram != NULL)
 800349a:	2800      	cmp	r0, #0
 800349c:	d037      	beq.n	800350e <item_node_text_init+0x86>
    {
        text_vram_len = get_char_vram_length(NodeItem->name);
 800349e:	4620      	mov	r0, r4
 80034a0:	f7fd fdd2 	bl	8001048 <get_char_vram_length>
 80034a4:	4607      	mov	r7, r0
        // 假如使用16 * 16的字体
        NodeItem->vram->height = 16;
 80034a6:	69e3      	ldr	r3, [r4, #28]
 80034a8:	2210      	movs	r2, #16
 80034aa:	811a      	strh	r2, [r3, #8]
        NodeItem->vram->width = 8 * text_vram_len;
 80034ac:	69e3      	ldr	r3, [r4, #28]
 80034ae:	00c2      	lsls	r2, r0, #3
 80034b0:	80da      	strh	r2, [r3, #6]
        NodeItem->vram->priority = 3;
 80034b2:	69e3      	ldr	r3, [r4, #28]
 80034b4:	2203      	movs	r2, #3
 80034b6:	711a      	strb	r2, [r3, #4]
        NodeItem->vram->x = text_loction_x;
 80034b8:	69e3      	ldr	r3, [r4, #28]
 80034ba:	801d      	strh	r5, [r3, #0]
        NodeItem->vram->y = text_loction_y;
 80034bc:	69e3      	ldr	r3, [r4, #28]
 80034be:	805e      	strh	r6, [r3, #2]
        // 分配 vram data 内存 一个字占 字节
        NodeItem->vram->data = (uint8_t *)pvPortMalloc(16 * text_vram_len);
 80034c0:	f8d4 801c 	ldr.w	r8, [r4, #28]
 80034c4:	0100      	lsls	r0, r0, #4
 80034c6:	f7fd fbff 	bl	8000cc8 <pvPortMalloc>
 80034ca:	f8c8 000c 	str.w	r0, [r8, #12]
    }

    // 显存数据初始化
    if (NodeItem->vram->data != NULL)
 80034ce:	69e3      	ldr	r3, [r4, #28]
 80034d0:	68d9      	ldr	r1, [r3, #12]
 80034d2:	b119      	cbz	r1, 80034dc <item_node_text_init+0x54>
    {
        set_oled_font_vram(NodeItem->name, NodeItem->vram->data, text_vram_len);
 80034d4:	463a      	mov	r2, r7
 80034d6:	4620      	mov	r0, r4
 80034d8:	f7fd fdd0 	bl	800107c <set_oled_font_vram>
    }

    // 分配曲线动画内存
    NodeItem->curve = (curve_state_typedef *)pvPortMalloc(sizeof(curve_state_typedef));
 80034dc:	2008      	movs	r0, #8
 80034de:	f7fd fbf3 	bl	8000cc8 <pvPortMalloc>
 80034e2:	6220      	str	r0, [r4, #32]

    // 设置元素的曲线结构体
    if (NodeItem->curve != NULL)
 80034e4:	b188      	cbz	r0, 800350a <item_node_text_init+0x82>
    {
        NodeItem->curve->endLocation_X = text_loction_x;
 80034e6:	7105      	strb	r5, [r0, #4]
        NodeItem->curve->endLocation_y = text_loction_y;
 80034e8:	6a23      	ldr	r3, [r4, #32]
 80034ea:	715e      	strb	r6, [r3, #5]
        NodeItem->curve->wantedTimes = CURVE_MOVING_TIME;
 80034ec:	6a23      	ldr	r3, [r4, #32]
 80034ee:	2214      	movs	r2, #20
 80034f0:	701a      	strb	r2, [r3, #0]
        NodeItem->curve->startLocation_X = text_loction_x;
 80034f2:	6a23      	ldr	r3, [r4, #32]
 80034f4:	709d      	strb	r5, [r3, #2]
        NodeItem->curve->startLocation_y = VRAM_HIGH;
 80034f6:	6a23      	ldr	r3, [r4, #32]
 80034f8:	2240      	movs	r2, #64	@ 0x40
 80034fa:	70da      	strb	r2, [r3, #3]
        NodeItem->curve->setLocation_y = 0;
 80034fc:	6a22      	ldr	r2, [r4, #32]
 80034fe:	2300      	movs	r3, #0
 8003500:	71d3      	strb	r3, [r2, #7]
        NodeItem->curve->setLocation_X = 0;
 8003502:	6a22      	ldr	r2, [r4, #32]
 8003504:	7193      	strb	r3, [r2, #6]
        NodeItem->curve->passedTimes = 0;
 8003506:	6a22      	ldr	r2, [r4, #32]
 8003508:	7053      	strb	r3, [r2, #1]
    }
}
 800350a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t text_vram_len = 14;
 800350e:	270e      	movs	r7, #14
 8003510:	e7dd      	b.n	80034ce <item_node_text_init+0x46>

08003512 <page_node_init>:
{
 8003512:	b570      	push	{r4, r5, r6, lr}
 8003514:	4606      	mov	r6, r0
    ItemNodeTypedef *ItemNode = NodePage->itemNodeHead;
 8003516:	69c4      	ldr	r4, [r0, #28]
    uint8_t ItemNodeLocation_y = ITEM_GAP_HEIGHT;
 8003518:	2500      	movs	r5, #0
    while (ItemNode != NULL)
 800351a:	e000      	b.n	800351e <page_node_init+0xc>
        ItemNode = ItemNode->itemNodeNext;
 800351c:	6964      	ldr	r4, [r4, #20]
    while (ItemNode != NULL)
 800351e:	b16c      	cbz	r4, 800353c <page_node_init+0x2a>
        if (ItemNode->ItemType == 0)
 8003520:	7e23      	ldrb	r3, [r4, #24]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1fa      	bne.n	800351c <page_node_init+0xa>
            item_node_text_init(ItemNode, ItemNodeLocation_x, ItemNodeLocation_y);
 8003526:	462a      	mov	r2, r5
 8003528:	2104      	movs	r1, #4
 800352a:	4620      	mov	r0, r4
 800352c:	f7ff ffac 	bl	8003488 <item_node_text_init>
            ItemNodeLocation_y += get_write_block_height(ItemNode->vram) + ITEM_GAP_HEIGHT;
 8003530:	69e0      	ldr	r0, [r4, #28]
 8003532:	f000 f85f 	bl	80035f4 <get_write_block_height>
 8003536:	4405      	add	r5, r0
 8003538:	b2ed      	uxtb	r5, r5
 800353a:	e7ef      	b.n	800351c <page_node_init+0xa>
    ItemNode = NodePage->itemNodeHead;
 800353c:	69f3      	ldr	r3, [r6, #28]
    while (ItemNode != NULL)
 800353e:	e003      	b.n	8003548 <page_node_init+0x36>
            ItemNode->vram->nextVram = ItemNode->itemNodeNext->vram;
 8003540:	69d9      	ldr	r1, [r3, #28]
 8003542:	69d2      	ldr	r2, [r2, #28]
 8003544:	610a      	str	r2, [r1, #16]
        ItemNode = ItemNode->itemNodeNext;
 8003546:	695b      	ldr	r3, [r3, #20]
    while (ItemNode != NULL)
 8003548:	b11b      	cbz	r3, 8003552 <page_node_init+0x40>
        if (ItemNode->itemNodeNext != NULL)
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	2a00      	cmp	r2, #0
 800354e:	d1f7      	bne.n	8003540 <page_node_init+0x2e>
 8003550:	e7f9      	b.n	8003546 <page_node_init+0x34>
}
 8003552:	bd70      	pop	{r4, r5, r6, pc}

08003554 <curve_animotion>:
    }
}

// 移动当前页面的元素
void curve_animotion(void)
{
 8003554:	b510      	push	{r4, lr}
    ItemNodeTypedef *ItemNode = currentNodePage->itemNodeHead;
 8003556:	4b0c      	ldr	r3, [pc, #48]	@ (8003588 <curve_animotion+0x34>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69dc      	ldr	r4, [r3, #28]
    while (ItemNode != NULL)
 800355c:	e000      	b.n	8003560 <curve_animotion+0xc>
                ItemNode->vram->x = ItemNode->curve->setLocation_X;
                ItemNode->vram->y = ItemNode->curve->setLocation_y;
            }
        }
        // HAL_UART_Transmit(&huart1, &ItemNode->curve->setLocation_y, 1, 100);
        ItemNode = ItemNode->itemNodeNext;
 800355e:	6964      	ldr	r4, [r4, #20]
    while (ItemNode != NULL)
 8003560:	b18c      	cbz	r4, 8003586 <curve_animotion+0x32>
        if (ItemNode->curve != NULL)
 8003562:	6a20      	ldr	r0, [r4, #32]
 8003564:	2800      	cmp	r0, #0
 8003566:	d0fa      	beq.n	800355e <curve_animotion+0xa>
            if (ItemNode->ItemType == ITEM_TYPE_TEXT)
 8003568:	7e23      	ldrb	r3, [r4, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f7      	bne.n	800355e <curve_animotion+0xa>
                animation_entry(ItemNode->curve, NON_LINEAR_ANIMATION);
 800356e:	2101      	movs	r1, #1
 8003570:	f7fd f9fe 	bl	8000970 <animation_entry>
                ItemNode->vram->x = ItemNode->curve->setLocation_X;
 8003574:	6a22      	ldr	r2, [r4, #32]
 8003576:	69e3      	ldr	r3, [r4, #28]
 8003578:	7992      	ldrb	r2, [r2, #6]
 800357a:	801a      	strh	r2, [r3, #0]
                ItemNode->vram->y = ItemNode->curve->setLocation_y;
 800357c:	6a22      	ldr	r2, [r4, #32]
 800357e:	69e3      	ldr	r3, [r4, #28]
 8003580:	79d2      	ldrb	r2, [r2, #7]
 8003582:	805a      	strh	r2, [r3, #2]
 8003584:	e7eb      	b.n	800355e <curve_animotion+0xa>
    }
}
 8003586:	bd10      	pop	{r4, pc}
 8003588:	20000014 	.word	0x20000014

0800358c <show_UI>:
{
 800358c:	b508      	push	{r3, lr}
    page_node_init(&pageNodeHead);
 800358e:	480c      	ldr	r0, [pc, #48]	@ (80035c0 <show_UI+0x34>)
 8003590:	f7ff ffbf 	bl	8003512 <page_node_init>
    selector_init(currentNodePage);
 8003594:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <show_UI+0x38>)
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	f7fd ffae 	bl	80014f8 <selector_init>
        curve_animotion();
 800359c:	f7ff ffda 	bl	8003554 <curve_animotion>
        write_to_vram(pageNodeHead.itemNodeHead->vram);
 80035a0:	4b07      	ldr	r3, [pc, #28]	@ (80035c0 <show_UI+0x34>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	69d8      	ldr	r0, [r3, #28]
 80035a6:	f000 f901 	bl	80037ac <write_to_vram>
        selector_state(currentNodePage);
 80035aa:	4b06      	ldr	r3, [pc, #24]	@ (80035c4 <show_UI+0x38>)
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	f7fd ff71 	bl	8001494 <selector_state>
        send_vram_data_to_oled();
 80035b2:	f000 f93f 	bl	8003834 <send_vram_data_to_oled>
        osDelay(20);
 80035b6:	2014      	movs	r0, #20
 80035b8:	f7fd f907 	bl	80007ca <osDelay>
    while (1)
 80035bc:	e7ee      	b.n	800359c <show_UI+0x10>
 80035be:	bf00      	nop
 80035c0:	20000018 	.word	0x20000018
 80035c4:	20000014 	.word	0x20000014

080035c8 <get_write_block_width>:
 * @return 返回可以在VRAM中写入的块的实际宽度
 */
uint8_t get_write_block_width(VRAM_typedef const *vram_block)
{
    uint8_t write_width = 0;
    if (vram_block != NULL)
 80035c8:	b170      	cbz	r0, 80035e8 <get_write_block_width+0x20>
    {
        if ((vram_block->x < VRAM_WIDTH) && (vram_block->width != 0))
 80035ca:	8802      	ldrh	r2, [r0, #0]
 80035cc:	2a7f      	cmp	r2, #127	@ 0x7f
 80035ce:	d80d      	bhi.n	80035ec <get_write_block_width+0x24>
 80035d0:	88c0      	ldrh	r0, [r0, #6]
 80035d2:	b168      	cbz	r0, 80035f0 <get_write_block_width+0x28>
        {
            // 如果VRAM块的右边界超出VRAM总宽度，则返回VRAM剩余的宽度；否则返回VRAM块的原始宽度
            write_width = (vram_block->x + vram_block->width > VRAM_WIDTH) ? (VRAM_WIDTH - vram_block->x) : (vram_block->width);
 80035d4:	1813      	adds	r3, r2, r0
 80035d6:	2b80      	cmp	r3, #128	@ 0x80
 80035d8:	dd04      	ble.n	80035e4 <get_write_block_width+0x1c>
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	f1c2 0280 	rsb	r2, r2, #128	@ 0x80
 80035e0:	b2d0      	uxtb	r0, r2
 80035e2:	4770      	bx	lr
 80035e4:	b2c0      	uxtb	r0, r0
 80035e6:	4770      	bx	lr
    uint8_t write_width = 0;
 80035e8:	2000      	movs	r0, #0
 80035ea:	4770      	bx	lr
 80035ec:	2000      	movs	r0, #0
 80035ee:	4770      	bx	lr
 80035f0:	2000      	movs	r0, #0
        }
    }
    return write_width;
}
 80035f2:	4770      	bx	lr

080035f4 <get_write_block_height>:
{
    // 初始化写入高度为0，表示默认情况下没有可用的高度
    uint8_t write_height = 0;

    // 检查传入的VRAM块指针是否有效
    if (vram_block != NULL)
 80035f4:	b170      	cbz	r0, 8003614 <get_write_block_height+0x20>
    {
        // 确保VRAM块的起始Y坐标在VRAM的有效范围内，并且VRAM块具有非零的高度
        if ((vram_block->y < VRAM_HIGH) && (vram_block->height != 0))
 80035f6:	8842      	ldrh	r2, [r0, #2]
 80035f8:	2a3f      	cmp	r2, #63	@ 0x3f
 80035fa:	d80d      	bhi.n	8003618 <get_write_block_height+0x24>
 80035fc:	8900      	ldrh	r0, [r0, #8]
 80035fe:	b168      	cbz	r0, 800361c <get_write_block_height+0x28>
        {
            // 计算写入高度如果VRAM块的顶部加上高度超出VRAM的顶部，则限制写入高度为VRAM的剩余高度
            write_height = (vram_block->y + vram_block->height > VRAM_HIGH) ? (VRAM_HIGH - vram_block->y) : (vram_block->height);
 8003600:	1813      	adds	r3, r2, r0
 8003602:	2b40      	cmp	r3, #64	@ 0x40
 8003604:	dd04      	ble.n	8003610 <get_write_block_height+0x1c>
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	f1c2 0240 	rsb	r2, r2, #64	@ 0x40
 800360c:	b2d0      	uxtb	r0, r2
 800360e:	4770      	bx	lr
 8003610:	b2c0      	uxtb	r0, r0
 8003612:	4770      	bx	lr
    uint8_t write_height = 0;
 8003614:	2000      	movs	r0, #0
 8003616:	4770      	bx	lr
 8003618:	2000      	movs	r0, #0
 800361a:	4770      	bx	lr
 800361c:	2000      	movs	r0, #0
        }
    }

    // 返回计算得到的写入高度
    return write_height;
}
 800361e:	4770      	bx	lr

08003620 <clear_vram_block>:

void clear_vram_block(VRAM_typedef const *vram_block, const uint8_t clear_width, const uint8_t clear_height, uint8_t vram_data[VRAM_WIDTH][VRAM_HIGH / 8])
{
 8003620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003622:	b093      	sub	sp, #76	@ 0x4c
 8003624:	4604      	mov	r4, r0
 8003626:	460e      	mov	r6, r1
 8003628:	4617      	mov	r7, r2
 800362a:	461d      	mov	r5, r3

    uint8_t vram_clear_data[VRAM_HIGH] = {0};
 800362c:	2240      	movs	r2, #64	@ 0x40
 800362e:	2100      	movs	r1, #0
 8003630:	a802      	add	r0, sp, #8
 8003632:	f000 f99a 	bl	800396a <memset>
    uint8_t vram_clear_data_mask[VRAM_HIGH / 8] = {0};
 8003636:	2300      	movs	r3, #0
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	9301      	str	r3, [sp, #4]

    if (vram_block != NULL)
 800363c:	2c00      	cmp	r4, #0
 800363e:	d04b      	beq.n	80036d8 <clear_vram_block+0xb8>
    {
        // 将bit缩放到字节
        for (uint8_t i = vram_block->y; i < (vram_block->y + clear_height); i++)
 8003640:	8860      	ldrh	r0, [r4, #2]
 8003642:	b2c3      	uxtb	r3, r0
 8003644:	e008      	b.n	8003658 <clear_vram_block+0x38>
        {
            vram_clear_data[i] = 0x01u;
 8003646:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800364a:	eb0d 0102 	add.w	r1, sp, r2
 800364e:	2201      	movs	r2, #1
 8003650:	f801 2c40 	strb.w	r2, [r1, #-64]
        for (uint8_t i = vram_block->y; i < (vram_block->y + clear_height); i++)
 8003654:	4413      	add	r3, r2
 8003656:	b2db      	uxtb	r3, r3
 8003658:	1839      	adds	r1, r7, r0
 800365a:	428b      	cmp	r3, r1
 800365c:	dbf3      	blt.n	8003646 <clear_vram_block+0x26>
        }
        // 将字节缩小成掩码
        for (uint8_t i = 0; i < VRAM_HIGH / 8; i++)
 800365e:	f04f 0c00 	mov.w	ip, #0
 8003662:	e003      	b.n	800366c <clear_vram_block+0x4c>
 8003664:	f10c 0c01 	add.w	ip, ip, #1
 8003668:	fa5f fc8c 	uxtb.w	ip, ip
 800366c:	f1bc 0f07 	cmp.w	ip, #7
 8003670:	d815      	bhi.n	800369e <clear_vram_block+0x7e>
        {
            for (uint8_t j = 0; j < VRAM_HIGH / 8; j++)
 8003672:	2200      	movs	r2, #0
 8003674:	2a07      	cmp	r2, #7
 8003676:	d8f5      	bhi.n	8003664 <clear_vram_block+0x44>
            {
                vram_clear_data_mask[i] |= vram_clear_data[i * 8 + j] << j;
 8003678:	f10c 0348 	add.w	r3, ip, #72	@ 0x48
 800367c:	eb0d 0003 	add.w	r0, sp, r3
 8003680:	f810 3c48 	ldrb.w	r3, [r0, #-72]
 8003684:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
 8003688:	3148      	adds	r1, #72	@ 0x48
 800368a:	4469      	add	r1, sp
 800368c:	f811 1c40 	ldrb.w	r1, [r1, #-64]
 8003690:	4091      	lsls	r1, r2
 8003692:	430b      	orrs	r3, r1
 8003694:	f800 3c48 	strb.w	r3, [r0, #-72]
            for (uint8_t j = 0; j < VRAM_HIGH / 8; j++)
 8003698:	3201      	adds	r2, #1
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	e7ea      	b.n	8003674 <clear_vram_block+0x54>
            }
        }

        // 清除vram通过掩码
        for (uint8_t i = 0; i < clear_width; i++)
 800369e:	2000      	movs	r0, #0
 80036a0:	e016      	b.n	80036d0 <clear_vram_block+0xb0>
        {
            for (uint8_t j = 0; j < VRAM_HIGH / 8; j++)
            {
                vram_data[vram_block->x + i][j] &= ~vram_clear_data_mask[j];
 80036a2:	f8b4 c000 	ldrh.w	ip, [r4]
 80036a6:	4484      	add	ip, r0
 80036a8:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 80036ac:	f81c 1002 	ldrb.w	r1, [ip, r2]
 80036b0:	f102 0348 	add.w	r3, r2, #72	@ 0x48
 80036b4:	446b      	add	r3, sp
 80036b6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	b25b      	sxtb	r3, r3
 80036be:	400b      	ands	r3, r1
 80036c0:	f80c 3002 	strb.w	r3, [ip, r2]
            for (uint8_t j = 0; j < VRAM_HIGH / 8; j++)
 80036c4:	3201      	adds	r2, #1
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	2a07      	cmp	r2, #7
 80036ca:	d9ea      	bls.n	80036a2 <clear_vram_block+0x82>
        for (uint8_t i = 0; i < clear_width; i++)
 80036cc:	3001      	adds	r0, #1
 80036ce:	b2c0      	uxtb	r0, r0
 80036d0:	42b0      	cmp	r0, r6
 80036d2:	d201      	bcs.n	80036d8 <clear_vram_block+0xb8>
            for (uint8_t j = 0; j < VRAM_HIGH / 8; j++)
 80036d4:	2200      	movs	r2, #0
 80036d6:	e7f7      	b.n	80036c8 <clear_vram_block+0xa8>
            }
        }
    }
}
 80036d8:	b013      	add	sp, #76	@ 0x4c
 80036da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036dc <write_vram_block>:
/*
可优化
*/
void write_vram_block(VRAM_typedef const *vram_block, const uint8_t write_width, const uint8_t write_height, uint8_t vram_data[VRAM_WIDTH][VRAM_HIGH / 8])
{
 80036dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036e0:	b093      	sub	sp, #76	@ 0x4c
 80036e2:	4605      	mov	r5, r0
 80036e4:	4689      	mov	r9, r1
 80036e6:	4617      	mov	r7, r2
 80036e8:	4698      	mov	r8, r3

    uint8_t vram_write_data[VRAM_HIGH] = {0};
 80036ea:	2240      	movs	r2, #64	@ 0x40
 80036ec:	2100      	movs	r1, #0
 80036ee:	a802      	add	r0, sp, #8
 80036f0:	f000 f93b 	bl	800396a <memset>
    uint8_t vram_write_data_mask[VRAM_HIGH / 8] = {0};
 80036f4:	2300      	movs	r3, #0
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	9301      	str	r3, [sp, #4]

    // 改处理的第几个像素点
    uint16_t vram_data_index = 0;

    if (vram_block != NULL)
 80036fa:	2d00      	cmp	r5, #0
 80036fc:	d053      	beq.n	80037a6 <write_vram_block+0xca>
    {
        // 以X轴的像素点为起点
        for (uint8_t k = vram_block->x; k < vram_block->x + write_width; k++)
 80036fe:	782e      	ldrb	r6, [r5, #0]
    uint16_t vram_data_index = 0;
 8003700:	461c      	mov	r4, r3
        for (uint8_t k = vram_block->x; k < vram_block->x + write_width; k++)
 8003702:	e042      	b.n	800378a <write_vram_block+0xae>
            memset(vram_write_data_mask, 0, VRAM_HIGH / 8);

            // 从y轴开始写入数据
            for (uint8_t i = vram_block->y; i < vram_block->y + write_height; i++)
            {
                vram_write_data[i] = (vram_block->data[vram_data_index / 8] >> (vram_data_index % 8)) & 0x1U;
 8003704:	68e9      	ldr	r1, [r5, #12]
 8003706:	08e2      	lsrs	r2, r4, #3
 8003708:	5c8a      	ldrb	r2, [r1, r2]
 800370a:	f004 0107 	and.w	r1, r4, #7
 800370e:	410a      	asrs	r2, r1
 8003710:	f002 0201 	and.w	r2, r2, #1
 8003714:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8003718:	4469      	add	r1, sp
 800371a:	f801 2c40 	strb.w	r2, [r1, #-64]
                vram_data_index++;
 800371e:	3401      	adds	r4, #1
 8003720:	b2a4      	uxth	r4, r4
            for (uint8_t i = vram_block->y; i < vram_block->y + write_height; i++)
 8003722:	3301      	adds	r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	886a      	ldrh	r2, [r5, #2]
 8003728:	443a      	add	r2, r7
 800372a:	4293      	cmp	r3, r2
 800372c:	dbea      	blt.n	8003704 <write_vram_block+0x28>
            }

            // 将字节缩小成掩码 可优化
            for (uint8_t i = 0; i < VRAM_HIGH / 8; i++)
 800372e:	2200      	movs	r2, #0
 8003730:	e024      	b.n	800377c <write_vram_block+0xa0>
            {
                for (uint8_t j = 0; j < VRAM_HIGH / 8; j++)
                {
                    vram_write_data_mask[i] |= vram_write_data[i * 8 + j] << j;
 8003732:	f102 0348 	add.w	r3, r2, #72	@ 0x48
 8003736:	eb0d 0103 	add.w	r1, sp, r3
 800373a:	f811 ec48 	ldrb.w	lr, [r1, #-72]
 800373e:	eb0c 03c2 	add.w	r3, ip, r2, lsl #3
 8003742:	3348      	adds	r3, #72	@ 0x48
 8003744:	446b      	add	r3, sp
 8003746:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800374a:	fa03 f30c 	lsl.w	r3, r3, ip
 800374e:	ea4e 0e03 	orr.w	lr, lr, r3
 8003752:	f801 ec48 	strb.w	lr, [r1, #-72]
                for (uint8_t j = 0; j < VRAM_HIGH / 8; j++)
 8003756:	f10c 0c01 	add.w	ip, ip, #1
 800375a:	fa5f fc8c 	uxtb.w	ip, ip
 800375e:	f1bc 0f07 	cmp.w	ip, #7
 8003762:	d9e6      	bls.n	8003732 <write_vram_block+0x56>
                }
                // 将掩码写入到显存
                vram_data[k][i] |= vram_write_data_mask[i];
 8003764:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
 8003768:	5c8b      	ldrb	r3, [r1, r2]
 800376a:	f102 0048 	add.w	r0, r2, #72	@ 0x48
 800376e:	4468      	add	r0, sp
 8003770:	f810 0c48 	ldrb.w	r0, [r0, #-72]
 8003774:	4303      	orrs	r3, r0
 8003776:	548b      	strb	r3, [r1, r2]
            for (uint8_t i = 0; i < VRAM_HIGH / 8; i++)
 8003778:	3201      	adds	r2, #1
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	2a07      	cmp	r2, #7
 800377e:	d802      	bhi.n	8003786 <write_vram_block+0xaa>
                for (uint8_t j = 0; j < VRAM_HIGH / 8; j++)
 8003780:	f04f 0c00 	mov.w	ip, #0
 8003784:	e7eb      	b.n	800375e <write_vram_block+0x82>
        for (uint8_t k = vram_block->x; k < vram_block->x + write_width; k++)
 8003786:	3601      	adds	r6, #1
 8003788:	b2f6      	uxtb	r6, r6
 800378a:	882b      	ldrh	r3, [r5, #0]
 800378c:	444b      	add	r3, r9
 800378e:	429e      	cmp	r6, r3
 8003790:	da09      	bge.n	80037a6 <write_vram_block+0xca>
            memset(vram_write_data, 0, VRAM_HIGH);
 8003792:	2240      	movs	r2, #64	@ 0x40
 8003794:	2100      	movs	r1, #0
 8003796:	a802      	add	r0, sp, #8
 8003798:	f000 f8e7 	bl	800396a <memset>
            memset(vram_write_data_mask, 0, VRAM_HIGH / 8);
 800379c:	2300      	movs	r3, #0
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	9301      	str	r3, [sp, #4]
            for (uint8_t i = vram_block->y; i < vram_block->y + write_height; i++)
 80037a2:	78ab      	ldrb	r3, [r5, #2]
 80037a4:	e7bf      	b.n	8003726 <write_vram_block+0x4a>
            }
        }
    }
}
 80037a6:	b013      	add	sp, #76	@ 0x4c
 80037a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080037ac <write_to_vram>:
{
 80037ac:	b530      	push	{r4, r5, lr}
 80037ae:	f2ad 4d04 	subw	sp, sp, #1028	@ 0x404
 80037b2:	4604      	mov	r4, r0
    uint8_t vram_data[VRAM_WIDTH][VRAM_HIGH / 8] = {0};
 80037b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037b8:	2100      	movs	r1, #0
 80037ba:	4668      	mov	r0, sp
 80037bc:	f000 f8d5 	bl	800396a <memset>
    while (vram_blockHead != NULL)
 80037c0:	e00d      	b.n	80037de <write_to_vram+0x32>
        uint8_t write_width = get_write_block_width(vram_blockHead);
 80037c2:	4620      	mov	r0, r4
 80037c4:	f7ff ff00 	bl	80035c8 <get_write_block_width>
 80037c8:	4605      	mov	r5, r0
        uint8_t write_height = get_write_block_height(vram_blockHead);
 80037ca:	4620      	mov	r0, r4
 80037cc:	f7ff ff12 	bl	80035f4 <get_write_block_height>
 80037d0:	4602      	mov	r2, r0
        write_vram_block(vram_blockHead, write_width, write_height, vram_data);
 80037d2:	466b      	mov	r3, sp
 80037d4:	4629      	mov	r1, r5
 80037d6:	4620      	mov	r0, r4
 80037d8:	f7ff ff80 	bl	80036dc <write_vram_block>
        vram_blockHead = vram_blockHead->nextVram;
 80037dc:	6924      	ldr	r4, [r4, #16]
    while (vram_blockHead != NULL)
 80037de:	2c00      	cmp	r4, #0
 80037e0:	d1ef      	bne.n	80037c2 <write_to_vram+0x16>
    memcpy(main_vram_data, vram_data, VRAM_WIDTH * VRAM_HIGH / 8);
 80037e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037e6:	4669      	mov	r1, sp
 80037e8:	4802      	ldr	r0, [pc, #8]	@ (80037f4 <write_to_vram+0x48>)
 80037ea:	f000 f8eb 	bl	80039c4 <memcpy>
}
 80037ee:	f20d 4d04 	addw	sp, sp, #1028	@ 0x404
 80037f2:	bd30      	pop	{r4, r5, pc}
 80037f4:	20003270 	.word	0x20003270

080037f8 <write_to_vram_with_cover>:
{
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	4604      	mov	r4, r0
    while (vram_blockHead != NULL)
 80037fc:	e015      	b.n	800382a <write_to_vram_with_cover+0x32>
        uint8_t write_width = get_write_block_width(vram_blockHead);
 80037fe:	4620      	mov	r0, r4
 8003800:	f7ff fee2 	bl	80035c8 <get_write_block_width>
 8003804:	4605      	mov	r5, r0
        uint8_t write_height = get_write_block_height(vram_blockHead);
 8003806:	4620      	mov	r0, r4
 8003808:	f7ff fef4 	bl	80035f4 <get_write_block_height>
 800380c:	4606      	mov	r6, r0
        clear_vram_block(vram_blockHead, write_width, write_height, main_vram_data);
 800380e:	4f08      	ldr	r7, [pc, #32]	@ (8003830 <write_to_vram_with_cover+0x38>)
 8003810:	463b      	mov	r3, r7
 8003812:	4602      	mov	r2, r0
 8003814:	4629      	mov	r1, r5
 8003816:	4620      	mov	r0, r4
 8003818:	f7ff ff02 	bl	8003620 <clear_vram_block>
        write_vram_block(vram_blockHead, write_width, write_height, main_vram_data);
 800381c:	463b      	mov	r3, r7
 800381e:	4632      	mov	r2, r6
 8003820:	4629      	mov	r1, r5
 8003822:	4620      	mov	r0, r4
 8003824:	f7ff ff5a 	bl	80036dc <write_vram_block>
        vram_blockHead = vram_blockHead->nextVram;
 8003828:	6924      	ldr	r4, [r4, #16]
    while (vram_blockHead != NULL)
 800382a:	2c00      	cmp	r4, #0
 800382c:	d1e7      	bne.n	80037fe <write_to_vram_with_cover+0x6>
}
 800382e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003830:	20003270 	.word	0x20003270

08003834 <send_vram_data_to_oled>:

// led 的节约内存的格式 大概申请 1K 的内存 128 * 8 = 1024
void send_vram_data_to_oled()
{
 8003834:	b510      	push	{r4, lr}
 8003836:	b0a0      	sub	sp, #128	@ 0x80
    uint8_t oled_data[VRAM_WIDTH] = {0};
 8003838:	2280      	movs	r2, #128	@ 0x80
 800383a:	2100      	movs	r1, #0
 800383c:	4668      	mov	r0, sp
 800383e:	f000 f894 	bl	800396a <memset>
    // 将vram数据转成 oled 需要的 格式
    for (uint8_t k = 0; k < 8; k++)
 8003842:	2400      	movs	r4, #0
 8003844:	e017      	b.n	8003876 <send_vram_data_to_oled+0x42>
    {
        memset(oled_data, 0, VRAM_WIDTH);
        for (uint8_t i = 0; i < VRAM_WIDTH; i++)
        {
            oled_data[i] = main_vram_data[i][k];
 8003846:	4a11      	ldr	r2, [pc, #68]	@ (800388c <send_vram_data_to_oled+0x58>)
 8003848:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800384c:	5d11      	ldrb	r1, [r2, r4]
 800384e:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8003852:	446a      	add	r2, sp
 8003854:	f802 1c80 	strb.w	r1, [r2, #-128]
        for (uint8_t i = 0; i < VRAM_WIDTH; i++)
 8003858:	3301      	adds	r3, #1
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003860:	d0f1      	beq.n	8003846 <send_vram_data_to_oled+0x12>
        }
        OLED_SetPosition(k, 0);
 8003862:	2100      	movs	r1, #0
 8003864:	4620      	mov	r0, r4
 8003866:	f7fd f9a2 	bl	8000bae <OLED_SetPosition>
        MY_OLED_WriteNBytes(oled_data, VRAM_WIDTH);
 800386a:	2180      	movs	r1, #128	@ 0x80
 800386c:	4668      	mov	r0, sp
 800386e:	f7fd f95d 	bl	8000b2c <MY_OLED_WriteNBytes>
    for (uint8_t k = 0; k < 8; k++)
 8003872:	3401      	adds	r4, #1
 8003874:	b2e4      	uxtb	r4, r4
 8003876:	2c07      	cmp	r4, #7
 8003878:	d806      	bhi.n	8003888 <send_vram_data_to_oled+0x54>
        memset(oled_data, 0, VRAM_WIDTH);
 800387a:	2280      	movs	r2, #128	@ 0x80
 800387c:	2100      	movs	r1, #0
 800387e:	4668      	mov	r0, sp
 8003880:	f000 f873 	bl	800396a <memset>
        for (uint8_t i = 0; i < VRAM_WIDTH; i++)
 8003884:	2300      	movs	r3, #0
 8003886:	e7e9      	b.n	800385c <send_vram_data_to_oled+0x28>
    }
}
 8003888:	b020      	add	sp, #128	@ 0x80
 800388a:	bd10      	pop	{r4, pc}
 800388c:	20003270 	.word	0x20003270

08003890 <get_vram_data>:

// 获取vram数据
void get_vram_data(VRAM_typedef *vram_block)
{
 8003890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003894:	4604      	mov	r4, r0

    uint8_t get_width = get_write_block_width(vram_block);
 8003896:	f7ff fe97 	bl	80035c8 <get_write_block_width>
 800389a:	4680      	mov	r8, r0
    uint8_t get_height = get_write_block_height(vram_block);
 800389c:	4620      	mov	r0, r4
 800389e:	f7ff fea9 	bl	80035f4 <get_write_block_height>
 80038a2:	4605      	mov	r5, r0
    // 复制的第几个像素点
    uint16_t vram_data_index = 0;
    memset(vram_block->data, 0, vram_block->width * vram_block->height / 8);
 80038a4:	68e0      	ldr	r0, [r4, #12]
 80038a6:	88e2      	ldrh	r2, [r4, #6]
 80038a8:	8923      	ldrh	r3, [r4, #8]
 80038aa:	fb03 f202 	mul.w	r2, r3, r2
 80038ae:	2a00      	cmp	r2, #0
 80038b0:	db08      	blt.n	80038c4 <get_vram_data+0x34>
 80038b2:	10d2      	asrs	r2, r2, #3
 80038b4:	2100      	movs	r1, #0
 80038b6:	f000 f858 	bl	800396a <memset>
    if (vram_block != NULL)
 80038ba:	b364      	cbz	r4, 8003916 <get_vram_data+0x86>
    {
        vram_data_index = 0;
        // 需要获取的显存的x轴范围
        for (uint8_t i = vram_block->x; i < get_width + vram_block->x; i++)
 80038bc:	f894 e000 	ldrb.w	lr, [r4]
        vram_data_index = 0;
 80038c0:	2200      	movs	r2, #0
        for (uint8_t i = vram_block->x; i < get_width + vram_block->x; i++)
 80038c2:	e021      	b.n	8003908 <get_vram_data+0x78>
    memset(vram_block->data, 0, vram_block->width * vram_block->height / 8);
 80038c4:	3207      	adds	r2, #7
 80038c6:	e7f4      	b.n	80038b2 <get_vram_data+0x22>
        {
            // 需要获取的显存的x轴范围
            for (uint8_t j = vram_block->y; j < vram_block->y + get_height; j++)
            {
                vram_block->data[vram_data_index / 8] |= (main_vram_data[i][j / 8] >> (j % 8)) << (vram_data_index % 8);
 80038c8:	68e6      	ldr	r6, [r4, #12]
 80038ca:	08d7      	lsrs	r7, r2, #3
 80038cc:	5df0      	ldrb	r0, [r6, r7]
 80038ce:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80038d2:	4912      	ldr	r1, [pc, #72]	@ (800391c <get_vram_data+0x8c>)
 80038d4:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
 80038d8:	f811 1009 	ldrb.w	r1, [r1, r9]
 80038dc:	f003 0907 	and.w	r9, r3, #7
 80038e0:	fa41 f109 	asr.w	r1, r1, r9
 80038e4:	f002 0907 	and.w	r9, r2, #7
 80038e8:	fa01 f109 	lsl.w	r1, r1, r9
 80038ec:	4301      	orrs	r1, r0
 80038ee:	55f1      	strb	r1, [r6, r7]
                vram_data_index++;
 80038f0:	3201      	adds	r2, #1
 80038f2:	b292      	uxth	r2, r2
            for (uint8_t j = vram_block->y; j < vram_block->y + get_height; j++)
 80038f4:	3301      	adds	r3, #1
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	8861      	ldrh	r1, [r4, #2]
 80038fa:	4429      	add	r1, r5
 80038fc:	428b      	cmp	r3, r1
 80038fe:	dbe3      	blt.n	80038c8 <get_vram_data+0x38>
        for (uint8_t i = vram_block->x; i < get_width + vram_block->x; i++)
 8003900:	f10e 0e01 	add.w	lr, lr, #1
 8003904:	fa5f fe8e 	uxtb.w	lr, lr
 8003908:	46f4      	mov	ip, lr
 800390a:	8823      	ldrh	r3, [r4, #0]
 800390c:	4443      	add	r3, r8
 800390e:	459e      	cmp	lr, r3
 8003910:	da01      	bge.n	8003916 <get_vram_data+0x86>
            for (uint8_t j = vram_block->y; j < vram_block->y + get_height; j++)
 8003912:	78a3      	ldrb	r3, [r4, #2]
 8003914:	e7f0      	b.n	80038f8 <get_vram_data+0x68>
            }
        }
    }
}
 8003916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800391a:	bf00      	nop
 800391c:	20003270 	.word	0x20003270

08003920 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003920:	f7ff f9f8 	bl	8002d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003924:	480b      	ldr	r0, [pc, #44]	@ (8003954 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003926:	490c      	ldr	r1, [pc, #48]	@ (8003958 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003928:	4a0c      	ldr	r2, [pc, #48]	@ (800395c <LoopFillZerobss+0x16>)
  movs r3, #0
 800392a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800392c:	e002      	b.n	8003934 <LoopCopyDataInit>

0800392e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800392e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003932:	3304      	adds	r3, #4

08003934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003938:	d3f9      	bcc.n	800392e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800393a:	4a09      	ldr	r2, [pc, #36]	@ (8003960 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800393c:	4c09      	ldr	r4, [pc, #36]	@ (8003964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800393e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003940:	e001      	b.n	8003946 <LoopFillZerobss>

08003942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003944:	3204      	adds	r2, #4

08003946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003948:	d3fb      	bcc.n	8003942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800394a:	f000 f817 	bl	800397c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800394e:	f7fd fb5d 	bl	800100c <main>
  bx lr
 8003952:	4770      	bx	lr
  ldr r0, =_sdata
 8003954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003958:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 800395c:	08004cc8 	.word	0x08004cc8
  ldr r2, =_sbss
 8003960:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8003964:	200037a8 	.word	0x200037a8

08003968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003968:	e7fe      	b.n	8003968 <ADC1_2_IRQHandler>

0800396a <memset>:
 800396a:	4603      	mov	r3, r0
 800396c:	4402      	add	r2, r0
 800396e:	4293      	cmp	r3, r2
 8003970:	d100      	bne.n	8003974 <memset+0xa>
 8003972:	4770      	bx	lr
 8003974:	f803 1b01 	strb.w	r1, [r3], #1
 8003978:	e7f9      	b.n	800396e <memset+0x4>
	...

0800397c <__libc_init_array>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	2600      	movs	r6, #0
 8003980:	4d0c      	ldr	r5, [pc, #48]	@ (80039b4 <__libc_init_array+0x38>)
 8003982:	4c0d      	ldr	r4, [pc, #52]	@ (80039b8 <__libc_init_array+0x3c>)
 8003984:	1b64      	subs	r4, r4, r5
 8003986:	10a4      	asrs	r4, r4, #2
 8003988:	42a6      	cmp	r6, r4
 800398a:	d109      	bne.n	80039a0 <__libc_init_array+0x24>
 800398c:	f000 fd6a 	bl	8004464 <_init>
 8003990:	2600      	movs	r6, #0
 8003992:	4d0a      	ldr	r5, [pc, #40]	@ (80039bc <__libc_init_array+0x40>)
 8003994:	4c0a      	ldr	r4, [pc, #40]	@ (80039c0 <__libc_init_array+0x44>)
 8003996:	1b64      	subs	r4, r4, r5
 8003998:	10a4      	asrs	r4, r4, #2
 800399a:	42a6      	cmp	r6, r4
 800399c:	d105      	bne.n	80039aa <__libc_init_array+0x2e>
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a4:	4798      	blx	r3
 80039a6:	3601      	adds	r6, #1
 80039a8:	e7ee      	b.n	8003988 <__libc_init_array+0xc>
 80039aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ae:	4798      	blx	r3
 80039b0:	3601      	adds	r6, #1
 80039b2:	e7f2      	b.n	800399a <__libc_init_array+0x1e>
 80039b4:	08004cc0 	.word	0x08004cc0
 80039b8:	08004cc0 	.word	0x08004cc0
 80039bc:	08004cc0 	.word	0x08004cc0
 80039c0:	08004cc4 	.word	0x08004cc4

080039c4 <memcpy>:
 80039c4:	440a      	add	r2, r1
 80039c6:	4291      	cmp	r1, r2
 80039c8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80039cc:	d100      	bne.n	80039d0 <memcpy+0xc>
 80039ce:	4770      	bx	lr
 80039d0:	b510      	push	{r4, lr}
 80039d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039d6:	4291      	cmp	r1, r2
 80039d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039dc:	d1f9      	bne.n	80039d2 <memcpy+0xe>
 80039de:	bd10      	pop	{r4, pc}

080039e0 <roundf>:
 80039e0:	b508      	push	{r3, lr}
 80039e2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80039e6:	3b7f      	subs	r3, #127	@ 0x7f
 80039e8:	2b16      	cmp	r3, #22
 80039ea:	4601      	mov	r1, r0
 80039ec:	dc15      	bgt.n	8003a1a <roundf+0x3a>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	4602      	mov	r2, r0
 80039f2:	db0b      	blt.n	8003a0c <roundf+0x2c>
 80039f4:	480b      	ldr	r0, [pc, #44]	@ (8003a24 <roundf+0x44>)
 80039f6:	4118      	asrs	r0, r3
 80039f8:	4208      	tst	r0, r1
 80039fa:	d005      	beq.n	8003a08 <roundf+0x28>
 80039fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a00:	4119      	asrs	r1, r3
 8003a02:	4411      	add	r1, r2
 8003a04:	ea21 0100 	bic.w	r1, r1, r0
 8003a08:	4608      	mov	r0, r1
 8003a0a:	bd08      	pop	{r3, pc}
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 8003a12:	d1f9      	bne.n	8003a08 <roundf+0x28>
 8003a14:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 8003a18:	e7f6      	b.n	8003a08 <roundf+0x28>
 8003a1a:	2b80      	cmp	r3, #128	@ 0x80
 8003a1c:	d1f4      	bne.n	8003a08 <roundf+0x28>
 8003a1e:	f7fc fb85 	bl	800012c <__addsf3>
 8003a22:	bd08      	pop	{r3, pc}
 8003a24:	007fffff 	.word	0x007fffff

08003a28 <powf>:
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	4606      	mov	r6, r0
 8003a2e:	f000 f857 	bl	8003ae0 <__ieee754_powf>
 8003a32:	4621      	mov	r1, r4
 8003a34:	4605      	mov	r5, r0
 8003a36:	4620      	mov	r0, r4
 8003a38:	f7fc fe46 	bl	80006c8 <__aeabi_fcmpun>
 8003a3c:	b958      	cbnz	r0, 8003a56 <powf+0x2e>
 8003a3e:	4630      	mov	r0, r6
 8003a40:	2100      	movs	r1, #0
 8003a42:	f7fc fe0f 	bl	8000664 <__aeabi_fcmpeq>
 8003a46:	b1a0      	cbz	r0, 8003a72 <powf+0x4a>
 8003a48:	4620      	mov	r0, r4
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	f7fc fe0a 	bl	8000664 <__aeabi_fcmpeq>
 8003a50:	b118      	cbz	r0, 8003a5a <powf+0x32>
 8003a52:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8003a56:	4628      	mov	r0, r5
 8003a58:	bd70      	pop	{r4, r5, r6, pc}
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f000 f838 	bl	8003ad0 <finitef>
 8003a60:	2800      	cmp	r0, #0
 8003a62:	d0f8      	beq.n	8003a56 <powf+0x2e>
 8003a64:	4620      	mov	r0, r4
 8003a66:	2100      	movs	r1, #0
 8003a68:	f7fc fe06 	bl	8000678 <__aeabi_fcmplt>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d0f2      	beq.n	8003a56 <powf+0x2e>
 8003a70:	e023      	b.n	8003aba <powf+0x92>
 8003a72:	4628      	mov	r0, r5
 8003a74:	f000 f82c 	bl	8003ad0 <finitef>
 8003a78:	b180      	cbz	r0, 8003a9c <powf+0x74>
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	f7fc fdf1 	bl	8000664 <__aeabi_fcmpeq>
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d0e7      	beq.n	8003a56 <powf+0x2e>
 8003a86:	4630      	mov	r0, r6
 8003a88:	f000 f822 	bl	8003ad0 <finitef>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d0e2      	beq.n	8003a56 <powf+0x2e>
 8003a90:	4620      	mov	r0, r4
 8003a92:	f000 f81d 	bl	8003ad0 <finitef>
 8003a96:	2800      	cmp	r0, #0
 8003a98:	d0dd      	beq.n	8003a56 <powf+0x2e>
 8003a9a:	e00e      	b.n	8003aba <powf+0x92>
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	f000 f817 	bl	8003ad0 <finitef>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d0e9      	beq.n	8003a7a <powf+0x52>
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	f000 f812 	bl	8003ad0 <finitef>
 8003aac:	2800      	cmp	r0, #0
 8003aae:	d0e4      	beq.n	8003a7a <powf+0x52>
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	f7fc fe08 	bl	80006c8 <__aeabi_fcmpun>
 8003ab8:	b920      	cbnz	r0, 8003ac4 <powf+0x9c>
 8003aba:	f000 fccd 	bl	8004458 <__errno>
 8003abe:	2322      	movs	r3, #34	@ 0x22
 8003ac0:	6003      	str	r3, [r0, #0]
 8003ac2:	e7c8      	b.n	8003a56 <powf+0x2e>
 8003ac4:	f000 fcc8 	bl	8004458 <__errno>
 8003ac8:	2321      	movs	r3, #33	@ 0x21
 8003aca:	6003      	str	r3, [r0, #0]
 8003acc:	e7c3      	b.n	8003a56 <powf+0x2e>
 8003ace:	bf00      	nop

08003ad0 <finitef>:
 8003ad0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003ad4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8003ad8:	bfac      	ite	ge
 8003ada:	2000      	movge	r0, #0
 8003adc:	2001      	movlt	r0, #1
 8003ade:	4770      	bx	lr

08003ae0 <__ieee754_powf>:
 8003ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae4:	f031 4a00 	bics.w	sl, r1, #2147483648	@ 0x80000000
 8003ae8:	460c      	mov	r4, r1
 8003aea:	4680      	mov	r8, r0
 8003aec:	4681      	mov	r9, r0
 8003aee:	b087      	sub	sp, #28
 8003af0:	d10d      	bne.n	8003b0e <__ieee754_powf+0x2e>
 8003af2:	f480 0980 	eor.w	r9, r0, #4194304	@ 0x400000
 8003af6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8003afa:	f519 0f00 	cmn.w	r9, #8388608	@ 0x800000
 8003afe:	d918      	bls.n	8003b32 <__ieee754_powf+0x52>
 8003b00:	4621      	mov	r1, r4
 8003b02:	4640      	mov	r0, r8
 8003b04:	f7fc fb12 	bl	800012c <__addsf3>
 8003b08:	b007      	add	sp, #28
 8003b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b0e:	f020 4b00 	bic.w	fp, r0, #2147483648	@ 0x80000000
 8003b12:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8003b16:	460d      	mov	r5, r1
 8003b18:	d802      	bhi.n	8003b20 <__ieee754_powf+0x40>
 8003b1a:	f1ba 4fff 	cmp.w	sl, #2139095040	@ 0x7f800000
 8003b1e:	d90d      	bls.n	8003b3c <__ieee754_powf+0x5c>
 8003b20:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8003b24:	d1ec      	bne.n	8003b00 <__ieee754_powf+0x20>
 8003b26:	f485 0580 	eor.w	r5, r5, #4194304	@ 0x400000
 8003b2a:	006d      	lsls	r5, r5, #1
 8003b2c:	f515 0f00 	cmn.w	r5, #8388608	@ 0x800000
 8003b30:	d8e6      	bhi.n	8003b00 <__ieee754_powf+0x20>
 8003b32:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003b36:	b007      	add	sp, #28
 8003b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	465b      	mov	r3, fp
 8003b40:	db14      	blt.n	8003b6c <__ieee754_powf+0x8c>
 8003b42:	f1ba 4fff 	cmp.w	sl, #2139095040	@ 0x7f800000
 8003b46:	f000 8139 	beq.w	8003dbc <__ieee754_powf+0x2dc>
 8003b4a:	f1ba 5f7e 	cmp.w	sl, #1065353216	@ 0x3f800000
 8003b4e:	f000 8166 	beq.w	8003e1e <__ieee754_powf+0x33e>
 8003b52:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8003b56:	f000 8186 	beq.w	8003e66 <__ieee754_powf+0x386>
 8003b5a:	f1b1 5f7c 	cmp.w	r1, #1056964608	@ 0x3f000000
 8003b5e:	f040 817a 	bne.w	8003e56 <__ieee754_powf+0x376>
 8003b62:	b007      	add	sp, #28
 8003b64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b68:	f000 bc04 	b.w	8004374 <__ieee754_sqrtf>
 8003b6c:	f1ba 4f97 	cmp.w	sl, #1266679808	@ 0x4b800000
 8003b70:	f080 812d 	bcs.w	8003dce <__ieee754_powf+0x2ee>
 8003b74:	f1ba 5f7e 	cmp.w	sl, #1065353216	@ 0x3f800000
 8003b78:	f080 815c 	bcs.w	8003e34 <__ieee754_powf+0x354>
 8003b7c:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8003b80:	f000 8171 	beq.w	8003e66 <__ieee754_powf+0x386>
 8003b84:	f1b1 5f7c 	cmp.w	r1, #1056964608	@ 0x3f000000
 8003b88:	f040 8165 	bne.w	8003e56 <__ieee754_powf+0x376>
 8003b8c:	f8cd b000 	str.w	fp, [sp]
 8003b90:	f000 fbec 	bl	800436c <fabsf>
 8003b94:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8003b98:	9b00      	ldr	r3, [sp, #0]
 8003b9a:	d0b5      	beq.n	8003b08 <__ieee754_powf+0x28>
 8003b9c:	2600      	movs	r6, #0
 8003b9e:	f1bb 0f00 	cmp.w	fp, #0
 8003ba2:	f000 812f 	beq.w	8003e04 <__ieee754_powf+0x324>
 8003ba6:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8003baa:	f000 8120 	beq.w	8003dee <__ieee754_powf+0x30e>
 8003bae:	ea4f 77d9 	mov.w	r7, r9, lsr #31
 8003bb2:	3f01      	subs	r7, #1
 8003bb4:	ea56 0207 	orrs.w	r2, r6, r7
 8003bb8:	f000 815a 	beq.w	8003e70 <__ieee754_powf+0x390>
 8003bbc:	f1ba 4f9a 	cmp.w	sl, #1291845632	@ 0x4d000000
 8003bc0:	f240 817c 	bls.w	8003ebc <__ieee754_powf+0x3dc>
 8003bc4:	4bae      	ldr	r3, [pc, #696]	@ (8003e80 <__ieee754_powf+0x3a0>)
 8003bc6:	459b      	cmp	fp, r3
 8003bc8:	f240 82c8 	bls.w	800415c <__ieee754_powf+0x67c>
 8003bcc:	4bad      	ldr	r3, [pc, #692]	@ (8003e84 <__ieee754_powf+0x3a4>)
 8003bce:	459b      	cmp	fp, r3
 8003bd0:	f200 82d0 	bhi.w	8004174 <__ieee754_powf+0x694>
 8003bd4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003bd8:	f7fc faa6 	bl	8000128 <__aeabi_fsub>
 8003bdc:	49aa      	ldr	r1, [pc, #680]	@ (8003e88 <__ieee754_powf+0x3a8>)
 8003bde:	4680      	mov	r8, r0
 8003be0:	f7fc fbac 	bl	800033c <__aeabi_fmul>
 8003be4:	49a9      	ldr	r1, [pc, #676]	@ (8003e8c <__ieee754_powf+0x3ac>)
 8003be6:	4681      	mov	r9, r0
 8003be8:	4640      	mov	r0, r8
 8003bea:	f7fc fba7 	bl	800033c <__aeabi_fmul>
 8003bee:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8003bf2:	4682      	mov	sl, r0
 8003bf4:	4640      	mov	r0, r8
 8003bf6:	f7fc fba1 	bl	800033c <__aeabi_fmul>
 8003bfa:	4601      	mov	r1, r0
 8003bfc:	48a4      	ldr	r0, [pc, #656]	@ (8003e90 <__ieee754_powf+0x3b0>)
 8003bfe:	f7fc fa93 	bl	8000128 <__aeabi_fsub>
 8003c02:	4641      	mov	r1, r8
 8003c04:	f7fc fb9a 	bl	800033c <__aeabi_fmul>
 8003c08:	4601      	mov	r1, r0
 8003c0a:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8003c0e:	f7fc fa8b 	bl	8000128 <__aeabi_fsub>
 8003c12:	4641      	mov	r1, r8
 8003c14:	4683      	mov	fp, r0
 8003c16:	4640      	mov	r0, r8
 8003c18:	f7fc fb90 	bl	800033c <__aeabi_fmul>
 8003c1c:	4601      	mov	r1, r0
 8003c1e:	4658      	mov	r0, fp
 8003c20:	f7fc fb8c 	bl	800033c <__aeabi_fmul>
 8003c24:	499b      	ldr	r1, [pc, #620]	@ (8003e94 <__ieee754_powf+0x3b4>)
 8003c26:	f7fc fb89 	bl	800033c <__aeabi_fmul>
 8003c2a:	4601      	mov	r1, r0
 8003c2c:	4650      	mov	r0, sl
 8003c2e:	f7fc fa7b 	bl	8000128 <__aeabi_fsub>
 8003c32:	4680      	mov	r8, r0
 8003c34:	4648      	mov	r0, r9
 8003c36:	4641      	mov	r1, r8
 8003c38:	f7fc fa78 	bl	800012c <__addsf3>
 8003c3c:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8003c40:	f02b 0b0f 	bic.w	fp, fp, #15
 8003c44:	4649      	mov	r1, r9
 8003c46:	4658      	mov	r0, fp
 8003c48:	f7fc fa6e 	bl	8000128 <__aeabi_fsub>
 8003c4c:	4601      	mov	r1, r0
 8003c4e:	4640      	mov	r0, r8
 8003c50:	f7fc fa6a 	bl	8000128 <__aeabi_fsub>
 8003c54:	3e01      	subs	r6, #1
 8003c56:	f36f 050b 	bfc	r5, #0, #12
 8003c5a:	433e      	orrs	r6, r7
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	4680      	mov	r8, r0
 8003c60:	4620      	mov	r0, r4
 8003c62:	bf14      	ite	ne
 8003c64:	f04f 567e 	movne.w	r6, #1065353216	@ 0x3f800000
 8003c68:	4e8b      	ldreq	r6, [pc, #556]	@ (8003e98 <__ieee754_powf+0x3b8>)
 8003c6a:	f7fc fa5d 	bl	8000128 <__aeabi_fsub>
 8003c6e:	4659      	mov	r1, fp
 8003c70:	f7fc fb64 	bl	800033c <__aeabi_fmul>
 8003c74:	4603      	mov	r3, r0
 8003c76:	4621      	mov	r1, r4
 8003c78:	4640      	mov	r0, r8
 8003c7a:	461c      	mov	r4, r3
 8003c7c:	f7fc fb5e 	bl	800033c <__aeabi_fmul>
 8003c80:	4601      	mov	r1, r0
 8003c82:	4620      	mov	r0, r4
 8003c84:	f7fc fa52 	bl	800012c <__addsf3>
 8003c88:	4629      	mov	r1, r5
 8003c8a:	4607      	mov	r7, r0
 8003c8c:	4658      	mov	r0, fp
 8003c8e:	f7fc fb55 	bl	800033c <__aeabi_fmul>
 8003c92:	4604      	mov	r4, r0
 8003c94:	4638      	mov	r0, r7
 8003c96:	4621      	mov	r1, r4
 8003c98:	f7fc fa48 	bl	800012c <__addsf3>
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	4682      	mov	sl, r0
 8003ca2:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8003ca6:	f340 822b 	ble.w	8004100 <__ieee754_powf+0x620>
 8003caa:	f1b2 4f86 	cmp.w	r2, #1124073472	@ 0x43000000
 8003cae:	f200 82cb 	bhi.w	8004248 <__ieee754_powf+0x768>
 8003cb2:	f000 82aa 	beq.w	800420a <__ieee754_powf+0x72a>
 8003cb6:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8003cba:	f200 828d 	bhi.w	80041d8 <__ieee754_powf+0x6f8>
 8003cbe:	f04f 0800 	mov.w	r8, #0
 8003cc2:	4645      	mov	r5, r8
 8003cc4:	f36f 0a0b 	bfc	sl, #0, #12
 8003cc8:	4974      	ldr	r1, [pc, #464]	@ (8003e9c <__ieee754_powf+0x3bc>)
 8003cca:	4650      	mov	r0, sl
 8003ccc:	f7fc fb36 	bl	800033c <__aeabi_fmul>
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	4681      	mov	r9, r0
 8003cd4:	4650      	mov	r0, sl
 8003cd6:	f7fc fa27 	bl	8000128 <__aeabi_fsub>
 8003cda:	4601      	mov	r1, r0
 8003cdc:	4638      	mov	r0, r7
 8003cde:	f7fc fa23 	bl	8000128 <__aeabi_fsub>
 8003ce2:	496f      	ldr	r1, [pc, #444]	@ (8003ea0 <__ieee754_powf+0x3c0>)
 8003ce4:	f7fc fb2a 	bl	800033c <__aeabi_fmul>
 8003ce8:	496e      	ldr	r1, [pc, #440]	@ (8003ea4 <__ieee754_powf+0x3c4>)
 8003cea:	4604      	mov	r4, r0
 8003cec:	4650      	mov	r0, sl
 8003cee:	f7fc fb25 	bl	800033c <__aeabi_fmul>
 8003cf2:	4601      	mov	r1, r0
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7fc fa19 	bl	800012c <__addsf3>
 8003cfa:	4607      	mov	r7, r0
 8003cfc:	4648      	mov	r0, r9
 8003cfe:	4639      	mov	r1, r7
 8003d00:	f7fc fa14 	bl	800012c <__addsf3>
 8003d04:	4649      	mov	r1, r9
 8003d06:	4604      	mov	r4, r0
 8003d08:	f7fc fa0e 	bl	8000128 <__aeabi_fsub>
 8003d0c:	4601      	mov	r1, r0
 8003d0e:	4638      	mov	r0, r7
 8003d10:	f7fc fa0a 	bl	8000128 <__aeabi_fsub>
 8003d14:	4621      	mov	r1, r4
 8003d16:	4681      	mov	r9, r0
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f7fc fb0f 	bl	800033c <__aeabi_fmul>
 8003d1e:	4607      	mov	r7, r0
 8003d20:	4961      	ldr	r1, [pc, #388]	@ (8003ea8 <__ieee754_powf+0x3c8>)
 8003d22:	f7fc fb0b 	bl	800033c <__aeabi_fmul>
 8003d26:	4961      	ldr	r1, [pc, #388]	@ (8003eac <__ieee754_powf+0x3cc>)
 8003d28:	f7fc f9fe 	bl	8000128 <__aeabi_fsub>
 8003d2c:	4639      	mov	r1, r7
 8003d2e:	f7fc fb05 	bl	800033c <__aeabi_fmul>
 8003d32:	495f      	ldr	r1, [pc, #380]	@ (8003eb0 <__ieee754_powf+0x3d0>)
 8003d34:	f7fc f9fa 	bl	800012c <__addsf3>
 8003d38:	4639      	mov	r1, r7
 8003d3a:	f7fc faff 	bl	800033c <__aeabi_fmul>
 8003d3e:	495d      	ldr	r1, [pc, #372]	@ (8003eb4 <__ieee754_powf+0x3d4>)
 8003d40:	f7fc f9f2 	bl	8000128 <__aeabi_fsub>
 8003d44:	4639      	mov	r1, r7
 8003d46:	f7fc faf9 	bl	800033c <__aeabi_fmul>
 8003d4a:	495b      	ldr	r1, [pc, #364]	@ (8003eb8 <__ieee754_powf+0x3d8>)
 8003d4c:	f7fc f9ee 	bl	800012c <__addsf3>
 8003d50:	4639      	mov	r1, r7
 8003d52:	f7fc faf3 	bl	800033c <__aeabi_fmul>
 8003d56:	4601      	mov	r1, r0
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f7fc f9e5 	bl	8000128 <__aeabi_fsub>
 8003d5e:	4607      	mov	r7, r0
 8003d60:	4620      	mov	r0, r4
 8003d62:	4639      	mov	r1, r7
 8003d64:	f7fc faea 	bl	800033c <__aeabi_fmul>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003d6e:	4638      	mov	r0, r7
 8003d70:	461f      	mov	r7, r3
 8003d72:	f7fc f9d9 	bl	8000128 <__aeabi_fsub>
 8003d76:	4601      	mov	r1, r0
 8003d78:	4638      	mov	r0, r7
 8003d7a:	f7fc fb93 	bl	80004a4 <__aeabi_fdiv>
 8003d7e:	4649      	mov	r1, r9
 8003d80:	4607      	mov	r7, r0
 8003d82:	4620      	mov	r0, r4
 8003d84:	f7fc fada 	bl	800033c <__aeabi_fmul>
 8003d88:	4649      	mov	r1, r9
 8003d8a:	f7fc f9cf 	bl	800012c <__addsf3>
 8003d8e:	4601      	mov	r1, r0
 8003d90:	4638      	mov	r0, r7
 8003d92:	f7fc f9c9 	bl	8000128 <__aeabi_fsub>
 8003d96:	4621      	mov	r1, r4
 8003d98:	f7fc f9c6 	bl	8000128 <__aeabi_fsub>
 8003d9c:	4601      	mov	r1, r0
 8003d9e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003da2:	f7fc f9c1 	bl	8000128 <__aeabi_fsub>
 8003da6:	4603      	mov	r3, r0
 8003da8:	4443      	add	r3, r8
 8003daa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dae:	f2c0 81dd 	blt.w	800416c <__ieee754_powf+0x68c>
 8003db2:	4618      	mov	r0, r3
 8003db4:	4631      	mov	r1, r6
 8003db6:	f7fc fac1 	bl	800033c <__aeabi_fmul>
 8003dba:	e6a5      	b.n	8003b08 <__ieee754_powf+0x28>
 8003dbc:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8003dc0:	f43f aeb7 	beq.w	8003b32 <__ieee754_powf+0x52>
 8003dc4:	d931      	bls.n	8003e2a <__ieee754_powf+0x34a>
 8003dc6:	2d00      	cmp	r5, #0
 8003dc8:	db2d      	blt.n	8003e26 <__ieee754_powf+0x346>
 8003dca:	4620      	mov	r0, r4
 8003dcc:	e69c      	b.n	8003b08 <__ieee754_powf+0x28>
 8003dce:	f1ba 4fff 	cmp.w	sl, #2139095040	@ 0x7f800000
 8003dd2:	d0f3      	beq.n	8003dbc <__ieee754_powf+0x2dc>
 8003dd4:	2602      	movs	r6, #2
 8003dd6:	4640      	mov	r0, r8
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	f000 fac7 	bl	800436c <fabsf>
 8003dde:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8003de2:	d004      	beq.n	8003dee <__ieee754_powf+0x30e>
 8003de4:	9b00      	ldr	r3, [sp, #0]
 8003de6:	f1bb 0f00 	cmp.w	fp, #0
 8003dea:	f47f aedc 	bne.w	8003ba6 <__ieee754_powf+0xc6>
 8003dee:	2d00      	cmp	r5, #0
 8003df0:	da04      	bge.n	8003dfc <__ieee754_powf+0x31c>
 8003df2:	4601      	mov	r1, r0
 8003df4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003df8:	f7fc fb54 	bl	80004a4 <__aeabi_fdiv>
 8003dfc:	f1b9 0f00 	cmp.w	r9, #0
 8003e00:	f6bf ae82 	bge.w	8003b08 <__ieee754_powf+0x28>
 8003e04:	f1ab 5b7e 	sub.w	fp, fp, #1065353216	@ 0x3f800000
 8003e08:	ea5b 0b06 	orrs.w	fp, fp, r6
 8003e0c:	f040 8172 	bne.w	80040f4 <__ieee754_powf+0x614>
 8003e10:	4601      	mov	r1, r0
 8003e12:	f7fc f989 	bl	8000128 <__aeabi_fsub>
 8003e16:	4601      	mov	r1, r0
 8003e18:	f7fc fb44 	bl	80004a4 <__aeabi_fdiv>
 8003e1c:	e674      	b.n	8003b08 <__ieee754_powf+0x28>
 8003e1e:	2d00      	cmp	r5, #0
 8003e20:	db1b      	blt.n	8003e5a <__ieee754_powf+0x37a>
 8003e22:	4640      	mov	r0, r8
 8003e24:	e670      	b.n	8003b08 <__ieee754_powf+0x28>
 8003e26:	2000      	movs	r0, #0
 8003e28:	e66e      	b.n	8003b08 <__ieee754_powf+0x28>
 8003e2a:	2d00      	cmp	r5, #0
 8003e2c:	dafb      	bge.n	8003e26 <__ieee754_powf+0x346>
 8003e2e:	f104 4000 	add.w	r0, r4, #2147483648	@ 0x80000000
 8003e32:	e669      	b.n	8003b08 <__ieee754_powf+0x28>
 8003e34:	ea4f 52ea 	mov.w	r2, sl, asr #23
 8003e38:	f1c2 0296 	rsb	r2, r2, #150	@ 0x96
 8003e3c:	fa4a f102 	asr.w	r1, sl, r2
 8003e40:	fa01 f202 	lsl.w	r2, r1, r2
 8003e44:	4552      	cmp	r2, sl
 8003e46:	f000 8148 	beq.w	80040da <__ieee754_powf+0x5fa>
 8003e4a:	f1ba 5f7e 	cmp.w	sl, #1065353216	@ 0x3f800000
 8003e4e:	d0e6      	beq.n	8003e1e <__ieee754_powf+0x33e>
 8003e50:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8003e54:	d007      	beq.n	8003e66 <__ieee754_powf+0x386>
 8003e56:	2600      	movs	r6, #0
 8003e58:	e7bd      	b.n	8003dd6 <__ieee754_powf+0x2f6>
 8003e5a:	4641      	mov	r1, r8
 8003e5c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003e60:	f7fc fb20 	bl	80004a4 <__aeabi_fdiv>
 8003e64:	e650      	b.n	8003b08 <__ieee754_powf+0x28>
 8003e66:	4641      	mov	r1, r8
 8003e68:	4640      	mov	r0, r8
 8003e6a:	f7fc fa67 	bl	800033c <__aeabi_fmul>
 8003e6e:	e64b      	b.n	8003b08 <__ieee754_powf+0x28>
 8003e70:	4641      	mov	r1, r8
 8003e72:	4640      	mov	r0, r8
 8003e74:	f7fc f958 	bl	8000128 <__aeabi_fsub>
 8003e78:	4601      	mov	r1, r0
 8003e7a:	f7fc fb13 	bl	80004a4 <__aeabi_fdiv>
 8003e7e:	e643      	b.n	8003b08 <__ieee754_powf+0x28>
 8003e80:	3f7ffff3 	.word	0x3f7ffff3
 8003e84:	3f800007 	.word	0x3f800007
 8003e88:	3fb8aa00 	.word	0x3fb8aa00
 8003e8c:	36eca570 	.word	0x36eca570
 8003e90:	3eaaaaab 	.word	0x3eaaaaab
 8003e94:	3fb8aa3b 	.word	0x3fb8aa3b
 8003e98:	bf800000 	.word	0xbf800000
 8003e9c:	3f317200 	.word	0x3f317200
 8003ea0:	3f317218 	.word	0x3f317218
 8003ea4:	35bfbe8c 	.word	0x35bfbe8c
 8003ea8:	3331bb4c 	.word	0x3331bb4c
 8003eac:	35ddea0e 	.word	0x35ddea0e
 8003eb0:	388ab355 	.word	0x388ab355
 8003eb4:	3b360b61 	.word	0x3b360b61
 8003eb8:	3e2aaaab 	.word	0x3e2aaaab
 8003ebc:	f019 4fff 	tst.w	r9, #2139095040	@ 0x7f800000
 8003ec0:	f040 814a 	bne.w	8004158 <__ieee754_powf+0x678>
 8003ec4:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8003ec8:	f7fc fa38 	bl	800033c <__aeabi_fmul>
 8003ecc:	f06f 0117 	mvn.w	r1, #23
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	15da      	asrs	r2, r3, #23
 8003ed4:	3a7f      	subs	r2, #127	@ 0x7f
 8003ed6:	1850      	adds	r0, r2, r1
 8003ed8:	49af      	ldr	r1, [pc, #700]	@ (8004198 <__ieee754_powf+0x6b8>)
 8003eda:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8003ede:	428a      	cmp	r2, r1
 8003ee0:	9003      	str	r0, [sp, #12]
 8003ee2:	f042 587e 	orr.w	r8, r2, #1065353216	@ 0x3f800000
 8003ee6:	dd07      	ble.n	8003ef8 <__ieee754_powf+0x418>
 8003ee8:	49ac      	ldr	r1, [pc, #688]	@ (800419c <__ieee754_powf+0x6bc>)
 8003eea:	428a      	cmp	r2, r1
 8003eec:	f340 814a 	ble.w	8004184 <__ieee754_powf+0x6a4>
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	9003      	str	r0, [sp, #12]
 8003ef4:	f5a8 0800 	sub.w	r8, r8, #8388608	@ 0x800000
 8003ef8:	2300      	movs	r3, #0
 8003efa:	2200      	movs	r2, #0
 8003efc:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 8003f00:	9302      	str	r3, [sp, #8]
 8003f02:	9200      	str	r2, [sp, #0]
 8003f04:	9305      	str	r3, [sp, #20]
 8003f06:	4659      	mov	r1, fp
 8003f08:	4640      	mov	r0, r8
 8003f0a:	f7fc f90d 	bl	8000128 <__aeabi_fsub>
 8003f0e:	4659      	mov	r1, fp
 8003f10:	4681      	mov	r9, r0
 8003f12:	4640      	mov	r0, r8
 8003f14:	f7fc f90a 	bl	800012c <__addsf3>
 8003f18:	4601      	mov	r1, r0
 8003f1a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003f1e:	f7fc fac1 	bl	80004a4 <__aeabi_fdiv>
 8003f22:	4602      	mov	r2, r0
 8003f24:	4648      	mov	r0, r9
 8003f26:	4611      	mov	r1, r2
 8003f28:	9204      	str	r2, [sp, #16]
 8003f2a:	f7fc fa07 	bl	800033c <__aeabi_fmul>
 8003f2e:	ea4f 0368 	mov.w	r3, r8, asr #1
 8003f32:	9a00      	ldr	r2, [sp, #0]
 8003f34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003f38:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 8003f3c:	4413      	add	r3, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	4603      	mov	r3, r0
 8003f44:	f36f 030b 	bfc	r3, #0, #12
 8003f48:	9000      	str	r0, [sp, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	46c2      	mov	sl, r8
 8003f4e:	4698      	mov	r8, r3
 8003f50:	f7fc f9f4 	bl	800033c <__aeabi_fmul>
 8003f54:	4601      	mov	r1, r0
 8003f56:	4648      	mov	r0, r9
 8003f58:	f7fc f8e6 	bl	8000128 <__aeabi_fsub>
 8003f5c:	9b01      	ldr	r3, [sp, #4]
 8003f5e:	4681      	mov	r9, r0
 8003f60:	4659      	mov	r1, fp
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fc f8e0 	bl	8000128 <__aeabi_fsub>
 8003f68:	4601      	mov	r1, r0
 8003f6a:	4650      	mov	r0, sl
 8003f6c:	f7fc f8dc 	bl	8000128 <__aeabi_fsub>
 8003f70:	4641      	mov	r1, r8
 8003f72:	f7fc f9e3 	bl	800033c <__aeabi_fmul>
 8003f76:	4601      	mov	r1, r0
 8003f78:	4648      	mov	r0, r9
 8003f7a:	f7fc f8d5 	bl	8000128 <__aeabi_fsub>
 8003f7e:	9a04      	ldr	r2, [sp, #16]
 8003f80:	4611      	mov	r1, r2
 8003f82:	f7fc f9db 	bl	800033c <__aeabi_fmul>
 8003f86:	f8dd b000 	ldr.w	fp, [sp]
 8003f8a:	9001      	str	r0, [sp, #4]
 8003f8c:	4659      	mov	r1, fp
 8003f8e:	4658      	mov	r0, fp
 8003f90:	f7fc f9d4 	bl	800033c <__aeabi_fmul>
 8003f94:	4681      	mov	r9, r0
 8003f96:	4982      	ldr	r1, [pc, #520]	@ (80041a0 <__ieee754_powf+0x6c0>)
 8003f98:	f7fc f9d0 	bl	800033c <__aeabi_fmul>
 8003f9c:	4981      	ldr	r1, [pc, #516]	@ (80041a4 <__ieee754_powf+0x6c4>)
 8003f9e:	f7fc f8c5 	bl	800012c <__addsf3>
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	f7fc f9ca 	bl	800033c <__aeabi_fmul>
 8003fa8:	497f      	ldr	r1, [pc, #508]	@ (80041a8 <__ieee754_powf+0x6c8>)
 8003faa:	f7fc f8bf 	bl	800012c <__addsf3>
 8003fae:	4649      	mov	r1, r9
 8003fb0:	f7fc f9c4 	bl	800033c <__aeabi_fmul>
 8003fb4:	497d      	ldr	r1, [pc, #500]	@ (80041ac <__ieee754_powf+0x6cc>)
 8003fb6:	f7fc f8b9 	bl	800012c <__addsf3>
 8003fba:	4649      	mov	r1, r9
 8003fbc:	f7fc f9be 	bl	800033c <__aeabi_fmul>
 8003fc0:	497b      	ldr	r1, [pc, #492]	@ (80041b0 <__ieee754_powf+0x6d0>)
 8003fc2:	f7fc f8b3 	bl	800012c <__addsf3>
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	f7fc f9b8 	bl	800033c <__aeabi_fmul>
 8003fcc:	4979      	ldr	r1, [pc, #484]	@ (80041b4 <__ieee754_powf+0x6d4>)
 8003fce:	f7fc f8ad 	bl	800012c <__addsf3>
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	4682      	mov	sl, r0
 8003fd6:	4648      	mov	r0, r9
 8003fd8:	f7fc f9b0 	bl	800033c <__aeabi_fmul>
 8003fdc:	4601      	mov	r1, r0
 8003fde:	4650      	mov	r0, sl
 8003fe0:	f7fc f9ac 	bl	800033c <__aeabi_fmul>
 8003fe4:	4681      	mov	r9, r0
 8003fe6:	4641      	mov	r1, r8
 8003fe8:	4658      	mov	r0, fp
 8003fea:	f7fc f89f 	bl	800012c <__addsf3>
 8003fee:	9901      	ldr	r1, [sp, #4]
 8003ff0:	f7fc f9a4 	bl	800033c <__aeabi_fmul>
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	f7fc f899 	bl	800012c <__addsf3>
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	4681      	mov	r9, r0
 8003ffe:	4640      	mov	r0, r8
 8004000:	f7fc f99c 	bl	800033c <__aeabi_fmul>
 8004004:	496c      	ldr	r1, [pc, #432]	@ (80041b8 <__ieee754_powf+0x6d8>)
 8004006:	4682      	mov	sl, r0
 8004008:	f7fc f890 	bl	800012c <__addsf3>
 800400c:	4649      	mov	r1, r9
 800400e:	f7fc f88d 	bl	800012c <__addsf3>
 8004012:	4603      	mov	r3, r0
 8004014:	4640      	mov	r0, r8
 8004016:	f423 687f 	bic.w	r8, r3, #4080	@ 0xff0
 800401a:	f028 080f 	bic.w	r8, r8, #15
 800401e:	4641      	mov	r1, r8
 8004020:	f7fc f98c 	bl	800033c <__aeabi_fmul>
 8004024:	4964      	ldr	r1, [pc, #400]	@ (80041b8 <__ieee754_powf+0x6d8>)
 8004026:	4683      	mov	fp, r0
 8004028:	4640      	mov	r0, r8
 800402a:	f7fc f87d 	bl	8000128 <__aeabi_fsub>
 800402e:	4651      	mov	r1, sl
 8004030:	f7fc f87a 	bl	8000128 <__aeabi_fsub>
 8004034:	4601      	mov	r1, r0
 8004036:	4648      	mov	r0, r9
 8004038:	f7fc f876 	bl	8000128 <__aeabi_fsub>
 800403c:	9900      	ldr	r1, [sp, #0]
 800403e:	f7fc f97d 	bl	800033c <__aeabi_fmul>
 8004042:	4603      	mov	r3, r0
 8004044:	4641      	mov	r1, r8
 8004046:	9801      	ldr	r0, [sp, #4]
 8004048:	4698      	mov	r8, r3
 800404a:	f7fc f977 	bl	800033c <__aeabi_fmul>
 800404e:	4601      	mov	r1, r0
 8004050:	4640      	mov	r0, r8
 8004052:	f7fc f86b 	bl	800012c <__addsf3>
 8004056:	4682      	mov	sl, r0
 8004058:	4658      	mov	r0, fp
 800405a:	4651      	mov	r1, sl
 800405c:	f7fc f866 	bl	800012c <__addsf3>
 8004060:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8004064:	f028 080f 	bic.w	r8, r8, #15
 8004068:	4640      	mov	r0, r8
 800406a:	4954      	ldr	r1, [pc, #336]	@ (80041bc <__ieee754_powf+0x6dc>)
 800406c:	f7fc f966 	bl	800033c <__aeabi_fmul>
 8004070:	4659      	mov	r1, fp
 8004072:	4681      	mov	r9, r0
 8004074:	4640      	mov	r0, r8
 8004076:	f7fc f857 	bl	8000128 <__aeabi_fsub>
 800407a:	4601      	mov	r1, r0
 800407c:	4650      	mov	r0, sl
 800407e:	f7fc f853 	bl	8000128 <__aeabi_fsub>
 8004082:	494f      	ldr	r1, [pc, #316]	@ (80041c0 <__ieee754_powf+0x6e0>)
 8004084:	f7fc f95a 	bl	800033c <__aeabi_fmul>
 8004088:	4603      	mov	r3, r0
 800408a:	494e      	ldr	r1, [pc, #312]	@ (80041c4 <__ieee754_powf+0x6e4>)
 800408c:	4640      	mov	r0, r8
 800408e:	4698      	mov	r8, r3
 8004090:	f7fc f954 	bl	800033c <__aeabi_fmul>
 8004094:	4601      	mov	r1, r0
 8004096:	4640      	mov	r0, r8
 8004098:	f7fc f848 	bl	800012c <__addsf3>
 800409c:	9905      	ldr	r1, [sp, #20]
 800409e:	f7fc f845 	bl	800012c <__addsf3>
 80040a2:	4680      	mov	r8, r0
 80040a4:	9803      	ldr	r0, [sp, #12]
 80040a6:	f7fc f8f5 	bl	8000294 <__aeabi_i2f>
 80040aa:	4682      	mov	sl, r0
 80040ac:	4641      	mov	r1, r8
 80040ae:	4648      	mov	r0, r9
 80040b0:	f7fc f83c 	bl	800012c <__addsf3>
 80040b4:	9902      	ldr	r1, [sp, #8]
 80040b6:	f7fc f839 	bl	800012c <__addsf3>
 80040ba:	4651      	mov	r1, sl
 80040bc:	f7fc f836 	bl	800012c <__addsf3>
 80040c0:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 80040c4:	f02b 0b0f 	bic.w	fp, fp, #15
 80040c8:	4651      	mov	r1, sl
 80040ca:	4658      	mov	r0, fp
 80040cc:	f7fc f82c 	bl	8000128 <__aeabi_fsub>
 80040d0:	9902      	ldr	r1, [sp, #8]
 80040d2:	f7fc f829 	bl	8000128 <__aeabi_fsub>
 80040d6:	4649      	mov	r1, r9
 80040d8:	e5b6      	b.n	8003c48 <__ieee754_powf+0x168>
 80040da:	f1ba 5f7e 	cmp.w	sl, #1065353216	@ 0x3f800000
 80040de:	f43f ae9e 	beq.w	8003e1e <__ieee754_powf+0x33e>
 80040e2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80040e6:	f43f aebe 	beq.w	8003e66 <__ieee754_powf+0x386>
 80040ea:	f001 0101 	and.w	r1, r1, #1
 80040ee:	f1c1 0602 	rsb	r6, r1, #2
 80040f2:	e670      	b.n	8003dd6 <__ieee754_powf+0x2f6>
 80040f4:	2e01      	cmp	r6, #1
 80040f6:	f47f ad07 	bne.w	8003b08 <__ieee754_powf+0x28>
 80040fa:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80040fe:	e503      	b.n	8003b08 <__ieee754_powf+0x28>
 8004100:	4b31      	ldr	r3, [pc, #196]	@ (80041c8 <__ieee754_powf+0x6e8>)
 8004102:	429a      	cmp	r2, r3
 8004104:	f200 80a8 	bhi.w	8004258 <__ieee754_powf+0x778>
 8004108:	f47f add5 	bne.w	8003cb6 <__ieee754_powf+0x1d6>
 800410c:	4621      	mov	r1, r4
 800410e:	f7fc f80b 	bl	8000128 <__aeabi_fsub>
 8004112:	4639      	mov	r1, r7
 8004114:	f7fc fac4 	bl	80006a0 <__aeabi_fcmpge>
 8004118:	2800      	cmp	r0, #0
 800411a:	f040 809d 	bne.w	8004258 <__ieee754_powf+0x778>
 800411e:	f505 4300 	add.w	r3, r5, #32768	@ 0x8000
 8004122:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004126:	4929      	ldr	r1, [pc, #164]	@ (80041cc <__ieee754_powf+0x6ec>)
 8004128:	3a7f      	subs	r2, #127	@ 0x7f
 800412a:	4111      	asrs	r1, r2
 800412c:	4019      	ands	r1, r3
 800412e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004132:	f1c2 0217 	rsb	r2, r2, #23
 8004136:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800413a:	fa43 f502 	asr.w	r5, r3, r2
 800413e:	426d      	negs	r5, r5
 8004140:	4620      	mov	r0, r4
 8004142:	f7fb fff1 	bl	8000128 <__aeabi_fsub>
 8004146:	4604      	mov	r4, r0
 8004148:	4638      	mov	r0, r7
 800414a:	4621      	mov	r1, r4
 800414c:	f7fb ffee 	bl	800012c <__addsf3>
 8004150:	ea4f 58c5 	mov.w	r8, r5, lsl #23
 8004154:	4682      	mov	sl, r0
 8004156:	e5b5      	b.n	8003cc4 <__ieee754_powf+0x1e4>
 8004158:	2100      	movs	r1, #0
 800415a:	e6ba      	b.n	8003ed2 <__ieee754_powf+0x3f2>
 800415c:	2d00      	cmp	r5, #0
 800415e:	db0b      	blt.n	8004178 <__ieee754_powf+0x698>
 8004160:	2000      	movs	r0, #0
 8004162:	b007      	add	sp, #28
 8004164:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004168:	f000 b8a0 	b.w	80042ac <__math_uflowf>
 800416c:	4629      	mov	r1, r5
 800416e:	f000 f8a5 	bl	80042bc <scalbnf>
 8004172:	e61f      	b.n	8003db4 <__ieee754_powf+0x2d4>
 8004174:	2d00      	cmp	r5, #0
 8004176:	ddf3      	ble.n	8004160 <__ieee754_powf+0x680>
 8004178:	2000      	movs	r0, #0
 800417a:	b007      	add	sp, #28
 800417c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004180:	f000 b898 	b.w	80042b4 <__math_oflowf>
 8004184:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	4b11      	ldr	r3, [pc, #68]	@ (80041d0 <__ieee754_powf+0x6f0>)
 800418c:	f04f 5b7f 	mov.w	fp, #1069547520	@ 0x3fc00000
 8004190:	9302      	str	r3, [sp, #8]
 8004192:	4b10      	ldr	r3, [pc, #64]	@ (80041d4 <__ieee754_powf+0x6f4>)
 8004194:	9305      	str	r3, [sp, #20]
 8004196:	e6b6      	b.n	8003f06 <__ieee754_powf+0x426>
 8004198:	001cc471 	.word	0x001cc471
 800419c:	005db3d6 	.word	0x005db3d6
 80041a0:	3e53f142 	.word	0x3e53f142
 80041a4:	3e6c3255 	.word	0x3e6c3255
 80041a8:	3e8ba305 	.word	0x3e8ba305
 80041ac:	3eaaaaab 	.word	0x3eaaaaab
 80041b0:	3edb6db7 	.word	0x3edb6db7
 80041b4:	3f19999a 	.word	0x3f19999a
 80041b8:	40400000 	.word	0x40400000
 80041bc:	3f763800 	.word	0x3f763800
 80041c0:	3f76384f 	.word	0x3f76384f
 80041c4:	369dc3a0 	.word	0x369dc3a0
 80041c8:	43160000 	.word	0x43160000
 80041cc:	ff800000 	.word	0xff800000
 80041d0:	3f15c000 	.word	0x3f15c000
 80041d4:	35d1cfdc 	.word	0x35d1cfdc
 80041d8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80041dc:	15d2      	asrs	r2, r2, #23
 80041de:	3a7e      	subs	r2, #126	@ 0x7e
 80041e0:	4113      	asrs	r3, r2
 80041e2:	4453      	add	r3, sl
 80041e4:	4920      	ldr	r1, [pc, #128]	@ (8004268 <__ieee754_powf+0x788>)
 80041e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80041ea:	3a7f      	subs	r2, #127	@ 0x7f
 80041ec:	f3c3 0516 	ubfx	r5, r3, #0, #23
 80041f0:	4111      	asrs	r1, r2
 80041f2:	f445 0500 	orr.w	r5, r5, #8388608	@ 0x800000
 80041f6:	f1c2 0217 	rsb	r2, r2, #23
 80041fa:	f1ba 0f00 	cmp.w	sl, #0
 80041fe:	ea01 0103 	and.w	r1, r1, r3
 8004202:	fa45 f502 	asr.w	r5, r5, r2
 8004206:	da9b      	bge.n	8004140 <__ieee754_powf+0x660>
 8004208:	e799      	b.n	800413e <__ieee754_powf+0x65e>
 800420a:	4918      	ldr	r1, [pc, #96]	@ (800426c <__ieee754_powf+0x78c>)
 800420c:	4638      	mov	r0, r7
 800420e:	f7fb ff8d 	bl	800012c <__addsf3>
 8004212:	4603      	mov	r3, r0
 8004214:	4621      	mov	r1, r4
 8004216:	4628      	mov	r0, r5
 8004218:	461d      	mov	r5, r3
 800421a:	f7fb ff85 	bl	8000128 <__aeabi_fsub>
 800421e:	4601      	mov	r1, r0
 8004220:	4628      	mov	r0, r5
 8004222:	f7fc fa47 	bl	80006b4 <__aeabi_fcmpgt>
 8004226:	b978      	cbnz	r0, 8004248 <__ieee754_powf+0x768>
 8004228:	f50a 4300 	add.w	r3, sl, #32768	@ 0x8000
 800422c:	15da      	asrs	r2, r3, #23
 800422e:	490e      	ldr	r1, [pc, #56]	@ (8004268 <__ieee754_powf+0x788>)
 8004230:	3a7f      	subs	r2, #127	@ 0x7f
 8004232:	4111      	asrs	r1, r2
 8004234:	4019      	ands	r1, r3
 8004236:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800423a:	f1c2 0217 	rsb	r2, r2, #23
 800423e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004242:	fa43 f502 	asr.w	r5, r3, r2
 8004246:	e77b      	b.n	8004140 <__ieee754_powf+0x660>
 8004248:	4630      	mov	r0, r6
 800424a:	2100      	movs	r1, #0
 800424c:	f7fc fa14 	bl	8000678 <__aeabi_fcmplt>
 8004250:	3800      	subs	r0, #0
 8004252:	bf18      	it	ne
 8004254:	2001      	movne	r0, #1
 8004256:	e790      	b.n	800417a <__ieee754_powf+0x69a>
 8004258:	4630      	mov	r0, r6
 800425a:	2100      	movs	r1, #0
 800425c:	f7fc fa0c 	bl	8000678 <__aeabi_fcmplt>
 8004260:	3800      	subs	r0, #0
 8004262:	bf18      	it	ne
 8004264:	2001      	movne	r0, #1
 8004266:	e77c      	b.n	8004162 <__ieee754_powf+0x682>
 8004268:	ff800000 	.word	0xff800000
 800426c:	3338aa3c 	.word	0x3338aa3c

08004270 <with_errnof>:
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	4605      	mov	r5, r0
 8004274:	460c      	mov	r4, r1
 8004276:	f000 f8ef 	bl	8004458 <__errno>
 800427a:	4603      	mov	r3, r0
 800427c:	4628      	mov	r0, r5
 800427e:	601c      	str	r4, [r3, #0]
 8004280:	bd38      	pop	{r3, r4, r5, pc}
 8004282:	bf00      	nop

08004284 <xflowf>:
 8004284:	b508      	push	{r3, lr}
 8004286:	b140      	cbz	r0, 800429a <xflowf+0x16>
 8004288:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800428c:	f7fc f856 	bl	800033c <__aeabi_fmul>
 8004290:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004294:	2122      	movs	r1, #34	@ 0x22
 8004296:	f7ff bfeb 	b.w	8004270 <with_errnof>
 800429a:	4608      	mov	r0, r1
 800429c:	f7fc f84e 	bl	800033c <__aeabi_fmul>
 80042a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80042a4:	2122      	movs	r1, #34	@ 0x22
 80042a6:	f7ff bfe3 	b.w	8004270 <with_errnof>
 80042aa:	bf00      	nop

080042ac <__math_uflowf>:
 80042ac:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80042b0:	f7ff bfe8 	b.w	8004284 <xflowf>

080042b4 <__math_oflowf>:
 80042b4:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 80042b8:	f7ff bfe4 	b.w	8004284 <xflowf>

080042bc <scalbnf>:
 80042bc:	b510      	push	{r4, lr}
 80042be:	460c      	mov	r4, r1
 80042c0:	f030 4100 	bics.w	r1, r0, #2147483648	@ 0x80000000
 80042c4:	4603      	mov	r3, r0
 80042c6:	d01d      	beq.n	8004304 <scalbnf+0x48>
 80042c8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80042cc:	d21b      	bcs.n	8004306 <scalbnf+0x4a>
 80042ce:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 80042d2:	4602      	mov	r2, r0
 80042d4:	d11b      	bne.n	800430e <scalbnf+0x52>
 80042d6:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 80042da:	f7fc f82f 	bl	800033c <__aeabi_fmul>
 80042de:	4a20      	ldr	r2, [pc, #128]	@ (8004360 <scalbnf+0xa4>)
 80042e0:	4603      	mov	r3, r0
 80042e2:	4294      	cmp	r4, r2
 80042e4:	db2c      	blt.n	8004340 <scalbnf+0x84>
 80042e6:	f3c0 51c7 	ubfx	r1, r0, #23, #8
 80042ea:	4602      	mov	r2, r0
 80042ec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80042f0:	4284      	cmp	r4, r0
 80042f2:	f1a1 0119 	sub.w	r1, r1, #25
 80042f6:	dd10      	ble.n	800431a <scalbnf+0x5e>
 80042f8:	4618      	mov	r0, r3
 80042fa:	491a      	ldr	r1, [pc, #104]	@ (8004364 <scalbnf+0xa8>)
 80042fc:	f361 001e 	bfi	r0, r1, #0, #31
 8004300:	f7fc f81c 	bl	800033c <__aeabi_fmul>
 8004304:	bd10      	pop	{r4, pc}
 8004306:	4601      	mov	r1, r0
 8004308:	f7fb ff10 	bl	800012c <__addsf3>
 800430c:	bd10      	pop	{r4, pc}
 800430e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004312:	4284      	cmp	r4, r0
 8004314:	ea4f 51d1 	mov.w	r1, r1, lsr #23
 8004318:	dcee      	bgt.n	80042f8 <scalbnf+0x3c>
 800431a:	4421      	add	r1, r4
 800431c:	29fe      	cmp	r1, #254	@ 0xfe
 800431e:	dceb      	bgt.n	80042f8 <scalbnf+0x3c>
 8004320:	2900      	cmp	r1, #0
 8004322:	dc11      	bgt.n	8004348 <scalbnf+0x8c>
 8004324:	f111 0f16 	cmn.w	r1, #22
 8004328:	db13      	blt.n	8004352 <scalbnf+0x96>
 800432a:	f101 0019 	add.w	r0, r1, #25
 800432e:	f022 42ff 	bic.w	r2, r2, #2139095040	@ 0x7f800000
 8004332:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8004336:	ea42 50c0 	orr.w	r0, r2, r0, lsl #23
 800433a:	f7fb ffff 	bl	800033c <__aeabi_fmul>
 800433e:	bd10      	pop	{r4, pc}
 8004340:	4909      	ldr	r1, [pc, #36]	@ (8004368 <scalbnf+0xac>)
 8004342:	f7fb fffb 	bl	800033c <__aeabi_fmul>
 8004346:	bd10      	pop	{r4, pc}
 8004348:	f022 42ff 	bic.w	r2, r2, #2139095040	@ 0x7f800000
 800434c:	ea42 50c1 	orr.w	r0, r2, r1, lsl #23
 8004350:	bd10      	pop	{r4, pc}
 8004352:	4618      	mov	r0, r3
 8004354:	4904      	ldr	r1, [pc, #16]	@ (8004368 <scalbnf+0xac>)
 8004356:	f361 001e 	bfi	r0, r1, #0, #31
 800435a:	f7fb ffef 	bl	800033c <__aeabi_fmul>
 800435e:	bd10      	pop	{r4, pc}
 8004360:	ffff3cb0 	.word	0xffff3cb0
 8004364:	7149f2ca 	.word	0x7149f2ca
 8004368:	0da24260 	.word	0x0da24260

0800436c <fabsf>:
 800436c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop

08004374 <__ieee754_sqrtf>:
 8004374:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8004378:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800437c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004380:	4604      	mov	r4, r0
 8004382:	d251      	bcs.n	8004428 <__ieee754_sqrtf+0xb4>
 8004384:	2a00      	cmp	r2, #0
 8004386:	d045      	beq.n	8004414 <__ieee754_sqrtf+0xa0>
 8004388:	2800      	cmp	r0, #0
 800438a:	4603      	mov	r3, r0
 800438c:	db54      	blt.n	8004438 <__ieee754_sqrtf+0xc4>
 800438e:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 8004392:	d041      	beq.n	8004418 <__ieee754_sqrtf+0xa4>
 8004394:	15c1      	asrs	r1, r0, #23
 8004396:	2400      	movs	r4, #0
 8004398:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800439c:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 80043a0:	07cb      	lsls	r3, r1, #31
 80043a2:	f04f 0e19 	mov.w	lr, #25
 80043a6:	f04f 7c80 	mov.w	ip, #16777216	@ 0x1000000
 80043aa:	4621      	mov	r1, r4
 80043ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80043b0:	bf58      	it	pl
 80043b2:	0052      	lslpl	r2, r2, #1
 80043b4:	106d      	asrs	r5, r5, #1
 80043b6:	0052      	lsls	r2, r2, #1
 80043b8:	eb01 030c 	add.w	r3, r1, ip
 80043bc:	4293      	cmp	r3, r2
 80043be:	bfcf      	iteee	gt
 80043c0:	4613      	movgt	r3, r2
 80043c2:	eb03 010c 	addle.w	r1, r3, ip
 80043c6:	4464      	addle	r4, ip
 80043c8:	1ad3      	suble	r3, r2, r3
 80043ca:	f1be 0e01 	subs.w	lr, lr, #1
 80043ce:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80043d2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80043d6:	d1ef      	bne.n	80043b8 <__ieee754_sqrtf+0x44>
 80043d8:	b1bb      	cbz	r3, 800440a <__ieee754_sqrtf+0x96>
 80043da:	4e1d      	ldr	r6, [pc, #116]	@ (8004450 <__ieee754_sqrtf+0xdc>)
 80043dc:	4f1d      	ldr	r7, [pc, #116]	@ (8004454 <__ieee754_sqrtf+0xe0>)
 80043de:	6830      	ldr	r0, [r6, #0]
 80043e0:	6839      	ldr	r1, [r7, #0]
 80043e2:	f7fb fea1 	bl	8000128 <__aeabi_fsub>
 80043e6:	f8d6 8000 	ldr.w	r8, [r6]
 80043ea:	4601      	mov	r1, r0
 80043ec:	4640      	mov	r0, r8
 80043ee:	f7fc f94d 	bl	800068c <__aeabi_fcmple>
 80043f2:	b150      	cbz	r0, 800440a <__ieee754_sqrtf+0x96>
 80043f4:	6830      	ldr	r0, [r6, #0]
 80043f6:	6839      	ldr	r1, [r7, #0]
 80043f8:	f7fb fe98 	bl	800012c <__addsf3>
 80043fc:	6836      	ldr	r6, [r6, #0]
 80043fe:	4601      	mov	r1, r0
 8004400:	4630      	mov	r0, r6
 8004402:	f7fc f939 	bl	8000678 <__aeabi_fcmplt>
 8004406:	b1f8      	cbz	r0, 8004448 <__ieee754_sqrtf+0xd4>
 8004408:	3402      	adds	r4, #2
 800440a:	1060      	asrs	r0, r4, #1
 800440c:	f100 507c 	add.w	r0, r0, #1056964608	@ 0x3f000000
 8004410:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
 8004414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	0218      	lsls	r0, r3, #8
 800441c:	4611      	mov	r1, r2
 800441e:	f102 0201 	add.w	r2, r2, #1
 8004422:	d5f9      	bpl.n	8004418 <__ieee754_sqrtf+0xa4>
 8004424:	4249      	negs	r1, r1
 8004426:	e7b6      	b.n	8004396 <__ieee754_sqrtf+0x22>
 8004428:	4601      	mov	r1, r0
 800442a:	f7fb ff87 	bl	800033c <__aeabi_fmul>
 800442e:	4621      	mov	r1, r4
 8004430:	f7fb fe7c 	bl	800012c <__addsf3>
 8004434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004438:	4601      	mov	r1, r0
 800443a:	f7fb fe75 	bl	8000128 <__aeabi_fsub>
 800443e:	4601      	mov	r1, r0
 8004440:	f7fc f830 	bl	80004a4 <__aeabi_fdiv>
 8004444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004448:	3401      	adds	r4, #1
 800444a:	f024 0401 	bic.w	r4, r4, #1
 800444e:	e7dc      	b.n	800440a <__ieee754_sqrtf+0x96>
 8004450:	08004cb4 	.word	0x08004cb4
 8004454:	08004cb0 	.word	0x08004cb0

08004458 <__errno>:
 8004458:	4b01      	ldr	r3, [pc, #4]	@ (8004460 <__errno+0x8>)
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	2000015c 	.word	0x2000015c

08004464 <_init>:
 8004464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004466:	bf00      	nop
 8004468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446a:	bc08      	pop	{r3}
 800446c:	469e      	mov	lr, r3
 800446e:	4770      	bx	lr

08004470 <_fini>:
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004472:	bf00      	nop
 8004474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004476:	bc08      	pop	{r3}
 8004478:	469e      	mov	lr, r3
 800447a:	4770      	bx	lr
